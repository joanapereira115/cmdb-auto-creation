SET client_encoding = 'UTF8'; 
DROP DATABASE cim; 
CREATE DATABASE cim; 
\connect cim; 
 
 
 CREATE TABLE public.managed_element /* ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes IN the CIM Schema. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
 CREATE TABLE public.managed_system_element /* CIM_ManagedSystemElement is the base class for the System Element hierarchy. Any distinguishable component of a System is a candidate for inclusion IN this class. Examples of system components include: - software components such AS application servers, databases,
        AND applications - operating system components such AS files, processes,
        AND threads - device components such AS disk drives, controllers, processors,
        AND printers - physical components such AS chips
        AND cards. */ ( id SERIAL PRIMARY KEY ,
         install_date text[] ,
         name text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.method_parameters /* CIM_MethodParameters represents a SET of values to be used AS the parameters of a method. These parameters can be passed to the method,
         directly used by the method IN its invocation,
        
        OR accessed by the method
    WHEN it is called. The properties of a concrete subclass of MethodParameters are mapped to the parameters of a method by the method itself
        OR by the method caller. This mapping is an implementation detail that is independent of the definition of the class. For ease of use,
         property names should match parameter names. Property values should be SET before the method is invoked. The ModelCorrespondence qualifier can be used to indicate if the property value should come
FROM the property of another class. The instances that the property values should be gleaned
FROM should be associated
WITH MethodParameters
USING the Parameter ValueSources association. If the property is declared AS an array, THEN
    the same property value (identified by the Model Correspondence) will be retrieved
FROM ALL appropriate ParameterValueSources instances
        AND stored IN the array. If the property is declared AS an array
        AND the Model Correspondence is to an array property, THEN
    only one instance of the array will be copied
FROM one ParameterValueSource. If the property is NOT declared AS an array
        AND there are multiple instances of the class
        AND property associated
WITH it through ModelCorrespondence
WHERE the values are NOT ALL the same, THEN
    an error will occur
        AND the value of the property will NOT be set. Several MethodParameters instances can be associated
WITH any of the ManagedElement methods. This association allows the maintenance of 'canned' method invocation
        AND reduces the overhead of re-creating ALL method parameters for every method invocation. */ ( id SERIAL PRIMARY KEY , method_parameters_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.parameter_value_sources /* ParameterValueSources represents the association
    BETWEEN a MethodParameters instance
        AND the ManagedElement instances, which contain properties to be used to create values for the MethodParameters properties. */ ( id SERIAL PRIMARY KEY , method_parameters_id5 INTEGER REFERENCES method_parameters(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.parameters_for_method /* ParametersForMethod represents the association
    BETWEEN MethodParameters classes
        AND a ManagedElement that has a method that can use the MethodParameters during its invocation. This association is optional. The Method Parameters instance can be passed AS a parameter to a method
        OR used to create a method signature before the method is invoked. This association is useful for finding ALL the valid MethodParameters instances for a particular method. It might be particularly useful for user-oriented interfaces
        AND automated
        OR policy driven method invocations. */ ( id SERIAL PRIMARY KEY , method_parameters_id5 INTEGER REFERENCES method_parameters(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , method_name text[] ); 
        CREATE TABLE public.physical_element /* Subclasses of CIM_PhysicalElement define any component of a System that has a DISTINCT physical identity. Instances of this class can be defined AS an object that can be seen
        OR touched. ALL Processes, Files,
        AND LogicalDevices are considered NOT to be Physical Elements. For example, it is NOT possible to touch the functionality of a 'modem.' You can touch only the card
        OR package that implements the modem. The same card could also implement a LAN adapter. PhysicalElements are tangible ManagedSystemElements that have a physical manifestation of some sort. Note that the properties of PhysicalElement describe a hardware entity. Possible replacement (FRU) information is defined by following the ElementFRU association to one
        OR more instances of the ReplacementFRU class. This definition allows a client to determine what hardware can be replaced (FRUed)
        AND what 'spare' parts might be required by a customer
        OR engineer doing the replacement. If it can be instrumented
        OR manually determined that an element actually replaced (FRUed) another, THEN
    this can be described IN the model
USING the ElementHasBeenFRUed association. */ ( id SERIAL PRIMARY KEY , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
CREATE TABLE public.product /* CIM_Product is a concrete class that aggregates PhysicalElements, software (SoftwareIdentity
        AND SoftwareFeatures), Services and/or other Products,
        AND is acquired AS a unit. Acquisition implies an agreement
    BETWEEN supplier
        AND consumer which may have implications to Product licensing, support
        AND warranty. Non-commercial (e.g., in-house developed Products) should also be identified AS an instance of CIM_Product. Note that software is handled a bit differently IN the list of aggregated entities, above. This is because software can be viewed AS a tangible asset (similar to PhysicalElements) AND/
        OR AS a SET of features that make up a Product
        AND are deployed. These are two different concepts, usually managed by different units IN a business' organization. When software 'features' are described, the CIM_SoftwareFeature class from the Application Model is instantiated (where Features are Weak to/scoped by a Product). When a specific piece of software is acquired and perhaps warrantied as part of a Product, this is addressed by the class, SoftwareIdentity. */ ( id SERIAL PRIMARY KEY , name text[] , identifying_number text[] , vendor text[] , version text[] , sku_number text[] , warranty_start_date text[] , warranty_duration text[] , family text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.product_parent_child /* The CIM_ProductParentChild association defines a parent child hierarchy among Products. For example, a Product may come bundled with other Products. */ ( id SERIAL PRIMARY KEY , product_id7 INTEGER REFERENCES product(id) , product_id8 INTEGER REFERENCES product(id) ); 
        CREATE TABLE public.product_physical_elements /* Indicates the PhysicalElement(s) that make up a Product. This association is deprecated in order to correctly place it in the inheritance hierarchy and align the definition with other new classes that are being added to the model, such as CIM_ProductServiceComponent. ProductPhysicalElements was defined in the original CIM V2.0 release, when a Managed Element and a Component relationship between ManagedElements did not exist. */ ( id SERIAL PRIMARY KEY , product_id8 INTEGER REFERENCES product(id) , physical_element_id9 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.product_product_dependency /* CIM_ProductProductDependency is an association between two Products, indicating that one must be installed, or must be absent, for the other to function. This is conceptually equivalent to the ServiceServiceDependency association. */ ( id SERIAL PRIMARY KEY , product_id5 INTEGER REFERENCES product(id) , product_id6 INTEGER REFERENCES product(id) , type_of_dependency text[] ); 
        CREATE TABLE public.replacement_fru /* The ReplacementFRU class defines ordering information for replacement hardware or PhysicalElements. The element or elements that can be replaced are defined using the ElementFRU association. If a FRU is made up of other more specific parts, then this association can be described by instantiating the ConcreteComponent relationship between the grouping FRU and its parts. */ ( id SERIAL PRIMARY KEY , instance_id text[] , order_number text[] , vendor text[] , description text[] , customer_replaceable text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.setting_data /* CIM_SettingData is used to represent configuration and and operational parameters for CIM_ManagedElement instances. There are a number of different uses of CIM_SettingData supported in the model today. Additional uses may be defined in the future. Instances of CIM_SettingData may represent Aspects of a CIM_ManagedElement instance. This is modeled using the CIM_SettingsDefineState association. CIM_SettingData may be used to define capabilities when associated to an instance of CIM_Capabilities through the CIM_SettingsDefineCapabilities association. Instances of CIM_SettingData may represent different types of configurations for a CIM_ManagedElement, including persistent configurations, in progress configuration changes, or requested configurations. The CIM_ElementSettingData association is used to model the relationship between a CIM_SettingData instance and the CIM_ManagedElement for which it is a configuration. When an instance of CIM_SettingData represents a configuration, the current operational values for the parameters of the element are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values that are present in the SettingData object. For example, a modem might have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note: The CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information. SettingData instances can be aggregated together into higher- level SettingData objects using ConcreteComponent associations. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.settings_define_state /* SettingsDefineState is used to associate an instance of SettingData with an instance of ManagedElement. This association indicates that the SettingData instance provides additional information about the Current State of the associated ManagedElement. State is broadly defined to include the configuration, status, capabilities, and other information of an instance. Use of the same instance of SettingData to represent more than one of Current State (SettingsDefineState) and Desired State (ElementSettingData) and Possible State (SettingsDefineCapabilities) for a ManagedElement is not recommended. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , setting_data_id6 INTEGER REFERENCES setting_data(id) ); 
        CREATE TABLE public.statistical_data /* CIM_StatisticalData is a root class for any arbitrary collection of statistical data and/or metrics applicable to one or more ManagedElements. These statistics MUST represent the most recent observations and MUST NOT be provided if irrelevant or stale. Note that this class uses a simplified naming/identity algorithm as compared to CIM_StatisticalInformation. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.statistical_information /* CIM_StatisticalInformation is a root class for any arbitrary collection of statistical data and/or metrics applicable to one or more ManagedSystemElements. Note that the CIM_ StatisticalData class uses a simplified naming/identity algorithm as compared to this class. StatisticalInformation is not deprecated since its naming algorithm is still in use in various implementations. */ ( id SERIAL PRIMARY KEY , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.statistical_setting /* CIM_StatisticalSetting is the class for setting the collection criteria of statistical data and/or metrics applicable to one or more ManagedElements. */ ( id SERIAL PRIMARY KEY , start_statistic_time text[] , end_statistic_time text[] , sample_interval text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.statistics /* CIM_Statistics is an association that relates Managed Elements to the StatisticalGroup(s) that apply to them. */ ( id SERIAL PRIMARY KEY , statistical_information_id5 INTEGER REFERENCES statistical_information(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.support_access /* The CIM_SupportAccess association defines how to obtain assistance for a Product. */ ( id SERIAL PRIMARY KEY , support_access_id text[] , description text[] , communication_info text[] , communication_mode text[] , locale text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.synchronized /* Indicates that two ManagedElements were aligned or made to be equivalent at the specified point in time. If the Boolean property SyncMaintained is true, then synchronization of the Elements is preserved. Both like and unlike objects can be synchronized. For example, two WatchDog timers can be aligned, or the contents of a LogicalFile can be synchronized with the contents of a StorageExtent. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , when_synced text[] , sync_maintained text[] , copy_recovery_mode text[] , copy_state text[] , failed_copy_stops_host_io text[] , mode text[] , percent_synced text[] , progress_status text[] , rpo text[] , requested_copy_state text[] , skew text[] , sync_type text[] , when_activated text[] , when_deactivated text[] , when_established text[] , when_suspended text[] , when_synchronized text[] ); 
        CREATE TABLE public.system_configuration /* Note: Similar to the deprecation of CIM_Configuration, this peer class is also deprecated in favor of aggregating instances of Setting or SettingData into "higher-level" Settings or SettingData objects using the ConcreteComponent association. Deprecated description: CIM_SystemConfiguration represents the general concept of a CIM_Configuration that is scoped by a System. This class is a peer of CIM_Configuration because the key structure of Configuration is currently defined and cannot be modified with additional properties. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.system_statistical_information /* Statistical information associated with a System object or one of its subclasses. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.view /* View is an abstract class that provides a common superclass for classes providing de-normalized, aggregate representations of managed resources. The definition of each sub-class will include properties propagated from the the graph of classes that are used to model the resource in the normalized view. The classes may be resource classes or associations. The definition of how a value is propagated (i.e. source class and value transformations) is required to be specified. Sub-classes may be explicitly constrained to be read only. If a sub-class is not constrained as read only, the designers are strongly encouraged to carefully consider the data synchronization and consistencies issues that may result. The ElementView association may be used to find the instances that form the normalized view of the managed resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.common_database_setting_data /* This class contains the specific settings that identify the degree to which the high-level database capabilities that are defined in the CIM_CommonDatabaseCapabilities class are supported by a CommonDatabase. Specific values for the properties in this class must correspond to a valid capability that has been defined in the CIM_CommonDatabaseCapabilities class. Instances in the CIM_CommonDatabaseSettingData class are tied to the CommonDatabase using the ElementSettingData association. */ ( id SERIAL PRIMARY KEY , recoverability_option text[] , other_recoverability_option text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.common_database_statistics /* The CIM_CommonDatabaseStatistics class contains the current statistics for a database. */ ( id SERIAL PRIMARY KEY , size_used text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.database_resource_statistics /* The CIM_DatabaseServiceStatistics class contains the current statistics for a database resource. This class maps to the database and server-limited resource tables in the SNMP RDBMS MIB as defined in RFC 1697. */ ( id SERIAL PRIMARY KEY , current text[] , limit_ text[] , highwater text[] , failures text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.database_service_statistics /* The CIM_DatabaseServiceStatistics class contains the current statistics for a database service. These statistics are counters that are relative to the start of the service or from the time when a reset was issued. */ ( id SERIAL PRIMARY KEY , last_activity text[] , active_connections text[] , cumulative_connections text[] , rejected_connections text[] , completed_transactions text[] , disk_reads text[] , disk_writes text[] , logical_reads text[] , logical_writes text[] , page_reads text[] , page_writes text[] , disk_space_unavailable text[] , requests_handled text[] , requests_received text[] , requests_sent text[] , highwater_connections text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.block_statistics_manifest /* Instances of this class define a list of supported or desired properties of BlockStatisticalData instances. In the case where a BlockStatisticsManifest instance is a member of a BlockStatisticsManifestCollection used in a BlockStatisticsService.GetStatisticsCollection request, for each of the boolean "include" properties set to true in that BlockStatisticsManifest, the corresponding BlockStatisticalData property will be included, if available, in the statistics returned for BlockStatisticalData instances whose ElementType matches the ElementType of the BlockStatisticsManifest. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_type text[] , include_start_statistic_time text[] , include_statistic_time text[] , include_total_ios text[] , include_kbytes_transferred text[] , include_iotime_counter text[] , include_read_ios text[] , include_read_hit_ios text[] , include_read_iotime_counter text[] , include_read_hit_iotime_counter text[] , include_kbytes_read text[] , include_write_ios text[] , include_write_hit_ios text[] , include_write_iotime_counter text[] , include_write_hit_iotime_counter text[] , include_kbytes_written text[] , include_idle_time_counter text[] , include_maint_op text[] , include_maint_time_counter text[] , include_kbytes_read_rate text[] , include_kbytes_transferred_rate text[] , include_kbytes_written_rate text[] , include_maint_op_rate text[] , include_rate_interval_end_time text[] , include_rate_interval_start_time text[] , include_read_hit_ios_rate text[] , include_read_ios_rate text[] , include_read_sequential_hits text[] , include_read_sequential_ios text[] , include_total_hit_ios text[] , include_total_ios_rate text[] , include_write_hit_ios_rate text[] , include_write_ios_rate text[] , include_write_sequential_hits text[] , include_write_sequential_ios text[] , rate_element_type text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.block_storage_statistical_data /* A subclass of StatisticalData which identifies individual statistics for an element of a block storage system. This class defines the metrics that MAY be kept for managed elements of the system. */ ( id SERIAL PRIMARY KEY , element_type text[] , total_ios text[] , k_bytes_transferred text[] , k_bytes_written text[] , io_time_counter text[] , read_ios text[] , read_hit_ios text[] , read_iotime_counter text[] , read_hit_iotime_counter text[] , k_bytes_read text[] , write_ios text[] , write_hit_ios text[] , write_iotime_counter text[] , write_hit_iotime_counter text[] , idle_time_counter text[] , maint_op text[] , maint_time_counter text[] , k_bytes_read_rate text[] , k_bytes_transferred_rate text[] , k_bytes_written_rate text[] , maint_op_rate text[] , rate_element_type text[] , read_hit_ios_rate text[] , read_ios_rate text[] , read_sequential_hits text[] , read_sequential_ios text[] , total_hit_ios text[] , total_ios_rate text[] , write_hit_ios_rate text[] , write_ios_rate text[] , write_sequential_hits text[] , write_sequential_ios text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.device_error_counts /* DeviceErrorCounts is a statistical class containing error- related counters for a LogicalDevice. The types of errors are defined by CCITT (Rec X.733) and ISO (IEC 10164-4). Note that the CIM_DeviceErrorCountData class uses a simplified naming or identity algorithm as compared to this class. DeviceErrorCounts is not deprecated because its naming algorithm is still in use in various implementations. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , name text[] , indeterminate_error_count text[] , critical_error_count text[] , major_error_count text[] , minor_error_count text[] , warning_count text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.device_error_data /* DeviceErrorData is a statistical class that contains error- related counters for a LogicalDevice. The types of errors are defined by CCITT (Rec X.733) and ISO (IEC 10164-4). The element, whose statistics are described, is associated using the relationship, ElementStatisticalData. Note that this class uses a simplified identity or naming algorithm over CIM_DeviceErrorCounts. */ ( id SERIAL PRIMARY KEY , indeterminate_error_count text[] , critical_error_count text[] , major_error_count text[] , minor_error_count text[] , warning_count text[] , last_error_code text[] , error_description text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fc_port_rate_statistics /* FCPortRateStatistics is the performance rate for the FCPort. The Frame and Byte rates report the average of a counter change per second and the maximum counter change per second over a specified interval, the SampleInterval, which is defined in the parent class, StatisticalData. */ ( id SERIAL PRIMARY KEY , tx_frame_rate text[] , rx_frame_rate text[] , max_tx_frame_rate text[] , max_rx_frame_rate text[] , tx_rate text[] , rx_rate text[] , peak_tx_rate text[] , peak_rx_rate text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fc_switch_settings /* A ComputerSystem that supports FC Switch capabilities and can be configured using the FCSwitchConfig class. */ ( id SERIAL PRIMARY KEY , preferred_domain_id text[] , domain_idlocked text[] , principal_priority text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fc_topology_view /* The CIM_TopologyView provides the properties to be able to build a topology without having to do associators from the ProtocolEndpoint to the FCPort to the FCNode or FCSwitch. */ ( id SERIAL PRIMARY KEY , instance_id text[] , antecedent_fcport text[] , antecedent_system text[] , antecedent_fcport_wwn text[] , antecedent_fcport_element_name text[] , antecedent_element_wwn text[] , antecedent_fcport_type text[] , dependent_fcport text[] , dependent_system text[] , dependent_fcport_wwn text[] , dependent_fcport_element_name text[] , dependent_element_wwn text[] , dependent_fcport_type text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.file_system_group_synchronized /* Indicates that two replication groups are associated. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , relationship_name text[] , consistency_enabled text[] , consistency_type text[] , consistency_state text[] , consistency_status text[] , when_synced text[] , sync_maintained text[] , copy_recovery_mode text[] , copy_state text[] , failed_copy_stops_host_io text[] , mode text[] , percent_synced text[] , progress_status text[] , rpo text[] , requested_copy_state text[] , skew text[] , sync_type text[] , when_activated text[] , when_deactivated text[] , when_established text[] , when_suspended text[] , when_synchronized text[] ); 
        CREATE TABLE public.file_system_synchronized /* Indicates that two Storage objects were replicated at the specified point in time. If the CopyType property is set to 'Sync' (=3), then synchronization of the Storage objects is preserved. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , replication_type text[] , replica_type text[] , sync_state text[] , copy_priority text[] , copy_methodology text[] , undiscovered_element text[] , read_only text[] , when_synced text[] , sync_maintained text[] , copy_recovery_mode text[] , copy_state text[] , failed_copy_stops_host_io text[] , mode text[] , percent_synced text[] , progress_status text[] , rpo text[] , requested_copy_state text[] , skew text[] , sync_type text[] , when_activated text[] , when_deactivated text[] , when_established text[] , when_suspended text[] , when_synchronized text[] ); 
        CREATE TABLE public.label_reader_stat_data /* Statistics for a LabelReader, related to read successes, failures and retries. The element whose statistics are described is associated using the relationship, ElementStatisticalData. */ ( id SERIAL PRIMARY KEY , scan_successes text[] , scan_failures text[] , scan_retries text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.logical_port_settings /* A LogicalPort may be configured via the LogicalPortSettings class. The configuration changes are expected to be stored to non-volatile memory. */ ( id SERIAL PRIMARY KEY , requested_speed text[] , auto_sense_speed text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.logical_port_statistics /* The LogicalPortStatistics class describes the statistics for the LogicalPort of ProtocolEndpoiont. */ ( id SERIAL PRIMARY KEY , bytes_transmitted text[] , bytes_received text[] , packets_transmitted text[] , packets_received text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.media_access_stat_data /* Statistics related to reading and writing at a specific MediaAccessDevice, or for a specific StorageExtent. The same class is used to represent this data - whether for the MediaAccessDevice (independent of the StorageExtent), OR for the Extent (independent of its AccessDevice). The element whose statistics are described is associated using the relationship, ElementStatisticalData. Note that this class models the same properties as MediaAccessStatInfo. This class, however, uses the simplified key mechanisms of its superclass, StatisticalData. */ ( id SERIAL PRIMARY KEY , read_operations text[] , unrecoverable_read_operations text[] , write_operations text[] , unrecoverable_write_operations text[] , recovered_read_operations text[] , recovered_write_operations text[] , recovered_seek_operations text[] , unrecoverable_seek_operations text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.network_port_settings /* A NetworkPort may be configured via the NetworkPortSettings class. The requested configuration changes are expected to be stored to non-volatile memory. NetworkPortCapabilities defines which settings are configurable. */ ( id SERIAL PRIMARY KEY , link_technology text[] , requested_speed text[] , auto_sense_speed text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.network_port_statistics /* The NetworkPortStatistics class describes the statistics for the NetworkPort. */ ( id SERIAL PRIMARY KEY , bytes_transmitted text[] , bytes_received text[] , packets_transmitted text[] , packets_received text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.operational_power_manifest /* Instances of this class define a list of supported or desired properties of OperationalPowerStatisticalData instances. In the case where a OperationalPowerManafest instance is a member of a OperationalPowerManafestCollection used in a OperationalPowerStatisticsService.GetStatisticsCollection request, for each of the boolean "include" properties set to true in that OperationalPowerManafest, the corresponding OperationalPowerStatisticalData property will be included, if available, in the statistics returned for OperationalPowerStatisticalData instances whose ElementType matches the ElementType of the OperationalPowerManafest. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_type text[] , include_statistic_time text[] , include_milliwatts text[] , include_precision text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.operational_power_statistical_data /* A subclass of StatisticalData which identifies power attributes of a storage system. */ ( id SERIAL PRIMARY KEY , element_type text[] , milliwatts text[] , precision text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.picker_stat_data /* Statistics for a PickerElement, related to pick/put successes, retries and failures. The element whose statistics are described is associated using the relationship, ElementStatisticalData. */ ( id SERIAL PRIMARY KEY , pick_successes text[] , pick_failures text[] , pick_retries text[] , put_successes text[] , put_failures text[] , put_retries text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.powered_statistical_data /* Statistical information related to the powered-on time of a Managed Element. */ ( id SERIAL PRIMARY KEY , power_on_hours text[] , total_power_on_hours text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.replication_setting_data /* Contains various options for use by the Replication Services methods to offer clients additional control in copy operations. */ ( id SERIAL PRIMARY KEY , pairing text[] , unequal_groups_action text[] , desired_copy_methodology text[] , target_element_supplier text[] , thin_provisioning_policy text[] , consistent_point_in_time text[] , delta_update_interval text[] , multihop text[] , on_group_or_list_error text[] , copy_priority text[] , copy_recovery_mode text[] , delta_update_blocks text[] , failed_copy_stops_host_io text[] , unequal_lists_action text[] , read_only text[] , storage_compression_policy text[] , auto_delete text[] , rrc_hardware_compression_enabled text[] , rrc_software_compression_enabled text[] , target_element_goal text[] , target_element_resource_pool text[] , time_before_removal text[] , consistency_exempt text[] , consistent_async_copy text[] , desired_rpo text[] , maximum_skew text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.scsi_multipath_settings /* A class derived from CIM_SettingData describing settings related to management of multiple paths to SCSI devices. It is associated to one of more instances of subclasses of LogicalDevice that represent SCSI logical units. If a LogicalDevice instance is associated to an instance of SCSIPathConfigurationService and is not associated to an instance of this class, the the default values for properties below and the polling values from the associated CIM_SCSIMultipathConfigurationCapabilities instance apply. */ ( id SERIAL PRIMARY KEY , asymmetric_ text[] , current_load_balance_type text[] , other_current_load_balance_type text[] , auto_failback_enabled text[] , polling_rate_max text[] , current_polling_rate text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_erasure_setting /* This setting is associated to a storage element and indicates default behavior to use when the element is returned to the storage pool */ ( id SERIAL PRIMARY KEY , erasure_method text[] , erase_on_return_to_pool text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_error /* StorageError defines blocks of media or memory space that are mapped 'out of use' due to errors. The Key of the class is the StartingAddress of the bytes in error. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , starting_address text[] , ending_address text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_pool_view /* The CIM_StoragePoolView is a view that is derived from CIM_StoragePool, CIM_StorageCapabilities, CIM_ElementCapabilities, CIM_StorageConfigurationCapabilities, and CIM_AllocatedFromStoragePool. CIM_ElementView may associate CIM_StoragePoolView to its underlying elements (regardless of whether or not they are instantiated). */ ( id SERIAL PRIMARY KEY , sp_instance_id text[] , sp_element_name text[] , sp_pool_id text[] , sp_remaining_managed_space text[] , sp_total_managed_space text[] , sp_primordial text[] , sp_usage text[] , sp_other_usage_description text[] , sc_instance_id text[] , sc_element_name text[] , sc_element_type text[] , sc_nosingle_point_of_failure text[] , sc_nosingle_point_of_failure_default text[] , sc_package_redundancy_default text[] , sc_package_redundancy_min text[] , sc_package_redundancy_max text[] , sc_data_redundancy_default text[] , sc_data_redundancy_min text[] , sc_data_redundancy_max text[] , sc_extent_stripe_length_default text[] , sc_parity_layout_default text[] , sc_user_data_stripe_depth_default text[] , afsp_space_consumed text[] , scc_instance_id text[] , scc_element_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_protection_setting /* The StorageProtectionSetting class holds properties for the protection-related configuration and status of a storage element (StorageVolume or LogicalDisk). It is associated to the StorageVolume or LogicalDisk class by ElementProtectionSettingData. A management application can retrieve the protection-related information by traversing the ElementProtectionSettingData association. If is not found, it indicates no protection management is applied for the storage element. These settings can only be changed by invoking the StorageProtectionService.Protect method. */ ( id SERIAL PRIMARY KEY , protection_controlled text[] , access text[] , deny_as_copy_target text[] , lun_mapping_configurable text[] , protection_expiration_specified text[] , remaining_protection_time text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_setting /* StorageSetting is roughly equivalent to a Service Level Agreement (SLA) It defines the characteristics, qualities of service and goals when used in a CreateOrModifyElement FromStoragePool or CreateOrModifyStoragePool method in the StorageConfigurationService. It specifies a series of properties with Maximum and Minimum values that define the (inclusive) bounds that the object should maintain. Note that the setting is associated to a StorageVolume or LogicalDisk, using ElementSetting. The use of these properties differs depending on whether the StorageSetting instance is being used as a goal for a configuration operation or being used as a Service Level Agreement for a created Volume. In addition the properties fall into two categories: The QOS properties(PackageRedundancy, Data Redundancy, & NoSinglePointOfFailure) and the Detailed RAID properties(ExtentStripeLength, ParityLayout, and UserDataStripeDepth). In a Setting used as a goal, the QOS properties are required as a set; The Detailed RAID properties(if supported as indicated by the scoping StorageCapabilities instance) may be used optionally in any combination. The implementation MUST supply it's own best practice IN the
    CASE
WHERE one
        OR more supported RAID properties are NOT supplied. IN this situation the use of StorageSettingWithHints can be useful to provide direction to the implementation. IN a Setting used AS a service agreement for a Volume, the QOS properties reflect the Service Level Agreement,
WITH goal, min, & max. The actual current service level is exposed by corresponding values IN StorageExtent. The Detailed RAID properties, by contrast, reflect specific values that reflect the RAID construction of the Volume. Only the primary values are meaningful; Min
        AND Max are SET to match. Certain StorageSetting instances may be classed AS "Fixed",
         by
USING the "ChangeableType" property, indicating the setting is preset. Such settings are used
    WHEN the possible setting variations are low enough to be instantiated IN their entirety. The StorageCapabilities "CreateSetting" method MAY NOT be used to return settings that are NOT changeable. Other StorageSetting instances are created
USING the "CreateSetting" method. If the capabilities specifies ranges, THEN
    the setting can be used by a client to narrow the range to particular values within the range. IN other words, the capabilities MAY be broad, but the related setting MUST be AS capable
        OR less capable, that is more narrowly defined, before it is used to create
        OR modify resources. These created StorageSetting instances MUST have their "ChangeableType" property = 1, "Changeable - Transient". GeneratedSettings MAY NOT remain after the restart
        OR reset of the implementation. They may be deleted by implementation at any time. A reasonable minimal time to retain the generated transient settings is five minutes,
         although there is no minimal retention time. */ ( id SERIAL PRIMARY KEY ,
         no_single_point_of_failure text[] ,
         data_redundancy_max text[] ,
         data_redundancy_min text[] ,
         data_redundancy_goal text[] ,
         package_redundancy_max text[] ,
         package_redundancy_min text[] ,
         package_redundancy_goal text[] ,
         delta_reservation_max text[] ,
         delta_reservation_min text[] ,
         delta_reservation_goal text[] ,
         changeable_type text[] ,
         extent_stripe_length text[] ,
         extent_stripe_length_min text[] ,
         extent_stripe_length_max text[] ,
         parity_layout text[] ,
         user_data_stripe_depth text[] ,
         user_data_stripe_depth_min text[] ,
         user_data_stripe_depth_max text[] ,
         cu_image text[] ,
         compressed_element text[] ,
         compression_rate text[] ,
         data_organization text[] ,
         disk_type text[] ,
         emulated_device text[] ,
         encryption text[] ,
         form_factor_type text[] ,
         incremental_deltas text[] ,
         initial_synchronization text[] ,
         interconnect_speed text[] ,
         interconnect_type text[] ,
         low_space_warning_threshold text[] ,
         persistent_replica text[] ,
         port_type text[] ,
         rpm text[] ,
         replication_priority text[] ,
         space_limit text[] ,
         space_limit_warning_threshold text[] ,
         storage_extent_initial_usage text[] ,
         storage_pool_initial_usage text[] ,
         subsystem_id text[] ,
         thin_provisioned_initial_reserve text[] ,
         thin_provisioned_pool_type text[] ,
         use_replication_buffer text[] ,
         instance_id text[] ,
         element_name text[] ,
         configuration_name text[] ,
         so_id text[] ,
         so_org_id text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.storage_synchronized /* Indicates that two Storage objects were replicated at the specified point IN time. If the CopyType property is SET to 'Sync' (=3), THEN
    synchronization of the Storage objects is preserved. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , copy_type text[] , replica_type text[] , sync_state text[] , copy_methodology text[] , copy_priority text[] , read_only text[] , undiscovered_element text[] , when_synced text[] , sync_maintained text[] , copy_recovery_mode text[] , copy_state text[] , failed_copy_stops_host_io text[] , mode text[] , percent_synced text[] , progress_status text[] , rpo text[] , requested_copy_state text[] , skew text[] , sync_type text[] , when_activated text[] , when_deactivated text[] , when_established text[] , when_suspended text[] , when_synchronized text[] ); 
    CREATE TABLE public.synchronization_aspect /* A class to keep track of the source of a copy operation. Additionally, the class has a series of properties to indicate the SyncType that was used
        AND the date
        AND time of the point-in-time if it applies to the SyncType. */ ( id SERIAL PRIMARY KEY , sync_type text[] , consistency_enabled text[] , consistency_type text[] , copy_status text[] , copy_methodology text[] , when_point_in_time text[] , source_element text[] , auto_delete text[] , time_before_removal text[] , sync_state text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.tape_drive_resource_usage /* The CIM_TapeDriveResourceUsage class contains data representing Tape Drive Read & Write speed. */ ( id SERIAL PRIMARY KEY , read_speed text[] , write_speed text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.tier_setting_data /* Contains various options for use by the TierService methods to offer clients additional controls to manipulate a storage tier. The values of this class's properties are used to set the corresponding values of a storage tier properties. */ ( id SERIAL PRIMARY KEY , relative_performance_order_goal text[] , relative_performance_order_min text[] , relative_performance_order_max text[] , storage_object_type text[] , technology text[] , initial_state text[] , dynamic text[] , delete_on_empty_storage_tier text[] , percentage text[] , compression_idle_interval text[] , compression_rate text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.token_ring_port_statistics /* The TokenRingPortStatistics class describes the statistics for the TokenRingPort. */ ( id SERIAL PRIMARY KEY , burst_errors text[] , ac_errors text[] , abort_trans_errors text[] , internal_errors text[] , lost_frame_errors text[] , receive_congestions text[] , frame_copied_errors text[] , token_errors text[] , soft_errors text[] , hard_errors text[] , signal_loss_count text[] , transmitted_beacons text[] , recoverys text[] , lobe_wires text[] , removes text[] , singles text[] , frequency_errors text[] , bytes_transmitted text[] , bytes_received text[] , packets_transmitted text[] , packets_received text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.vtl_resource_usage /* The CIM_VTLResourceUsage class provides the ability to track the current resource usage of the device in order to detect when the device resources are approaching their limits (and thus further device hardware is needed or some backups needs to be moved to another device). All these device resources need to be tracked at both the whole-device level but also at the virtual library level. Tracking resource usage at the library level is critical because the VLS can be partitioned into multiple logical libraries that use physically separate resources (e.g. different front-end FC ports, different storage pools) so if the device shows 50% full this could mean one library is 100% full and another library is 0% full. It contains data representing used capacity, compression ratios and deduplication ratios at VTL or VLS level.also support the ability to set resource thresholds so that alerts are generated when the device approaches a warning or critical resource threshold (to alert the user they may need to add hardware or reduce workload) */ ( id SERIAL PRIMARY KEY , throughput text[] , relative_throughput text[] , used_physical_capacity text[] , used_logical_capacity text[] , used_physical_capacity_of_max text[] , used_logical_capacity_of_max text[] , system_ratio text[] , deduplication_ratio text[] , in_replication_throughput text[] , out_replication_throughput text[] , threshold_check_interval text[] , threshold_enabled text[] , throughput_alerts_enabled text[] , throughput_warning_alert_threshold text[] , throughput_critical_alert_threshold text[] , physical_capacity_alerts_enabled text[] , physical_capacity_warning_alert_threshold text[] , physical_capacity_critical_alert_threshold text[] , logical_capacity_alerts_enabled text[] , logical_capacity_warning_alert_threshold text[] , logical_capacity_critical_alert_threshold text[] , system_ratio_alerts_enabled text[] , system_ratio_warning_alert_threshold text[] , system_ratio_critical_alert_threshold text[] , deduplication_ratio_alerts_enabled text[] , deduplication_ratio_warning_alert_threshold text[] , deduplication_ratio_critical_alert_threshold text[] , replication_traffic_alerts_enabled text[] , replication_traffic_warning_alert_threshold text[] , replication_traffic_critical_alert_threshold text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.vtl_statistical_data /* This class provides statistical data representing the historical usage for resources exposed by the CIM_VTLStatisticalDataService methods */ ( id SERIAL PRIMARY KEY , data text[] , data_format text[] , x_axis_name text[] , y_axis_name text[] , x_axis_unit text[] , y_axis_unit text[] , start_time text[] , time_interval text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.video_head_resolution /* VideoHeadResolution describes the various video modes that a VideoHead can support. Video modes are defined by the possible horizontal and vertical resolutions, refresh rate, scan mode and number of colors settings supported by a Controller. The actual resolutions, etc. that are in use, are the values specified in the VideoHead object. */ ( id SERIAL PRIMARY KEY , horizontal_resolution text[] , vertical_resolution text[] , refresh_rate text[] , min_refresh_rate text[] , max_refresh_rate text[] , scan_mode text[] , other_scan_mode text[] , number_of_colors text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.indication /* CIM_Indication is the abstract root class for all notifications about changes in schema, objects and their data, and about events detected by providers and instrumentation. Subclasses represent specific types of notifications. To receive an Indication, a consumer (or subscriber) must create an instance of CIM_IndicationFilter describing the criteria of the notification, an instance of CIM_ListenerDestination describing the delivery of the notification, and an instance of CIM_IndicationSubscription associating the Filter and Handler. */ ( id SERIAL PRIMARY KEY , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.indication_filter /* CIM_IndicationFilter defines the criteria for generating an instance of CIM_Indication and what data should be returned in that instance. It is derived from CIM_ManagedElement to allow modeling the dependency of the filter on a specific service. If used with the "DMTF:CQLT" language, the processing and CQLT tokens that must be supported are described in the description of the QueryLanguage property */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , source_namespace text[] , individual_subscription_supported text[] , query text[] , query_language text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.indication_service_setting_data /* An IndicationService is a Service of the CIM Object Manager that is responsible for delivering indications. The following are available settings for the Indication Service. The following describes a possible configuration of settings for the associated Indication Service. */ ( id SERIAL PRIMARY KEY , filter_creation_enabled text[] , delivery_retry_attempts text[] , delivery_retry_interval text[] , subscription_removal_action text[] , subscription_removal_time_interval text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.inst_indication /* CIM_InstIndication is an abstract superclass describing changes to instances. Subclasses represent specific types of change notifications, such as instance creation, deletion and modification. */ ( id SERIAL PRIMARY KEY , source_instance text[] , source_instance_model_path text[] , source_instance_host text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.inst_method_call /* CIM_InstMethodCall notifies when an instance's method is invoked. */ ( id SERIAL PRIMARY KEY , method_name text[] , method_parameters text[] , return_value text[] , pre_call text[] , source_instance text[] , source_instance_model_path text[] , source_instance_host text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.inst_modification /* CIM_InstModification notifies
    WHEN an instance is modified. */ ( id SERIAL PRIMARY KEY , previous_instance text[] , source_instance text[] , source_instance_model_path text[] , source_instance_host text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
    CREATE TABLE public.inst_read /* CIM_InstRead notifies
    WHEN an instance is read but NOT modified. */ ( id SERIAL PRIMARY KEY , source_instance text[] , source_instance_model_path text[] , source_instance_host text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
    CREATE TABLE public.listener_destination /* The description of a CIM Listener destination. A CIM_Listener is an entity capable of receiving CIM Export Messages (e.g., Indications
        OR responses to an asynchronous CIM Operation). */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , persistence_type text[] , other_persistence_type text[] , destination text[] , other_protocol text[] , protocol text[] , password text[] , username text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.listener_destination_cimxml /* CIM_ListenerDestinationCIMXML describes the destination for CIM Export Messages to be delivered via CIM-XML. */ ( id SERIAL PRIMARY KEY , destination text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , persistence_type text[] , other_persistence_type text[] , other_protocol text[] , protocol text[] , password text[] , username text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.listener_destination_wsmanagement /* CIM_ListenerDestinationWSManagement describes the destination for CIM indications to be delivered via WS-Management. */ ( id SERIAL PRIMARY KEY , destination text[] , destination_end_to text[] , locale text[] , content_encoding text[] , delivery_mode text[] , heartbeat text[] , send_bookmark text[] , max_time text[] , delivery_auth text[] , poly_morphism_mode text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , persistence_type text[] , other_persistence_type text[] , other_protocol text[] , protocol text[] , password text[] , username text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.process_indication /* An abstract superclass for specialized Indication classes, addressing specific changes
        AND alerts published by providers
        AND instrumentation. Subclasses include AlertIndication (with properties such AS PerceivedSeverity
        AND ProbableCause),
        AND SNMPTrapIndication (which recasts Traps AS CIM indications). */ ( id SERIAL PRIMARY KEY , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.snmp_trap_indication /* A concrete class for mapping an SNMP Trap to CIM based
    ON the IETF RFC 1157. The usefulness of this class is to describe common trap semantics. But, a complete understanding of any trap data received relies
    ON the Indicaton recipient
HAVING access to the sender's MIB. Understanding can be improved by mapping the SNMP domain to CIM, and using CIM LifeCycle and standard subclasses of CIM_ProcessIndication. */ ( id SERIAL PRIMARY KEY , enterprise text[] , agent_address text[] , generic_trap text[] , specific_trap text[] , time_stamp text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
CREATE TABLE public.cimom_statistical_data /* CIM_CIMOMStatisticalData provides statistical data about the performance of the CIM Object Manager. Each object of this class provides elapsed time and size data for a particular type of CIM operation. All operations of that type, regardless of the CIM operations protocol being used, are accumulated in one object and covers the CIM operations issued by all clients of the Object Manager scoping the instance. Batched CIM operations are accumulated into a separate operation type for "Batched". The counters in this class SHOULD be implemented such that they always increment and naturally wrap around when their numerical limit is exceeded. A client that calculates the difference of two snapshots of a counter at the beginning and end of a measurement interval should get the correct result, even if there was a wrap-around in between obtaining the two snapshots. (Two or more wrap arounds will result in wrong data being calculated.) The gathering of the data can be controlled through the property, CIM_ObjectManager.GatherStatisticalData. The time interval to which the statistical data applies, ends at the current time and therefore includes the most current CIM operations. The interval starts when the statistical data gathering was last turned on for the Object Manager. */ ( id SERIAL PRIMARY KEY , instance_id text[] , operation_type text[] , other_operation_type text[] , number_of_operations text[] , cimom_elapsed_time text[] , provider_elapsed_time text[] , request_size text[] , response_size text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.error /* CIM_Error is a specialized class that contains information about the severity, cause, recommended actions and other data related to the failure of a CIM Operation. Instances of this type MAY be included as part of the response to a CIM Operation. */ ( id SERIAL PRIMARY KEY , error_type text[] , other_error_type text[] , owning_entity text[] , message_id text[] , message text[] , perceived_severity text[] , probable_cause text[] , probable_cause_description text[] , error_source text[] , error_source_format text[] , other_error_source_format text[] , cim_status_code text[] , cim_status_code_description text[] ); 
CREATE TABLE public.generic_operation_capabilities_structure /* CIM_GenericOperationCapabilitiesStructure defines a structure of the generic operations capabilities supported by a WBEM implementation (e.g. WBEM Server, WBEM Protocol, WBEM Provider, ...). One use of this strucutre would be to add to a capabilities class and associate via CIM_ElementCapabilities. For more information, see Generic Operations (DSP0223). */ ( id SERIAL PRIMARY KEY , fql_supported text[] , continue_on_error_supported text[] , minimum_operation_timeout text[] , maximum_operation_timeout text[] ); 
CREATE TABLE public.message /* CIM_Message instances represent DMTF standard messages that contain identification of the message, dynamic message arguments and the expanded message text. They can be used for returning detailed information from methods. */ ( id SERIAL PRIMARY KEY , owning_entity text[] , message_id text[] , continued_in_next_message text[] , message text[] ); 
CREATE TABLE public.namespace /* Namespace is deprecated. See CIM_WBEMServerNamespace as the replacement for this class. Namespace provides a domain (in other words, a container), in which the instances [of a class] are guaranteed to be unique per the KEY qualifier definitions. It is named relative to the CIM_ObjectManager implementation that provides such a domain. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , object_manager_creation_class_name text[] , object_manager_name text[] , creation_class_name text[] , name text[] , class_info text[] , description_of_class_info text[] , class_type text[] , class_type_version text[] , description_of_class_type text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.registered_specification /* A RegisteredSpecification is used to advertise the implementation of a specification within a WBEM server. The specification may be authored by the DMTF or another standards organization. In this context, specification is used to describe a named and versioned set of constraints. There may be a one to one correspondence between the set of constraints and the document in which they are published. An example of a one to one correspondence is the mechanism used by the DMTF to publish its profiles. An example of one to many documents to specifications is an SMI-S book published by SNIA. */ ( id SERIAL PRIMARY KEY , instance_id text[] , specification_type text[] , other_specification_type text[] , registered_organization text[] , other_registered_organization text[] , registered_name text[] , registered_version text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.schema_information_structure /* The CIM_SchemaInformation structure describes information for a specific version of a schema. */ ( id SERIAL PRIMARY KEY , name text[] , version text[] , description text[] , uri text[] , owning_organization text[] , status text[] ); 
CREATE TABLE public.system_identification /* A Namespace may represent data for one or many systems, that are local, remote (different than the system on which the ObjectManager is running) or aggregated. The System Identification class provides enough data to identify the system(s) represented in the Namespace. It is weak to the Namespace. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , object_manager_creation_class_name text[] , object_manager_name text[] , namespace_creation_class_name text[] , namespace_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.system_in_namespace /* SystemInNamespace is an association that allows enumeration of the system(s) represented in a Namespace. */ ( id SERIAL PRIMARY KEY , namespace_id5 INTEGER REFERENCES namespace(id) , system_identification_id6 INTEGER REFERENCES system_identification(id) ); 
CREATE TABLE public.wbem_server_namespace /* CIM_WBEMServerNamespace represents a namespace in a WBEM Server. A namespace provides a scope of uniqueness for some types of object. Specifically, the names of class objects and of qualifier type objects shall be unique in a namespace. The compound key of instance objects shall be unique across all instances of the class (not including subclasses) within the namespace. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.base_metric_definition /* CIM_BaseMetricDefinition represents the definitional aspects of a metric, i.e., a definition template containing meta data about a new metric. Since CIM_BaseMetricDefinition does not capture metric instance information, it does not contain the value of the metric. The associated class CIM_BaseMetricValue holds the metric value and encapsulates its runtime behavior. The purpose of CIM_BaseMetricDefinition is to provide a convenient mechanism for introducing a new metric definition at runtime and capturing its instance values in a separate class. This mechanism is targeted specifically at CIM users who would like to enhance existing CIM schemas by introducing domain-specific metrics that are not captured in the existing CIM schemas. In addition, vendors of managed resources may make use of this mechanism if a small subset of a potentially large and heterogeneous amount of performance-related data needs to be exposed, based on the context in which the data is captured. Additional meta data for a metric can be provided by subclassing from CIM_BaseMetricDefinition. The CIM_BaseMetricDefinition should be associated with the CIM_ManagedElement(s) to which it applies. */ ( id SERIAL PRIMARY KEY , name text[] , data_type text[] , calculable text[] , units text[] , is_continuous text[] , change_type text[] , time_scope text[] , gathering_type text[] , programmatic_units text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.base_metric_value /* Each CIM_BaseMetricValue object represents the instance value of a metric. Since the gathering of metric information can involve large quantities of information there may be many instances of this class. The use of this class as an instrumentation source may be inefficient unless the rate of metrics are known. The length of time a CIM_BaseMetricValue instance exists after the metric information is captured is not defined and is implementation dependent. Most metric data values change over time. There are two ways of mapping this into CIM_BaseMetricValue objects: The value for the next point in time may use the same object and just change its properties (such as the value or timestamp), or the existing objects remain unchanged and a new object is created for the new point in time. The first method is typically used for snapshot data and the second method for historical data. Which method is used, is indicated by the Volatile property. */ ( id SERIAL PRIMARY KEY , instance_id text[] , metric_definition_id text[] , measured_element_name text[] , time_stamp text[] , duration text[] , metric_value text[] , breakdown_dimension text[] , breakdown_value text[] , volatile text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.metric_definition /* The metrics that are associated with a UnitOfWork. These metrics usually describe some aspect of a UnitOfWork such as how much work was done, or the size of the UnitOfWork. For example, the size of a print job or the number of pages printed could be metrics of a 'print' UnitOfWork. */ ( id SERIAL PRIMARY KEY , validity text[] , name text[] , data_type text[] , calculable text[] , units text[] , is_continuous text[] , change_type text[] , time_scope text[] , gathering_type text[] , programmatic_units text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.trace_level_type /* TraceLevelType defines the encoding and semantics of trace levels. A trace is data that is produced during the execution of program code in order to provide information on the behaviour of the code (e.g. textual data written to files). Traces may be used for error detection/analysis or debugging. Trace levels define the granularity and/or type of the traces that are to be produced by the program code. Depending on the program implementation, levels may be applied on the fly. The possible levels are also implementation dependent, since no general rules or standards exist. In consequence, program developers could reuse their existing trace level scheme. Traces are valuable information sources for management applications in cases of error detection/analysis. In order to correctly set trace levels to the level needed (exciting exhaustive tracing by accident may result in significant system resources consumption in terms of processing time and storage) and to efficiently interpret which level of detail to expect from traces already produced by some resource, the possible trace level values and their meaning (semantics) must be known by the user and/or the management application. The type does not define the location or access method of the traces, since traces of a particular type can have multiple locations as well as multiple access methods. */ ( id SERIAL PRIMARY KEY , instance_id text[] , base_type text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.unit_of_work /* Each instance of UnitOfWork identifies a transaction that is either in-process or already completed. Because instances of 'in-process' UnitsOfWork can be very short-lived and there can be a great number of active ones, use of this class as an instrumentation source for determining response time may be incorrect or inefficient, unless the rate and duration of the UnitsOfWork are known. The intended use is to respond to queries about currently active or recently completed UnitsOfWork. The length of time that a UnitOfWork instance exists after the UnitOfWork completes is not defined and should be assumed to be implementation-dependent. This class is weak to its definition (CIM_UnitOfWorkDefintion). */ ( id SERIAL PRIMARY KEY , description text[] , uo_wdef_id text[] , user_name text[] , start_time text[] , elapsed_time text[] , status text[] , trace_level text[] , mutual_context_id text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.bgp_endpoint_statistics /* This class contains statistical information for a connection on a BGPProtocolEndpoint. It is defined as a subclass of StatisticalData and associated with the Endpoint using the relationship, ElementStatisticalData. */ ( id SERIAL PRIMARY KEY , in_updates text[] , out_updates text[] , in_total_messages text[] , out_total_messages text[] , fsm_established_transitions text[] , fsm_established_time text[] , in_update_elapsed_time text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.clp_setting_data /* A representation of the SettingData of a CLProtocol. The relationship between the SettingData and the CLP Service is described by instantiating the ProvidesEndpoint association, with an association to the transport (TelnetProtocolEndpoint or SSHProtocolEndpoint) with a BindsTo association. */ ( id SERIAL PRIMARY KEY , current_default_target text[] , keep_time text[] , wait_behavior text[] , output_format text[] , output_verbosity text[] , output_language text[] , output_position text[] , output_order text[] , output_count text[] , display_option text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.connectivity_membership_setting_data /* ConnectivityMembershipSettingData provides the identification criteria for possible members of a ConnectivityCollection. */ ( id SERIAL PRIMARY KEY , connectivity_member_type text[] , other_connectivity_member_type text[] , connectivity_member_id text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.encapsulation_mapping_setting_data /* Generic translation look up record for IP Encapsulation. For example NVGRE and VXLAN. This property contains all of the information required to make the headers for an IP overlay network. */ ( id SERIAL PRIMARY KEY , customer_ipaddress text[] , provider_ipaddress text[] , customer_macaddress text[] , customer_identifier text[] , virtual_network_identifier text[] , virtual_machine_name text[] , other_encapsulation_mode text[] , encapsulation_metadata text[] , provider_macaddress text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.ieee8021x_settings /* IEEE8021xSettings specifies a set of IEEE 802.1x Port-Based Network Access Control settings that can be applied to a ISO OSI layer 2 ProtocolEndpoint. */ ( id SERIAL PRIMARY KEY , authentication_protocol text[] , roaming_identity text[] , server_certificate_name text[] , server_certificate_name_comparison text[] , username text[] , password text[] , domain text[] , pac_password text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.ip_assignment_setting_data /* This class and its sub-classes represents Internet Protocol (IP) related settings. When used as an accumulation of settings (AddressOrigin set to 11 "cumulative configuration"), this SettingData instance is the aggregation point identifying an IP configuration. Multiple IP configurations could exist for a target. Each configuration is represented with an instance of IPAssignmentSettingData. The details of the IP configuration are defined by instances of sub-classes of this class (i.e. StaticIPAssignmentSettingData, DHCPSettingData, DNSSettingData). These instances are associated with the IPAssignmentSettingData instance using the OrderedComponent or ConcreteComponent associations. For example, a static IP configuration would be represented by an instance of IPAssignmentSettingData and an instance of StaticIPAssignmentSettingData associated via an instance of ConcreteComponent. A static IP configuration including DNS would be modeled using an instance of IPAssignmentSettingData, DNSSettingData, and StaticIPAssignmentSettingData. The DNSSettingData and StaticIPAssignmentSettingData instance would be associated with the IPAssignmentSettingData using instances of ConcreteComponent. */ ( id SERIAL PRIMARY KEY , address_origin text[] , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.ip_encapsulation_interface /* CIM_IPEncapsulationInterface specializes CIM_IPProtocolEndpoint to provide the additional configuration properties required for an IP tunnel interface. The IPProtocolEndpoint properties represent the inner IP address of the IP packet. */ ( id SERIAL PRIMARY KEY , instance_id text[] , encapsulation_mode text[] , other_encapsulation_mode text[] , cavrf_context text[] , ca_source_endpoint text[] , pavrf_context text[] , pa_source_endpoint text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ip_interface_setting_data /* The IPInterfaceSettingData is a derived class of Settingdata that specifies the IP interface settings. It contains the properties needed to establish an IPProtocolEndpoint and a NetworkVLAN. */ ( id SERIAL PRIMARY KEY , ip_address text[] , address_type text[] , subnet_mask text[] , i_pv6_prefix_length text[] , vlan_id text[] , mtu text[] , rss_capable text[] , rdma_capable text[] , link_speed text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.ip_version_setting_data /* This SettingData instance represents an IP version. This instance can be associated to one or more CIM_ManagedElements (Eg. CIM_ComputerSystem or CIM_IPNetworkConnection) to respresent the IP version. The properties of the CIM_ElementSettingData can be used show the IPVersions that are configured as default, current or Next boot. */ ( id SERIAL PRIMARY KEY , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.next_hop_route /* NextHopRoute represents one of a series of 'hops' to reach a network destination. A route is administratively defined, or calculated/learned by a particular routing process. A ConcreteDependency associaton may be instantiated between a route and its routing service to indicate this. (In this scenario, the route is dependent on the service.) */ ( id SERIAL PRIMARY KEY , instance_id text[] , destination_address text[] , admin_distance text[] , route_metric text[] , is_static text[] , type_of_route text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.sa_endpoint_connection_statistics /* This class captures statistical and time-related information about the use of the IPsec or IKE Security Associations, through their IPsecSAEndpoint or IKESAEndpoint. The relevant SAEndpoint is determined by traversing the ElementStatisticalData association. */ ( id SERIAL PRIMARY KEY , byte_count text[] , last_accessed text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.sa_endpoint_refresh_settings /* SAEndpointRefreshSettings hold the refresh thresholds for the SecurityAssociationEndpoint. Since these settings may change for an SA, the properties are defined both in this class and in SecurityAssociationEndpoint. */ ( id SERIAL PRIMARY KEY , refresh_threshold_seconds_percentage text[] , refresh_threshold_kbytes_percentage text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.ssh_setting_data /* A representation of the SettingData of an SSH endpoint. */ ( id SERIAL PRIMARY KEY , other_enabled_sshversion text[] , ssh_version text[] , encryption_algorithm text[] , other_encryption_algorithm text[] , idle_timeout text[] , keep_alive text[] , forward_x11 text[] , compression text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.scheduling_element /* SchedulingElement represents the configuration information that a PacketSchedulingService has for one of the elements that it is scheduling. The scheduled element is either a QueuingService or another Packet SchedulingService. Among the subclasses of this class, some are defined in such a way that all of their instances are work conserving. Other subclasses, however, have instances that either are or are not work conserving. In this class, the boolean property WorkConserving indicates whether an instance is or is not work conserving. Note that WorkConserving is restricted to TRUE in the subclasses that are inherently work conserving, since instances of these classes cannot be anything else. */ ( id SERIAL PRIMARY KEY , instance_id text[] , work_conserving text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.static_ipassignment_setting_data /* CIM_StaticIPAssignmentSettingData defines a basic IP configuration which could be statically assigned to an IPProtocolEndpoint. This class defines a partial configuration. Instances are aggregated into an instance of IPAssignmentSettingData which defines a full configuration. */ ( id SERIAL PRIMARY KEY , address_origin text[] , i_pv4_address text[] , subnet_mask text[] , gateway_ipv4_address text[] , gateway_ipv6_address text[] , i_pv6_address text[] , i_pv6_address_type text[] , i_pv6_subnet_prefix_length text[] , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.telnet_setting_data /* A representation of the settings of a Telnet server connection. The relationship between the SettingData and the TelnetProtocolEndpoint is described by instantiating the ElementSettingData association. */ ( id SERIAL PRIMARY KEY , terminal_mode text[] , other_terminal_mode text[] , character_display_mode text[] , other_character_display_mode text[] , escape_character text[] , idle_timeout text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.vlan_endpoint_setting_data /* The VLAN configuration data for an endpoint. Note that certain properties only apply based on the value in the VLANEndpoint. OperationalEndpointMode property. If it is set to trunking mode then NativeVLAN, PruneEligibleVLANList, DefaultVLAN and TrunkedVLANList are applicable. If it is set to in access mode, then AccessVLAN is applicable. An instance of this class is associated to the endpoint to which it applies using ElementSettingData. */ ( id SERIAL PRIMARY KEY , native_vlan text[] , default_vlan text[] , access_vlan text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.wrr_scheduling_element /* This class is a subclass of the abstract class SchedulingElement. It introduces a new property, WeightingFactor, to give some inputs a higher probability of being serviced than other inputs. It also introduces a Priority property, to serve as a tiebreaker to be used when inputs have equal weighting factors. As is the case with all subclasses of SchedulingElement, the input associated with an instance of WRRSchedulingElement is of one of two types: either a queue, or another scheduler. Because scheduling of this type is always work conserving, the inherited boolean property, WorkConserving, is restricted to TRUE in this class. */ ( id SERIAL PRIMARY KEY , work_conserving text[] , weighting_factor text[] , priority text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.wi_fi_endpoint_settings /* CIM_WiFiEndpointSettings describes setting data that can be applied to an instance of CIM_WiFiEndpoint to enable it to associate to a particular Wi-Fi network. */ ( id SERIAL PRIMARY KEY , priority text[] , ssid text[] , bss_type text[] , encryption_method text[] , other_encryption_method text[] , authentication_method text[] , other_authentication_method text[] , key_index text[] , psk_pass_phrase text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.wi_fi_network_detection_settings /* CIM_WiFiNetworkDetectionSettings describes setting data that control the behavior of the network detection and selection logic in a Wi-Fi Port. */ ( id SERIAL PRIMARY KEY , target_network_categories text[] , minimum_signal_strength text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.i_scsiconnection_settings /* The settings for the usage of an iSCSI NetworkPortal by an iSCSIProtcolEndpoint. These settings are the starting point for negotiation for connection establishment. If an implmentation supports different connections settings for a NetworkPortal for each iSCSIProtocolEndpoint that is bound to it, an instance of this class will be associated by ElementSettingData to an instance of iSCSIProtocolEndpoint. If an implementation supports the same connection settings for a NetworkPortal for all iSCSIProtocolEndpoints then an instance of this class will be associated by ElementSettingData to an instance of either TCPProtocolEndpoint (When the NetworkPortal is a target) or IPProtocolEndpoint (When the NetworkPortal is an initiator). The properties that reflect the actual outcome of the negotiation are found in the iSCSIConnection class. */ ( id SERIAL PRIMARY KEY , max_receive_data_segment_length text[] , primary_header_digest_method text[] , other_primary_header_digest_method text[] , primary_data_digest_method text[] , other_primary_data_digest_method text[] , secondary_header_digest_method text[] , other_secondary_header_digest_method text[] , secondary_data_digest_method text[] , other_secondary_data_digest_method text[] , requesting_markers_on_receive text[] , primary_authentication_method text[] , secondary_authentication_method text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.i_scsilogin_statistics /* Statistics for Logins and Logouts to or from an iSCSI Node. An instance of this class will be associated by ElementStatisticalData to an instance of SCSIProtocolController that represents the Node. The Node can be either an Initiator or Target and so the interpretation of the properties in this class varies accordingly. */ ( id SERIAL PRIMARY KEY , login_failures text[] , last_login_failure_time text[] , last_login_failure_type text[] , other_last_login_failure_type text[] , last_login_failure_remote_node_name text[] , last_login_failure_remote_address_type text[] , last_login_failure_remote_address text[] , successful_logins text[] , negotiation_login_failures text[] , authentication_login_failures text[] , authorization_login_failures text[] , login_redirects text[] , other_login_failures text[] , normal_logouts text[] , other_logouts text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.i_scsisession_failures /* Failure Statistics for Sessions associated with a iSCSI Node. An instance of this class will be associated by ElementStatisticalData to an instance of SCSIProtocolController representing an iSCSI Node. These statistics are associated to a Node since they describe the aggregated Session data for all failed Sessions associated to iSCSI protocol endpoints used by the Node. */ ( id SERIAL PRIMARY KEY , session_failures text[] , last_session_failure_type text[] , other_last_session_failure_type text[] , last_session_failure_remote_node_name text[] , session_digest_failures text[] , session_connection_timeout_failures text[] , session_format_errors text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.i_scsisession_settings /* The default negotiation settings for an iSCSI Session. These properties are used as the starting position for login negotiations between initiator and target nodes. The properties describing the resulting outcome of the login negotiation are in the iSCSISession class. Depending on a given implementation an instance of iSCSISessionSettings will be associated by ElementSettingData to one or more instances of iSCSIProtocolEndpoint, SCSIProtocolController, or ComputerSystem. */ ( id SERIAL PRIMARY KEY , max_connections_per_session text[] , initial_r2_tpreference text[] , immediate_data_preference text[] , max_outstanding_r2_t text[] , max_unsolicited_first_data_burst_length text[] , max_data_burst_length text[] , data_sequence_in_order_preference text[] , data_pduin_order_preference text[] , default_time_to_wait_preference text[] , default_time_to_retain_preference text[] , error_recovery_level_preference text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.i_scsisession_statistics /* Traffic and error statistics for an iSCSI Session. An instance of this class will be associated by ElementStatisticalData to the instance of iSCSISession. */ ( id SERIAL PRIMARY KEY , command_pdus_transferred text[] , response_pdus_transferred text[] , bytes_transmitted text[] , bytes_received text[] , digest_errors text[] , connection_timeout_errors text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.media_physical_stat_data /* Statistics related to reading physical labels and picks/puts at a specific StorageMediaLocation, or for a specific piece of PhysicalMedia. The same class is used to represent this data - whether for a Location (independent of the Media), OR for the Media (independent of its StorageMediaLocation). The element whose statistics are described is associated using the relationship, ElementStatisticalData. */ ( id SERIAL PRIMARY KEY , scan_successes text[] , scan_failures text[] , scan_retries text[] , pick_successes text[] , pick_failures text[] , pick_retries text[] , put_successes text[] , put_failures text[] , put_retries text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.physical_capacity /* PhysicalCapacity is an abstract class describing a PhysicalElement's minimum/maximum requirements
        AND ability to support different types of hardware. For example, minimum
        AND maximum memory requirements can be modeled AS a subclass of CIM_PhysicalCapacity. Note that the items described IN subclasses of PhysicalCapacity, for example the class ConfigurationCapacity, are either directly PhysicalElements (such AS I/O slots
        OR storage library magazines)
        OR closely associated to PhysicalElements via the Realizes relationship (i.e., LogicalDevices such AS batteries
        OR processors). */ ( id SERIAL PRIMARY KEY , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.physical_component /* The PhysicalComponent class represents any low-level
        OR basic Component within a Package. A Component object either can not
        OR does NOT need to be decomposed into its constituent parts. For example, an ASIC (or Chip) can NOT be further decomposed. A tape for data storage (PhysicalMedia) does NOT need to be decomposed. Any PhysicalElement that is NOT a Link, Connector,
        OR Package is a descendent (or member) of this class. For example, the UART chipset
    ON an internal modem Card would be a subclass (if additional properties
        OR associations are defined)
        OR an instance of PhysicalComponent. */ ( id SERIAL PRIMARY KEY , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.physical_connector /* The PhysicalConnector class represents any PhysicalElement that is used to connect to other Elements. Any object that can be used to connect
        AND transmit signals
        OR power
    BETWEEN two
        OR more PhysicalElements is a descendant (or member) of this class. For example, Slots
        AND D-shell connectors are types of PhysicalConnectors. */ ( id SERIAL PRIMARY KEY , connector_pinout text[] , other_type_description text[] , connector_gender text[] , num_physical_pins text[] , connector_layout text[] , connector_description text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.physical_link /* The PhysicalLink class represents the cabling of PhysicalElements together. For example, serial
        OR Ethernet cables would be subclasses (if additional properties
        OR associations are defined)
        OR instances of PhysicalLink. IN many cases, the numerous physical cables within a PhysicalPackage
        OR Network will NOT be modeled. However,
WHERE these cables
        OR Links are critical components,
        OR are tagged assets of the company, these objects can be instantiated
USING this class
        OR one of its descendent classes. */ ( id SERIAL PRIMARY KEY , max_length text[] , length text[] , wired text[] , media_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.physical_media /* The PhysicalMedia class represents any type of documentation
        OR storage medium, such AS tapes, CDROMs, etc. This class is typically used to locate
        AND manage Removable Media (versus Media sealed
WITH the MediaAccessDevice, AS a single Package, AS is the
    CASE
WITH hard disks). However, 'sealed' Media can also be modeled
USING this class,
WHERE the Media would THEN
    be associated
WITH the PhysicalPackage
USING the PackagedComponent relationship. */ ( id SERIAL PRIMARY KEY , capacity text[] , media_type text[] , media_description text[] , write_protect_on text[] , cleaner_media text[] , media_size text[] , max_mounts text[] , mount_count text[] , dual_sided text[] , time_of_last_mount text[] , total_mount_time text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
CREATE TABLE public.physical_package /* The PhysicalPackage class represents PhysicalElements that contain
        OR host other components. Examples are a Rack enclosure
        OR an adapter Card. */ ( id SERIAL PRIMARY KEY , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.physical_tape /* The PhysicalTape class represents additional data for a Tape Media. Information
    ON the tape length
        AND whether it must be unloaded
FROM BOT are properties of this class. */ ( id SERIAL PRIMARY KEY , tape_length text[] , unload_anywhere text[] , is_based_on_disk text[] , other_usage_description text[] , usage text[] , capacity text[] , media_type text[] , media_description text[] , write_protect_on text[] , cleaner_media text[] , media_size text[] , max_mounts text[] , mount_count text[] , dual_sided text[] , time_of_last_mount text[] , total_mount_time text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
CREATE TABLE public.slot /* The Slot class represents Connectors into which Packages are inserted. For example, a PhysicalPackage that is a DiskDrive may be inserted into an SCA 'Slot'. AS another example, a Card (subclass of PhysicalPackage) may be inserted into a 16-, 32-,
        OR 64-bit expansion 'Slot'
    ON a HostingBoard. PCI
        OR PCMCIA Type III Slots are examples of the latter. */ ( id SERIAL PRIMARY KEY , powered_on text[] , supports_hot_plug text[] , height_allowed text[] , length_allowed text[] , max_data_width text[] , thermal_rating text[] , special_purpose text[] , purpose_description text[] , number text[] , powered text[] , open_switch text[] , max_link_width text[] , connector_pinout text[] , other_type_description text[] , connector_gender text[] , num_physical_pins text[] , connector_layout text[] , connector_description text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.policy /* An abstract class defining the common properties of the policy managed elements derived
FROM CIM_Policy. The subclasses are used to create rules
        AND groups of rules that work together to form a coherent SET of policies within an administrative domain
        OR SET of domains. */ ( id SERIAL PRIMARY KEY ,
         common_name text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.policy_action /* A class representing a rule-specific
        OR reusable policy action to be performed if the PolicyConditions for a Policy Rule evaluate to TRUE. Since ALL operational details of a PolicyAction are provided IN subclasses of this object, this class is abstract. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_condition /* A class representing a rule-specific
        OR reusable policy condition to be evaluated IN conjunction
WITH a Policy Rule. Since ALL operational details of a PolicyCondition are provided IN subclasses of this object,
         this class is abstract. */ ( id SERIAL PRIMARY KEY ,
         system_creation_class_name text[] ,
         system_name text[] ,
         policy_rule_creation_class_name text[] ,
         policy_rule_name text[] ,
         creation_class_name text[] ,
         policy_condition_name text[] ,
         common_name text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.policy_set /* PolicySet is an abstract class that represents a SET of policies that form a coherent set. The SET of contained policies has a common decision strategy
        AND a common SET of policy roles (defined via the PolicySetInRole Collection association). Subclasses include PolicyGroup
        AND PolicyRule. */ ( id SERIAL PRIMARY KEY , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_set_applies_to_element /* PolicySetAppliesToElement makes explicit which PolicySets (i.e., policy rules
        AND groups of rules) ARE CURRENTLY applied to a particular Element. This association indicates that the PolicySets that are appropriate for a ManagedElement (specified
USING the PolicyRoleCollection aggregation) have actually been deployed IN the policy management infrastructure. Note that if the named Element refers to a Collection, THEN
    the PolicySet is assumed to be applied to ALL the members of the Collection. */ ( id SERIAL PRIMARY KEY , policy_set_id5 INTEGER REFERENCES policy_set(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
    CREATE TABLE public.policy_time_period_condition /* This class provides a means of representing the time periods during which a PolicySet is valid, i.e., active. At ALL times that fall outside these time periods, the PolicySet has no effect. A PolicySet is treated AS valid at ALL times, if it does NOT specify a PolicyTimePeriodCondition. IN some cases a Policy Consumer may need to perform certain setup / cleanup actions
    WHEN a PolicySet becomes active / inactive. For example, sessions that were established while a PolicySet was active might need to be taken down
    WHEN the PolicySet becomes inactive. IN other cases, however, such sessions might be left up. IN this case, the effect of deactivating the PolicySet would just be to prevent the establishment of new sessions. Setup / cleanup behaviors
    ON validity period transitions are NOT currently addressed by the Policy Model,
        AND must be specified IN 'guideline' documents
        OR via subclasses of CIM_PolicySet, CIM_PolicyTimePeriod Condition
        OR other concrete subclasses of CIM_Policy. If such behaviors need to be under the control of the policy administrator, THEN
    a mechanism to allow this control must also be specified IN the subclasses. PolicyTimePeriodCondition is defined AS a subclass of PolicyCondition. This is to allow the inclusion of time-based criteria IN the AND/OR condition definitions for a PolicyRule. Instances of this class may have up to five properties identifying time periods at different levels. The values of ALL the properties present IN an instance are ANDed together to determine the validity period(s) for the instance. For example, an instance
WITH an overall validity range of January 1, 2000 through December 31, 2000; a month mask that selects March
        AND April; a day-of-the-week mask that selects Fridays;
        AND a time of day range of 0800 through 1600 would be represented
USING the following time periods: Friday, March 5, 2000,
FROM 0800 through 1600; Friday, March 12, 2000,
FROM 0800 through 1600; Friday, March 19, 2000,
FROM 0800 through 1600; Friday, March 26, 2000,
FROM 0800 through 1600; Friday, April 2, 2000,
FROM 0800 through 1600; Friday, April 9, 2000,
FROM 0800 through 1600; Friday, April 16, 2000,
FROM 0800 through 1600; Friday, April 23, 2000,
FROM 0800 through 1600; Friday, April 30, 2000,
FROM 0800 through 1600. Properties NOT present IN an instance of PolicyTimePeriodCondition are implicitly treated as
HAVING their value 'always enabled'. Thus, IN the example above, the day-of-the-month mask is NOT present,
        AND so the validity period for the instance implicitly includes a day-of-the-month mask that selects ALL days of the month. If this 'missing property' rule is applied to its fullest, we see that there is a second way to indicate that a PolicySet is always enabled: associate
WITH it an instance of PolicyTimePeriodCondition whose only properties
WITH specific values are its key properties. */ ( id SERIAL PRIMARY KEY ,
         time_period text[] ,
         time_of_day_mask text[] ,
         local_or_utc_time text[] ,
         system_creation_class_name text[] ,
         system_name text[] ,
         policy_rule_creation_class_name text[] ,
         policy_rule_name text[] ,
         creation_class_name text[] ,
         policy_condition_name text[] ,
         common_name text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.query_condition /* QueryCondition defines the criteria for generating a SET of query results that are accessible to other QueryConditions
        OR MethodActions of the same PolicyRule. If there are no results returned
FROM the query, THEN
    the Condition evaluates to false; otherwise, true. QueryConditions are assumed to be constantly evaluated whenever precursor PolicyConditions are met. Actual implementations may evaluate conditions dynamically, via polling,
        OR via other means. QueryCondition instances are viewed AS clients of query. The QueryCondition implementation takes the query results
        AND makes them available by the name specified IN QueryResultName to the
FROM clause IN the Query property of other QueryConditions
        OR MethodActions. (The details of how this is accomplished are implementation dependent.) These results are NOT available via CIM Operations, do NOT create lifecycle indications,
        AND do NOT persist beyond a single evaluation of the associated PolicyRule. */ ( id SERIAL PRIMARY KEY , query_result_name text[] , query text[] , query_language text[] , trigger text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.reject_connection_action /* RejectConnectionAction is used to cause a connection
        OR its negotiation to be terminated. For example, it can be used IN conjunction
WITH an address filter
    ON UDP port 500 to reduce Denial of Service vulnerability. AS another example, it can be specified AS a low priority rule to explicitly define the default action for IKE key exchange negotiations - i.e., if the higher priority rules are NOT satisfied, THEN
    reject the connection negotiation. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.vendor_policy_action /* A class that provides a general extension mechanism for representing PolicyActions that have NOT been modeled
WITH specific properties. Instead, the two properties ActionData
        AND ActionEncoding are used to define the content
        AND format of the Action, AS explained below. AS its name suggests, VendorPolicyAction is intended for vendor-specific extensions to the Policy Core Information Model. Standardized extensions are NOT expected to use this class. */ ( id SERIAL PRIMARY KEY , action_encoding text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.vendor_policy_condition /* A class that provides a general extension mechanism for representing PolicyConditions that have NOT been modeled
WITH specific properties. Instead, the two properties Constraint
        AND ConstraintEncoding are used to define the content
        AND format of the Condition, AS explained below. AS its name suggests, VendorPolicyCondition is intended for vendor-specific extensions to the Policy Core Information Model. Standardized extensions are NOT expected to use this class. */ ( id SERIAL PRIMARY KEY , constraint_encoding text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__exchange_element /* PRS_ExchangeElement is an abstract base class for ALL classes IN the Solution
        AND Service Incident object model. AS an abstract class it is never instantiated. PRS_ExchangeElement EXISTS to provide a single anchor point for associations that may be made to any Solution
        OR Service Incident object. For example, Administrative
        OR Attachment instances may be associated
WITH any object derived
FROM PRS_ExchangeElement. To support this generic association capability, the PRS_AdminAssociation
        AND PRS_Attached associations both derive
FROM the CIM_Dependency association
        AND override the Antecedent property of that class to be a PRS_ExchangeElement REF. */ ( id SERIAL PRIMARY KEY , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__expression_element /* PRS_ExpressionElement is an abstract base class for PRS_Products
        AND PRS_Statements. It provides a common association point for objects associated
WITH PRS_Expressions. */ ( id SERIAL PRIMARY KEY , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__feature /* PRS_Feature is used for structured diagnostic data, including specific data values LIKE steps
        OR conditions. For example, consider a PRS_Statement
WITH a Text property value of: Print jobs per day are less than 50 This could be described
USING a PRS_Feature AS follows: Description: 'Print jobs per day' Prompt: 'How many print jobs per day?' ValidValues: '10' '50' '100' DataType: 'Integer' The associated PRS_Statement would contain: Operator: '<' FeatureValue: '50' */ ( id SERIAL PRIMARY KEY , prompt text[] , valid_values text[] , data_type text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__location /* PRS_Location describes the location of a PRS_Address. */ ( id SERIAL PRIMARY KEY , location_type text[] , location_id text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__product /* PRS_Product is used to describe a single product to associate
WITH a PRS_Expression. */ ( id SERIAL PRIMARY KEY , vendor text[] , product_name text[] , version text[] , order_ text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__resource /* Each PRS_Resolution may have an associated cost of implementation. This cost may have several components such AS time, material costs, labor cost, etc. To capture these costs, a PRS_Resouce is associated
WITH a PRS_Resolution. For Service Incidents, one
        OR more PRS_Resource objects may be associated
WITH an Activity. */ ( id SERIAL PRIMARY KEY , resource_type text[] , quantity text[] , units text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__revision /* PRS_Revision records changes to the content. */ ( id SERIAL PRIMARY KEY , revision_date text[] , activity_name text[] , activity_type text[] , technical_status text[] , editorial_status text[] , description text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__service_incident /* PRS_ServiceIncident contains the fundamental information related to a specific incident: its identity, status, priority, etc. The actual incident data, including specific transactions
        AND resolution information, is contained IN the objects associated
WITH PRS_ServiceIncident. These include specific Problem, Resolution
        AND Activity related objects accrued through the Transaction workflow. */ ( id SERIAL PRIMARY KEY ,
         requester_id text[] ,
         provider_id text[] ,
         current_state text[] ,
         requester_severity text[] ,
         provider_priority text[] ,
         response_time text[] ,
         workflow_status text[] ,
         comment text[] ,
         entitled text[] ,
         acknowledge text[] ,
         transaction_name text[] ,
         last_transaction text[] ,
         prs_unique_name text[] ,
         dirty_flag text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.prs__solution /* PRS_Solution is the root class of a SET of associated classes used to describe a single Solution. If a Solution is associated
WITH multiple Problems
        OR Resolutions, ALL of the Problems described are related to ALL of the Resolutions described. The reverse is also true. ALL of the Resolutions described are related to ALL of the Problems described IN the Solution. PRS_Solution is directly associated to one
        OR more of the following classes: PRS_Reference PRS_Problem PRS_Resolution. */ ( id SERIAL PRIMARY KEY , title text[] , solution_abstract text[] , solution_type text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__solution_element /* PRS_SolutionElement is an abstract base class for non-Category objects that are associated
WITH a Solution. This includes: PRS_Reference PRS_Problem PRS_Resolution PRS_SolutionElement provides a common reference for these objects to be associated
WITH PRS_Expression objects through the SolutionExpression association. IN addition, ALL of the derived objects may be retrieved
WITH a single query for the common super-class. */ ( id SERIAL PRIMARY KEY , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__statement /* PRS_Statement contains the text describing a problem, any relevant background information,
        AND its resolution. Statements are units of text ranging
FROM brief sentences
        OR phrases to paragraphs
        OR pages. There is no limit to the number of PRS_Statements within a Solution, AS long AS they support the intent
        AND focus of their root class. Root classes include: PRS_Reference, PRS_Problem
        OR PRS_Resolution. PRS_Statements may be grouped together to build compound 'sentences'. For example, StatementA = Printer output is blotchy. StatementB = Print jobs per day are less than 50. ExpressionA = StatementA
        AND StatementB. */ ( id SERIAL PRIMARY KEY , statement_role text[] , text text[] , statement_operator text[] , feature_value text[] , order_ text[] , relevance text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__transaction /* PRS_Transaction represents a single transaction of the Service Incident workflow. A PRS_Transaction instance is created by the PRS_SISService StartSISTransaction method. */ ( id SERIAL PRIMARY KEY , transaction_type text[] , transaction_state text[] , completion_status text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bios_attribute /* A class derived
FROM ManagedElement that provides instrumentation of BIOS configuration data
        OR Attributes of a managed computer system
        OR device. These attributes are surfaced IN the form of BIOSAttribute instances. The CIM_BIOSAttribute object may be used to represent both configurable
        AND static BIOS attributes. */ ( id SERIAL PRIMARY KEY , instance_id text[] , attribute_name text[] , is_ordered_list text[] , is_read_only text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bios_enumeration /* This class extends the CIM_BIOSAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists
WITH a finite SET of entities. Example enumerations might include "Power-On Self Test: Enable,
         Disable"
        OR "Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never". */ ( id SERIAL PRIMARY KEY , instance_id text[] , attribute_name text[] , is_ordered_list text[] , is_read_only text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bios_integer /* The BIOSInteger object may be used to instantiate
        AND provide detailed information describing BIOS attributeswith integer values. */ ( id SERIAL PRIMARY KEY ,
         lower_bound text[] ,
         upper_bound text[] ,
         programmatic_unit text[] ,
         scalar_increment text[] ,
         instance_id text[] ,
         attribute_name text[] ,
         is_ordered_list text[] ,
         is_read_only text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
        CREATE TABLE public.bios_password /* The CIM_BIOSPassword object may be used to instantiate detail information about manageable BIOS-based passwords. */ ( id SERIAL PRIMARY KEY ,
         min_length text[] ,
         max_length text[] ,
         password_encoding text[] ,
         is_set text[] ,
         instance_id text[] ,
         attribute_name text[] ,
         is_ordered_list text[] ,
         is_read_only text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.bios_string /* The CIM_BIOSString object may be used to instantiate string-based BIOS attributes. */ ( id SERIAL PRIMARY KEY ,
         string_type text[] ,
         min_length text[] ,
         max_length text[] ,
         value_expression text[] ,
         instance_id text[] ,
         attribute_name text[] ,
         is_ordered_list text[] ,
         is_read_only text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.boot_setting_data /* BootSettingData is a SET of settings that apply to system boot. An example of usage of this class is to hold several BIOS,
         NVRAM,
         firmware
        OR system settings,
         typically seen IN the BIOS setup screens. These settings would need to be modified by the system AS part of the boot process. Since,
         it is often NOT possible to intercept the boot process to apply these settings,
         users can SET these a priori IN the instance associated
WITH the selected BootSourceSetting, thereby instructing the system to apply them during the next system reboot. */ ( id SERIAL PRIMARY KEY , owning_entity text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.boot_source_setting /* A class derived
FROM SettingData that provides the information necessary to describe a boot source. This may be optionally associated to a bootable logical device, such AS a hard disk partition,
        OR a network device. The information
FROM this class instance is used by the boot manager, such AS BIOS/EFI
        OR OS Loader to initiate the boot process,
    WHEN this instance appears IN a BootConfigSetting collection. */ ( id SERIAL PRIMARY KEY , boot_string text[] , bios_boot_string text[] , structured_boot_string text[] , fail_through_supported text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.cifs_setting_data /* The CIFSSettingData is a derived class of Settingdata that specifies CIFS specific properties for a Fileserver. */ ( id SERIAL PRIMARY KEY , enabled text[] , charset text[] , use_tcponly text[] , netbios_name text[] , authentication_domain text[] , authentication_mode text[] , use_kerberos text[] , use_opportunistic_locking text[] , smb_signing_only text[] , clients_connect_anonymously text[] , join_domain_anonymously text[] , domain_controller_user text[] , domain_controller_password text[] , cifs_domain_controller text[] , ca_supported text[] , multi_channel_supported text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.diagnostic_result /*
    WHEN a DiagnosticTest Service is running, test results are reported
USING a DiagnosticResult object,
        OR one of its subclasses. A DiagnosticTest may be running because its Service is Started
        OR due to an invocation of the RunTest method. Diagnostic Results are related to their Test via an instance of the DiagnosticResultsForMSE association. For every running of DiagnosticTest, a new instance of DiagnosticResult,
        OR one of it's subclasses should be created. */ ( id SERIAL PRIMARY KEY , diagnostic_creation_class_name text[] , diagnostic_name text[] , diag_system_creation_class_name text[] , diag_system_name text[] , execution_id text[] , time_stamp text[] , is_package text[] , test_start_time text[] , test_completion_time text[] , test_state text[] , other_state_description text[] , estimated_time_of_performing text[] , percent_complete text[] , loops_failed text[] , loops_passed text[] , test_warning_level text[] , report_soft_errors text[] , report_status_messages text[] , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] ); 
        CREATE TABLE public.diagnostic_result_for_mse /* This class is being deprecated as part of the deprecation of the DiagnosticResult class. This is an association class relating diagnostic test results to the ManagedSystemElement that is/was tested. */ ( id SERIAL PRIMARY KEY , diagnostic_result_id6 INTEGER REFERENCES diagnostic_result(id) , managed_system_element_id7 INTEGER REFERENCES managed_system_element(id) ); 
        CREATE TABLE public.diagnostic_result_in_package /* This class is being deprecated. Tests should be grouped at the test level, not by the model. Therefore, this association is no longer appropriate. /n This is an association class that identifies a Diagnostic Result as made up of lower level Results. In this case, the Result identified as the PackageResult reference (i.e., the higher level result) would have its IsPackage property set to TRUE. */ ( id SERIAL PRIMARY KEY , diagnostic_result_id7 INTEGER REFERENCES diagnostic_result(id) , diagnostic_result_id8 INTEGER REFERENCES diagnostic_result(id) ); 
        CREATE TABLE public.diagnostic_setting_data /* Specific diagnostic test parameters and execution instructions are defined by this class. To provide more detailed Settings for a type of test (i.e., additional properties), subclassing is appropriate. */ ( id SERIAL PRIMARY KEY , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] , result_persistence text[] , query_timeout text[] , non_destructive text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.disk_drive_diagnostic_setting_data /* This class define the additional settings to be used for disk drive diagnostic tests. */ ( id SERIAL PRIMARY KEY , lba_start text[] , lba_end text[] , seed text[] , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] , result_persistence text[] , query_timeout text[] , non_destructive text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.exported_file_share_setting /* The ExportedFileShareSetting describes the attribute values that were set when a FileShare was created for a LogicalFile by a FileExportService. These settings may be associated with the created Share via the ElementSettingData association; or, associated with an ExportedFileShareCapabilities element via SettingAssociatedToCapabilities; or, used as an EmbeddedInstanceparameter in a method (for instance, as a Goal). If the setting is associated with a FileShare, it cannot have undefined or NULL properties. If it is associated with an ExportedFileShareCapabilities, a NULL property indicates that the property is not supported or that the value is a vendor-specific context-dependent default that may not be changed. The FileSharingProtocol and ProtocolVersions properties cannot have a default value. If this Setting is associated with a ExportedFileShareCapabilities element via SettingAssociatedToCapabilities, the corresponding FileSharingProtocol and ProtocolVersions properties must match. */ ( id SERIAL PRIMARY KEY , file_sharing_protocol text[] , initial_enabled_state text[] , other_enabled_state text[] , default_read_write text[] , default_execute text[] , execute_support text[] , default_user_id_supported text[] , root_access text[] , write_policy text[] , access_points text[] , ca_supported text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fchba_diagnostic_setting_data /* This class is being used in the FC HBA Diagnostics Profile to pass in optional parameters when running certain tests. */ ( id SERIAL PRIMARY KEY , echo_mechanism text[] , other_echo_mechanism text[] , target_device_format text[] , target_device text[] , lun text[] , ping_mechanism text[] , other_ping_mechanism text[] , other_target_device_format text[] , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] , result_persistence text[] , query_timeout text[] , non_destructive text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fsip_interface_setting_data /* The FSIPInterfaceSettingData is a derived class of IPInterfaceSettingData that specifies the IP interface settings for a Fileserver. It contains the properties needed to establish an IPProtocolEndpoint and a NetworkVLAN. */ ( id SERIAL PRIMARY KEY , ip_address text[] , address_type text[] , subnet_mask text[] , i_pv6_prefix_length text[] , vlan_id text[] , mtu text[] , rss_capable text[] , rdma_capable text[] , link_speed text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fs_quota_config_entry /* Instances of this class represent single lines in a quota system configuration file. The user, group, tree and filesystem that the quota applies to are discovered by following associations. */ ( id SERIAL PRIMARY KEY , instance_id text[] , soft_limit_grace_period text[] , active text[] , monitor text[] , quota_type text[] , tree_name text[] , principal_id text[] , file_system text[] , default_ text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fs_quota_indication /* An FSQuotaIndication signals all quota threshold crossing events surfaced by the underlying instrumentation. */ ( id SERIAL PRIMARY KEY , identity_id text[] , entry_id text[] , path text[] , which_limit text[] , resource_type text[] , quota_type text[] , limit_ text[] , amount_used text[] , file_system text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.file_server_settings /* The FileServerSettings is a derived class of Settingdata that specifies general properties for a Fileserver. It also serves as the main Settings object for a Fileserver that is associated with the other Fileserver properties via theConcreteComponent association. */ ( id SERIAL PRIMARY KEY , nfscifs_account_mapping text[] , account_mapping_domain text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.file_system_setting /* The FileSystemSetting describes the attribute values set when creating a FileSystem by a FileSystemConfigurationService. These settings can be associated via the ElementSettingData association with the created FileSystem. If the setting is associated via SettingAssociatedToCapabilities to a FileSystemCapabilities, it is one of the canned settings supported by this capabilities instance. A setting can also be an embedded instance parameter to a method (for instance, when used as a Goal parameter). A NULL value for a property in a canned setting indicates support for a vendor-specific default. A NULL value for a property when the setting is used as a Goal parameter to a method indicates that the client does not care what value that property will have on creation and will accept any vendor-supplied default. When used with a FileSystem, a NULL value for a property must be interpreted as "Unknown". The ActualFileSystemType property cannot have a default value in any context. If this Setting is associated with a FileSystemCapabilities element via SettingAssociatedToCapabilities, the value of ActualFileSystemType in the Setting and the Capabilities MUST match. This class also supports persistence and recoverability of a FileSystem and its contained elements as defined in CIM 2.8 for the use of DatabaseStorageArea. */ ( id SERIAL PRIMARY KEY , actual_file_system_type text[] , data_extents_sharing text[] , copy_target text[] , filename_case_attributes text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.file_system_statistical_data /* A subclass of StatisticalData which identifies individual statistics for an element of a system that provides filesystem support. This class defines the metrics that MAY be kept for managed elements of the system. */ ( id SERIAL PRIMARY KEY , element_type text[] , other_element_type_description text[] , total_ios text[] , total_bytes_transferred text[] , read_ios text[] , write_ios text[] , other_ios text[] , metadata_read_ios text[] , metadata_write_ios text[] , total_iotime_counter text[] , total_idle_time_counter text[] , read_iotime_counter text[] , bytes_read text[] , write_iotime_counter text[] , bytes_written text[] , metadata_bytes_read text[] , metadata_bytes_written text[] , percent_durable_opens text[] , percent_resilient_opens text[] , percent_persistent_opens text[] , average_read_response_time text[] , average_write_response_time text[] , average_request_response_time text[] , bytes_read_per_sec text[] , total_bytes_received text[] , bytes_received_per_sec text[] , total_bytes_sent text[] , bytes_sent_per_sec text[] , bytes_tranferred_per_sec text[] , bytes_written_per_sec text[] , files_opened_per_sec text[] , total_open_file_count text[] , current_pending_requests text[] , read_requests_processed_per_sec text[] , total_requests_received text[] , requests_received_per_sec text[] , total_durable_handle_reopen_count text[] , total_failed_durable_handle_reopen_count text[] , total_failed_resilient_handle_reopen_count text[] , current_open_file_count text[] , total_resilient_handle_reopen_count text[] , total_persistent_handle_reopen_count text[] , total_failed_persistent_handle_reopen_count text[] , tree_connect_count text[] , write_requests_processed_per_sec text[] , total_metadata_requests_received text[] , metadata_requests_received_per_sec text[] , average_time_per_data_request text[] , average_bytes_per_data_request text[] , average_bytes_per_read_request text[] , average_bytes_per_write_request text[] , average_read_queue_length text[] , average_write_queue_length text[] , average_data_queue_length text[] , data_bytes_per_sec text[] , data_requests_per_sec text[] , current_data_queue_length text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.file_system_statistics_manifest /* Instances of this class define a list of supported or desired properties of FileSystemStatisticalData instances. In the case where a FileSystemStatisticsManifest instance is a member of a FileSystemStatisticsManifestCollection used in a FileSystemStatisticsService.GetStatisticsCollection request, for each of the boolean "include" properties set to true in that FileSystemStatisticsManifest, the corresponding FileSystemStatisticalData property will be included, if available, in the statistics returned for FileSystemStatisticalData instances whose ElementType matches the ElementType of the FileSystemStatisticsManifest. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_type text[] , other_element_type_description text[] , include_start_statistic_time text[] , include_statistic_time text[] , include_total_ios text[] , include_total_bytes_transferred text[] , include_read_ios text[] , include_write_ios text[] , include_other_ios text[] , include_metadata_read_ios text[] , include_metadata_write_ios text[] , include_total_iotime_counter text[] , include_total_idle_time_counter text[] , include_read_iotime_counter text[] , include_bytes_read text[] , include_write_iotime_counter text[] , include_bytes_written text[] , include_metadata_bytes_read text[] , include_metadata_bytes_written text[] , include_percent_durable_opens text[] , include_percent_resilient_opens text[] , include_percent_persistent_opens text[] , include_average_read_response_time text[] , include_average_write_response_time text[] , include_average_request_response_time text[] , include_bytes_read_per_sec text[] , include_total_bytes_received text[] , include_bytes_received_per_sec text[] , include_total_bytes_sent text[] , include_bytes_sent_per_sec text[] , include_bytes_tranferred_per_sec text[] , include_bytes_written_per_sec text[] , include_files_opened_per_sec text[] , include_total_open_file_count text[] , include_current_pending_requests text[] , include_read_requests_processed_per_sec text[] , include_total_requests_received text[] , include_requests_received_per_sec text[] , include_total_durable_handle_reopen_count text[] , include_total_failed_durable_handle_reopen_count text[] , include_total_failed_resilient_handle_reopen_count text[] , include_current_open_file_count text[] , include_total_resilient_handle_reopen_count text[] , include_total_persistent_handle_reopen_count text[] , include_total_failed_persistent_handle_reopen_count text[] , include_tree_connect_count text[] , include_write_requests_processed_per_sec text[] , include_total_metadata_requests_received text[] , include_metadata_requests_received_per_sec text[] , include_average_time_per_data_request text[] , include_average_bytes_per_data_request text[] , include_average_bytes_per_read_request text[] , include_average_bytes_per_write_request text[] , include_average_read_queue_length text[] , include_average_write_queue_length text[] , include_average_data_queue_length text[] , include_data_bytes_per_sec text[] , include_data_requests_per_sec text[] , include_current_data_queue_length text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.job_setting_data /* JobSettingData represents job characteristics and scheduling information for a CIM_Job. The settings may be applied to a job handling Service, a JobQueue or other destination to which jobs are submitted, and/or to individual CIM_Jobs. The applicability of the settings are defined using the ElementSettingData relationship. Since the Settings may be defined in several contexts and applied to many types of elements, this class is defined as a subclass of SettingData, versus ScopedSettingData. */ ( id SERIAL PRIMARY KEY , delete_on_completion text[] , recovery_action text[] , other_recovery_action text[] , applicable_method text[] , client_retries text[] , interactive_timeout text[] , run_in_silent_mode text[] , terminate_on_timeout text[] , time_before_removal text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.method_result /* Jobs are sometimes used to represent extrinsic method invocations that execute for times longer than the length of time is reasonable to require a client to wait. The method executing continues beyond the method return to the client. The class provides the result of the execution of a Job that was itself started by the side-effect of this extrinsic method invocation. The indication instances embedded an instance of this class shall be the same indications delivered to listening clients or recorded, all or in part, to logs. Basically, this approach is a corollary to the functionality provided by an instance of ListenerDestinationLog (as defined in the Interop Model). The latter provides a comprehensive, persistent mechanism for recording Job results, but is also more resource-intensive and requires supporting logging functionality. Both the extra resources and logging may not be available in all environments (for example, embedded environments). Therefore, this instance-based approach is also provided. The MethodResult instances shall not exist after the associated ConcreteJob is deleted. */ ( id SERIAL PRIMARY KEY , instance_id text[] , pre_call_indication text[] , post_call_indication text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.nfs_setting_data /* The NFSSettingData is a derived class of Settingdata that specifies NFS specific properties for a Fileserver. */ ( id SERIAL PRIMARY KEY , enabled text[] , charset text[] , maximum_tcpconnections text[] , port text[] , non_nfsuid text[] , non_nfsgid text[] , use_reserved_ports text[] , only_root_chown text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.nis_setting_data /* The NISSettingData is a derived class of Settingdata that specifies the Network Information Service settings.The settings specify the NIS server that is to be used for host and user name lookup. */ ( id SERIAL PRIMARY KEY , domain_name text[] , server_ip text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.record_for_log /* The RecordForLog class is used to instantiate records to be aggregated to a Log. */ ( id SERIAL PRIMARY KEY , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.report_record /* Abstract parent class for all types of line-oriented reports. Subclasses of this class are generally used by services such as the FSQuotaManagementService, which return an array of report records when asked to issue a report. The Indication qualifier means that instances of this class and its subclasses do not have keys. */ ( id SERIAL PRIMARY KEY ); 
        CREATE TABLE public.summary_diagnostics /* A summary of test results for the last execution of the test identified by the ServiceName. Note that an element would typically have multiple instances of CIM_SummaryDiagnostics, one for each test that was run on the element. */ ( id SERIAL PRIMARY KEY , instance_id text[] , service_name text[] , test_time_stamp text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.unix_process_statistical_information /* The statistics associated with a Unix process. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , os_creation_class_name text[] , os_name text[] , handle text[] , process_creation_class_name text[] , name text[] , cpu_time text[] , real_text text[] , real_data text[] , real_stack text[] , virtual_text text[] , virtual_data text[] , virtual_stack text[] , virtual_memory_mapped_file_size text[] , virtual_shared_memory text[] , cpu_time_dead_children text[] , system_time_dead_children text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.virtual_system_migration_setting_data /* CIM_MigrationSettingData defines the parameters to control a virtual system migration implementation, as managed by a CIM_VirtualSystemMigrationService. It is expected that a migration implementation will subclass this class to add implementation-specific migration options. */ ( id SERIAL PRIMARY KEY , migration_type text[] , priority text[] , bandwidth text[] , bandwidth_unit text[] , other_transport_type text[] , transport_type text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.virtual_system_setting_data /* CIM_VirtualSystemSettingData defines the virtual aspects of a virtual system through a set of virtualization specific properties. CIM_VirtualSystemSettingData is also used as the top level class of virtual system configurations. Virtual system configurations model configuration information about virtual systems and their components. A virtual system configuration consists of one top-level instance of class CIM_VirtualSystemSettingData that aggregates a number of instances of class CIM_ResourceAllocationSettingData, using association CIM_ConcreteComponent. Virtual system configurations may for example be used to reflect configurations of - virtual systems that are defined at a virtualization platform, - virtual systems that are currently active, - input requests to create new virtual systems, - input requests to modify existing virtual systems, or - snapshots of virtual systems. */ ( id SERIAL PRIMARY KEY , virtual_system_identifier text[] , virtual_system_type text[] , creation_time text[] , configuration_id text[] , configuration_data_root text[] , configuration_file text[] , snapshot_data_root text[] , suspend_data_root text[] , swap_file_data_root text[] , log_data_root text[] , automatic_startup_action text[] , automatic_startup_action_delay text[] , automatic_startup_action_sequence_number text[] , automatic_shutdown_action text[] , automatic_recovery_action text[] , recovery_file text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.account_setting_data /* CIM_AccountSettingData provides the ability to manage the desired configuration for an instance of CIM_Account. When associated with an instance of CIM_AccountManagementService, this class may be used to constrain the properties of instances of CIM_Accountcreated using the service. When associated with an instance of CIM_Account, this class may be used to manage the configuration of the CIM_Acount instance. */ ( id SERIAL PRIMARY KEY , inactivity_timeout text[] , maximum_password_expiration text[] , maximum_successive_login_failures text[] , password_history_depth text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.associated_privilege /* CIM_AssociatedPrivilege is an association that models the privileges that a Subject element has to access or authorize other elements to access a Target element. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , use_key text[] , privilege_granted text[] , represents_authorization_rights text[] ); 
        CREATE TABLE public.credential /* Subclasses of CIM_Credential define materials, information or other data which are used to establish identity. Generally, there may be some shared information, or credential material which is used to identify and authenticate an entity in the process of gaining access to, or permission to use, resources. Such credential material may be used to authenticate an entity's identity initially, AS done by a CIM_AuthenticationService,
        AND additionally
    ON an ongoing basis (for example, during the course of a connection
        OR other security association), AS proof that each received message
        OR communication came
FROM a valid 'user' of that credential material. */ ( id SERIAL PRIMARY KEY , issued text[] , expires text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.credential_context /* This relationship defines a context (e.g., a System
        OR Service) of a Credential. One example is a shared secret/ password which is defined within the context of an application (or Service). Generally, there is one scoping element for a Credential, however the multiplicities of the association allow a Credential to be scoped by more than one element. If this association is NOT instantiated for a Credential, that Credential is assumed to be scoped to the Namespace. This association may also be used to indicate that a Credential is valid IN some other environment. For instance associating the Credential to a RemoteServiceAccessPoint would indicate that the Credential is used to access the remote service. */ ( id SERIAL PRIMARY KEY , credential_id5 INTEGER REFERENCES credential(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , usage text[] ); 
        CREATE TABLE public.identity /* An instance of an Identity represents a ManagedElement that acts AS a security principal within the scope IN which it is defined
        AND authenticated. (Note that the Identity's scope is specified using the association, CIM_IdentityContext.) ManagedElements with Identities can be OrganizationalEntities, Services, Systems, etc. The ManagedElement 'behind' an Identity is described using the AssignedIdentity association. Within a given security context, an Identity may be imparted a level of trust, usually based on its credentials. A trust level is defined using the CIM_SecuritySensitivity class, and associated with Identity using CIM_ElementSecuritySensitivity. Whether an Identity is currently authenticated is evaluated by checking the CurrentlyAuthenticated boolean property. This property is set and cleared by the security infrastructure, and should only be readable within the management infrastructure. The conditions which must be met/authenticated in order for an Identity's CurrentlyAuthenticated Boolean to be TRUE are defined
USING a subclass of PolicyCondition - AuthenticationCondition. The inheritance tree for AuthenticationCondition is defined IN the CIM Policy Model. Subclasses of Identity may include specific information related to a given AuthenticationService
        OR authority (such AS a security token
        OR computer hardware port/communication details) that more specifically determine the authenticity of the Identity. An instance of Identity may be persisted even though it is NOT CurrentlyAuthenticated, IN order to maintain static relationships to Roles, associations to accounting information,
        AND policy data defining authentication requirements. Note however,
    WHEN an Identity is NOT authenticated (CurrentlyAuthenticated = FALSE), THEN
    Privileges
        OR rights SHOULD NOT be authorized. The lifetime, validity,
        AND propagation of the Identity is dependent
    ON a security infrastructure's policies. */ ( id SERIAL PRIMARY KEY , instance_id text[] , currently_authenticated text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.identity_context /* This relationship defines a context (e.g., a System or Service) of an Identity. Note that the cardinalities of this association are many to many, indicating that the Identity MAY be scoped by several elements. However, it is likely that there will only be a single scope, if one exists at all. */ ( id SERIAL PRIMARY KEY , identity_id5 INTEGER REFERENCES identity(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
    CREATE TABLE public.kerberos_credential /* A CIM_KerberosCredential represents a credential issued by a particular Kerberos Key Distribution Center (KDC) to establish an identity, as the result of a successful authentication process. There are two types of tickets that a KDC may issue - a TicketGranting ticket, which is used to protect and authenticate communications between an entity and the KDC, and a Session ticket, which the KDC issues to two entities to allow them to communicate with each other. */ ( id SERIAL PRIMARY KEY , instance_id text[] , accesses_service text[] , remote_id text[] , ticket_type text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.kerberos_ticket /* A CIM_KerberosTicket represents a credential issued by a particular Kerberos Key Distribution Center (KDC) to establish an identity, as the result of a successful authentication process. There are two types of tickets that a KDC may issue - a TicketGranting ticket, which is used to protect and authenticate communications between an entity and the KDC, and a Session ticket, which the KDC issues to two entities to allow them to communicate with each other. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , accesses_service text[] , remote_id text[] , ticket_type text[] , instance_id text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.named_credential /* CIM_NamedCredential indirectly represents a shared secret credential. The local identity, IKEIdentity, and the remote peer identity share the secret that is named by the SharedSecretName. The SharedSecretName is used by the SharedSecretService to reference the secret. */ ( id SERIAL PRIMARY KEY , instance_id text[] , local_identity text[] , local_identity_type text[] , peer_identity text[] , peer_identity_type text[] , shared_secret_name text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.named_shared_ikesecret /* CIM_NamedSharedIKESecret indirectly represents a shared secret credential. The local identity, IKEIdentity, and the remote peer identity share the secret that is named by the SharedSecretName. The SharedSecretName is used by the SharedSecretService to reference the secret. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , local_identity text[] , local_identity_type text[] , peer_identity text[] , peer_identity_type text[] , shared_secret_name text[] , issued text[] , expires text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.opaque_management_data_owner /* CIM_OpaqueManagementDataOwner describes ownership of opaque data by CIM_Identity instances. The definition of CIM_OpaqueManagementDataOwner as a subclass of CIM_AssociatedPrivilege represents the fact that the owner of opaque management data often has privileges to access it, but additionally is responsible for its existence and may have a storage quota against which it is applied. The definition of a distinct subclass facilitates discovery of the owning CIM_Identity instance. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , use_key text[] , privilege_granted text[] , represents_authorization_rights text[] ); 
    CREATE TABLE public.organizational_entity /* OrganizationalEntity is an abstract class from which classes that fit into an organizational structure are derived. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.other_group_information /* The OtherGroupInformation class provides additional information about an associated Group instance. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.other_org_unit_information /* The OtherOrgUnitInformation class is used to provide additional information about an associated OrgUnit instance. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , preferred_delivery_method text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.other_organization_information /* The OtherOrganizationInformation class is used to provide additional information about an associated Organization instance. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , preferred_delivery_method text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.other_person_information /* The OtherPersonInformation class is used to provide additional information about an associated Person instance. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , employee_number text[] , preferred_delivery_method text[] , preferred_language text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.other_role_information /* The OtherRoleInformation class is used to provide additional information about an associated Role instance. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , preferred_delivery_method text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.privilege /* Privilege is the base class for all types of activities which are granted or denied by a Role or an Identity. Whether an individual Privilege is granted or denied is defined using the PrivilegeGranted boolean. Any Privileges not specifically granted are assumed to be denied. An explicit deny (Privilege Granted = FALSE) takes precedence over any granted Privileges. The association of subjects (Roles and Identities) to Privileges is accomplished using policy or explicitly via the associations on a subclass. The entities that are protected (targets) can be similarly defined. Note that Privileges may be inherited through hierarchical Roles, or may overlap. For example, a Privilege denying any instance Writes in a particular CIM Server Namespace would overlap with a Privilege defining specific access rights at an instance level within that Namespace. In this example, the AuthorizedSubjects are either Identities or Roles, and the AuthorizedTargets are a Namespace in the former case, and a particular instance in the latter. */ ( id SERIAL PRIMARY KEY , instance_id text[] , privilege_granted text[] , represents_authorization_rights text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.security_sensitivity /* An instance of this class defines a security label used to characterize the security clearance necessary to access information in a system that supports mandatory access controls. The labels have two components, one a hierarchical security level and the other a set of non-hierarchical security categories. Mandatory access control determines whether to allow certain actions, based on the following rules: - If the security level of a security principal is equal to or greater than the security level of an element, and the security categories the security principal include all of the security categories of the element, then the security principal may read from the element. - If the security label of a security principal is equal to or less than the security label of an element, and the security categories the element include all of the security categories of the security principal, then the security principal may write to the element. An element is assigned a security level via the association, ElementSecurityLevel. It can be assigned to any ManagedElement, such as Locations, Identities, Roles, Systems, Services and LogicalFiles. The clearance of a security principal, represented by an instance of Identity may be specified by associating an instance of this class via IdentitySecurityClearance. The set of security levels and categories are determined by a business, organization and/or government based on the need to protect data and entities from attack, loss, abuse or unauthorized disclosure, and the ramifications if this protection is not maintained. */ ( id SERIAL PRIMARY KEY , instance_id text[] , security_level text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.shared_credential /* SharedCredential is a secret (such as a password or the response to a challenge question) that is shared between a principal and a particular SharedCredential security service. Secrets may be in the form of a password used for initial authentication, or as with a session key, used as part of a message to verify the originator of the message. It is important to note that SharedCredential is not just a password, but rather is the password used with a particular security service. */ ( id SERIAL PRIMARY KEY , instance_id text[] , remote_id text[] , secret text[] , algorithm text[] , protocol text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.shared_secret /* CIM_SharedSecret is a secret (such as a password or the response to a challenge question) that is shared between a principal and a particular SharedSecret security service. Secrets may be in the form of a password used for initial authentication, or as with a session key, used as part of a message to verify the originator of the message. It is important to note that SharedSecret is not just a password, but rather is the password used with a particular security service. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , remote_id text[] , secret text[] , algorithm text[] , protocol text[] , issued text[] , expires text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.signed_credential /* A SignedCredential is a credential that is cryptographically signed by a trusted Certificate Authority (CA) or the owner of the credential itself. */ ( id SERIAL PRIMARY KEY , instance_id text[] , issuer_name text[] , signature_algorithm text[] , other_signature_algorithm text[] , signature_algorithm_oid text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.storage_client_setting_data /* This class models host environment factors that influence the behavior of Storage Systems. For example, a disk array has different SCSI responses for clients (initiators) configured as AIX verses HPUX. Instances of this setting class can be associated via ElementSettingData to a storage system's LogicalPort, ProtocolController,
        OR Volume instances
    WHEN these elements have host awareness. These associations are created by the management instrumentation provider to reflect the current configuration. A client deletes/creates these associations to request changes IN element host-awareness. This settings class can also be associated
WITH StorageHardwareID instances
    WHEN that HW ID is configured
WITH host information. An instance of this setting may include several ClientType values if the storage system treats them identically. The storage system exposes ALL supported setting instances to a WBEM Enumerate request; the client uses the returned settings to determine which types are available. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_hardware_id /* CIM_StorageHardwareID is a hardware ID that serves AS an authorization subject. Example are host controller IDs that serve AS authorization subjects IN disk array LUN Masking. */ ( id SERIAL PRIMARY KEY , storage_id text[] , id_type text[] , other_idtype text[] , instance_id text[] , currently_authenticated text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.unsigned_credential /* A UnsignedCredential represents an unsigned public key credential. Services accept the public key AS authentic because of a direct trust relationship, rather than via a third-party Certificate Authority. */ ( id SERIAL PRIMARY KEY , instance_id text[] , peer_identity text[] , peer_identity_type text[] , public_key_encoding text[] , other_public_key_encoding text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.unsigned_public_key /* A CIM_UnsignedPublicKey represents an unsigned public key credential. Services accept the public key AS authentic because of a direct trust relationship, rather than via a third-party Certificate Authority. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , peer_identity text[] , peer_identity_type text[] , issued text[] , expires text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.user_entity /* UserEntity is an abstract class that represents users - their names, contact data
        AND similar information. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.users_access /* The UsersAccess object class is used to specify a 'user' that is permitted access to resources. The ManagedElement that has access to the resources (represented IN the model
USING the ElementAsUser association) may be a person, a service, a service access point
        OR any collection thereof. This class is deprecated IN lieu of the simpler CIM_Identity abstraction. The UsersAccess class combines credential requirements (in the form of biometric requirements)
WITH the concepts of organizational information (via its position IN the inheritance hierarchy),
        AND identity management. These concepts need to be separated to be better understood
        AND managed - hence, the deprecation. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , element_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.x509_infrastructure /* CIM_X509Infrastructure describes Internet X509 Public Key Infrastructure (PKI) standard based properties used by certificates
        AND certificate revocation lists. For more information
    ON the Internet X509 PKI refer to the RFC 3280. */ ( id SERIAL PRIMARY KEY ,
         version text[] ,
         issuer_name text[] ,
         instance_id text[] ,
         signature_algorithm text[] ,
         other_signature_algorithm text[] ,
         signature_algorithm_oid text[] ,
         issued text[] ,
         expires text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
    CREATE TABLE public.j2ee_notification /* The J2eeNotification class specifies the properties that must be included IN every event that is generated by a J2EE managed object that supports the event model. ALL management systems that support event notification must support ALL of the properties IN this class. */ ( id SERIAL PRIMARY KEY ,
         indication_identifier text[] ,
         sequence_number text[] ,
         indication_type text[] ,
         other_indication_type text[] ,
         message text[] ,
         user_data text[] ,
         indication_time text[] ,
         perceived_severity text[] ,
         other_severity text[] ,
         indication_filter_name text[] ,
         sequence_context text[] ); 
         CREATE TABLE public.j2ee_statistic /* The J2eeStatistic class is a base class that defines the properties that are common to ALL J2EE statistics. The JSR77 specification defines a SET of statistical types,
         THEN
    it defines each J2EE statistic IN terms of these types. Since CIM does NOT support multiple inheritance
        OR embedded objects, the count, time, range, bounded range,
        AND boundary statistics defined have been broken out into individual properties for each statistic that is defined IN the JSR77 specification. Many of the properties defined for J2EE statistics are inherited
FROM the CIM_StatisticalData class. Some of the inherited properties are CIM dates, which are NOT consistent
WITH the definitions IN the JSR77 specification. IN order to minimize implementation differences, methods are defined to provide the dates AS specified. Some of the subclasses of CIM_J2EEStatistic do NOT add any new properties. However, these subclasses were chosen
    OVER adding a type property to the superclass because the vendor extensions were likely to result IN classes
WITH characteristics DISTINCT enough to warrant the existence of subclasses. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.j2ee_urlstats /* The CIM_J2eeURLStats class defines the performance statistics that are provided by a URL resource. There are no standard required URL statistics defined by the JSR77 specification. This class may be extended to provide vendor specific URL performance statistics. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.statistical_runtime_overview /* This class represents statistical data
        AND metrics that characterize the application AS a whole. It EXISTS only once per application system instance
        AND provides primarily raw data for the monitoring of service levels. Therefore, the metrics presented are only a summary
        OR overview of the application system behavior at a certain point of time. Instances are only available if the concerned application is running. Therefore, an instance of ApplicationSystem MUST exist
    WHEN the instance of this class is created. */ ( id SERIAL PRIMARY KEY , last_activity text[] , number_of_active_requests text[] , number_of_active_requestors text[] , average_response_time text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.abstract_component /* CIM_AbstractComponent is a generic association used to establish 'part of' relationships
    BETWEEN Managed Elements. This association subclasses to CIM_Component
        AND view associations that derive
FROM CIM_Component. */ ( id SERIAL PRIMARY KEY , managed_element_id7 INTEGER REFERENCES managed_element(id) , managed_element_id8 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.abstract_element_statistical_data /* CIM_AbstractElementStatisticalData is an association that relates a ManagedElement (or a view of a ManagedElement) to its StatisticalData. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , statistical_data_id7 INTEGER REFERENCES statistical_data(id) ); 
CREATE TABLE public.capabilities /* Capabilities is an abstract class whose subclasses describe abilities and/or potential for use. For example, one may describe the maximum number of VLANs that can be supported
    ON a system
USING a subclass of Capabilities. Capabilities are tied to the elements which they describe
USING the ElementCapabilities association. Note that the cardinality of the ManagedElement reference is Min(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist
        AND provide the context for the Capabilities. Note that Capabilities do NOT indicate what IS configured
        OR operational, but what CAN
        OR CANNOT exist, be defined
        OR be used. Note that it is possible to describe both supported
        AND excluded abilities
        AND functions (both capabilities
        AND limitations)
USING this class. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.collection /* Collection is an abstract class that provides a common superclass for data elements that represent collections of ManagedElements
        AND its subclasses. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.collection_of_mses /* The CollectionOfMSEs object allows the grouping of Managed SystemElements for various identification purposes
        AND to reduce the complexity of associating Settings
        AND Configurations. It is abstract to require further definition
        AND semantic refinement IN subclasses. The CollectionOfMSEs object does NOT carry any state
        OR status information, but represents only a grouping
        OR 'bag' of Elements. For this reason, it is incorrect to subclass groups that have state
        OR status
FROM CollectionOfMSEs. An example is CIM_Redundancy Group (which is subclassed
FROM LogicalElement). Collections typically aggregate similar ('like') objects,but they are NOT required to do so. Collections simply identify 'bags'
        AND might represent an optimization. This purpose is especially true
WITH respect to their association to Settings
        AND Configurations. Without Collections, you would need to define individual ElementSetting
        AND ElementConfiguration associations, to tie Settings
        AND Configuration objects to individual ManagedSystemElements. There might be duplication
    WHEN assigning the same Setting to multiple objects. IN addition,
USING the Collection object allows the determination that the Setting
        AND Configuration associations are indeed the same for the Collection's members. This information would otherwise be obtained by defining the Collection in a proprietary manner, and then querying the ElementSetting and ElementConfiguration associations to determine if the Collection set is completely covered. */ ( id SERIAL PRIMARY KEY , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.compatible_product /* CIM_CompatibleProduct is an association between Products that can indicate a wide variety of information. For example, it can indicate that the two referenced Products interoperate, that they can be installed together, that one can be the physical container for the other, etc. The string property, CompatibilityDescription, defines how the Products interoperate or are compatible, any limitations regarding interoperability or installation, ... */ ( id SERIAL PRIMARY KEY , product_id5 INTEGER REFERENCES product(id) , product_id6 INTEGER REFERENCES product(id) , compatibility_description text[] ); 
        CREATE TABLE public.component /* CIM_Component is a generic association used to establish 'part of' relationships between Managed Elements. For example, it could be used to define the components or parts of a System. */ ( id SERIAL PRIMARY KEY , managed_element_id7 INTEGER REFERENCES managed_element(id) , managed_element_id8 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.concrete_collection /* A concrete version of Collection. This class represents a generic and instantiable collection, such as a group of ComputerSystems (for example, a pool of hosts available for executing jobs). It is defined as a concrete subclass of the abstract CIM_Collection class, to be used in place of many specific subclasses that add no semantics. Note that when defining additional semantics for Collection, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Collection. ConcreteCollection is limited in its use as a concrete form of a general collection or bag. It was deemed more prudent to create this concrete subclass than to change Collection from an abstract to a concrete class. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.concrete_component /* CIM_ConcreteComponent is a generic association used to establish 'part of' relationships between ManagedElements. It is defined as a concrete subclass of the abstract CIM_Component class, to be used in place of many specific subclasses of Component that add no semantics, that is subclasses that do not clarify the type of composition, update cardinalities, or add or remove qualifiers. Note that when you define additional semantics for Component, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Component. ConcreteComponent is limited in its use as a concrete form of a general composition. It was deemed more prudent to create this concrete subclass than to change Component from an abstract to a concrete class. Industry usage and impact could not be anticipated. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.concrete_component_view /* The CIM_ConcreteComponentView instance is a view that is derived from the CIM_ConcreteComponent between a base CIM_ManagedElement (e.g., CIM_StorageExtent of a Disk Drive) and the CIM_ManagedElement it is a component of (e.g., its primordial CIM_StoragePool). */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , view_id7 INTEGER REFERENCES view(id) ); 
        CREATE TABLE public.configuration /* Note: The use of CIM_Configuration is deprecated in favor of aggregating instances of Setting or SettingData into "higher-level" Settings or SettingData objects using the ConcreteComponent association. This association simplifies the use of Settings or SettingData. With Configurations serving as aggregations of Settings (as defined by the Configuration Component relationship), separate associations were needed for the aggregation and to tie an element to either its Configurations or Settings or SettingData. These separate associations introduced unnecessary complexity and redundancy into the model. Deprecated description: The Configuration object allows the grouping of sets of parameters (defined in Setting objects) and dependencies for one or more ManagedSystemElements. It represents a certain behavior or a desired functional state for the ManagedSystemElements. The desired functional state of the Configuration is typically driven by external requirements such as time or location. For example, to connect to a Mail System from home, a dependency on a modem exists, but a dependency on a network adapter exists at work. Settings for the pertinent LogicalDevices (in this example, POTSModem and NetworkAdapter) can be defined and aggregated by the Configuration. Therefore, two "Connect to Mail" Configurations can be defined by grouping the relevant dependencies and Setting objects. */ ( id SERIAL PRIMARY KEY , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.configuration_component /* Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of instances of Setting or SettingData. Deprecated description: ConfigurationComponent aggregates "lower-level" Configuration objects into a "high-level" Configuration. This association enables the assembly of complex configurations by grouping together simpler ones. For example, a logon policy for the United States could consist of two Configuration groups, one for the East Coast and one for the West Coast. Each of these groups could in turn consist of multiple Configurations to handle different aspects of the logon process. */ ( id SERIAL PRIMARY KEY , configuration_id7 INTEGER REFERENCES configuration(id) , configuration_id8 INTEGER REFERENCES configuration(id) ); 
        CREATE TABLE public.configuration_data /* Captures the configuration information of the element as an octet string (that is, a "blob"). The configuration data is element-specific and generalizes (for any element) the semantically similar Save/RestoreProperties methods that are currently defined as part of the LogicalDevice class. Various types of configurations can be instantiated for an element, such as a currently running config, a startup config, or other possible configurations. The configuration type is specified in the association of the instance to a ManagedElement using the properties of the ElementSettingData association: - When the configuration is currently running, then the IsCurrent Boolean of the association is true. - When the configuration is the initial or startup config, then the IsDefault Boolean is true. - If the IsCurrent and IsDefault Booleans are false, then the configuration is assumed to be a "possible" config (configuration workspace) for the element. Note: This class has an "apply" method only with no corresponding "extract". It has no extract because an application or client can query for and enumerate any existing configurations using existing CIM Operations. It is the responsibility of the client to reuse or reapply the configurations that are returned by such a request because the configuration data itself is opaque and element-specific. Only one "running" configuration can exist at any time. In addition, this configuration can be the only configuration reported by an element. However, elements can also have one "startup" configuration and can have multiple possible/workspace configurations. The configurations can be identical. For example, if a possible configuration is applied to an element (and therefore made the running/current configuration), then the two configs would be identical upon a subsequent query or enumerate instances request. */ ( id SERIAL PRIMARY KEY , configuration_timestamp text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.dependency /* CIM_Dependency is a generic association used to establish dependency relationships between ManagedElements. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.dependency_context /* Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of Setting or SettingData instances. Therefore, this association is also deprecated but it is deprecated to "No value" because there are no equivalent relationships currently defined for the Setting or SettingData classes. This association is an anomaly because it defines what cannot be expressed for the components of the Configuration. Also, it singles out the Dependency association as opposed to allowing any relationships to be defined as "settings". Its use in the industry is discouraged. Deprecated description: This relationship associates a Dependency with one or more Configuration objects. For example, dependencies for a ComputerSystem could change based on the site or network to which the System is attached. */ ( id SERIAL PRIMARY KEY , configuration_id7 INTEGER REFERENCES configuration(id) , dependency_id8 INTEGER REFERENCES dependency(id) ); 
        CREATE TABLE public.device_statistical_information /* Statistical information associated with a LogicalDevice or one of its subclasses. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.element_capabilities /* ElementCapabilities represents the association between ManagedElements and their Capabilities. Note that the cardinality of the ManagedElement reference is Min(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for the Capabilities. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , capabilities_id6 INTEGER REFERENCES capabilities(id) ); 
        CREATE TABLE public.element_configuration /* Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of Setting or SettingData instances. This association allows the reuse of the element to Setting or SettingData associations instead of defining a peer association specifically for Configurations. Deprecated description: This association relates a Configuration object to one or more ManagedSystemElements. The Configuration object represents a certain behavior or a desired functional state for the associated ManagedSystemElements. */ ( id SERIAL PRIMARY KEY , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) , configuration_id7 INTEGER REFERENCES configuration(id) ); 
        CREATE TABLE public.element_setting_data /* ElementSettingData represents the association between ManagedElements and applicable setting data. This association also describes whether this is a default or current setting. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , setting_data_id6 INTEGER REFERENCES setting_data(id) , is_default text[] , is_current text[] , is_next text[] ); 
        CREATE TABLE public.element_statistical_data /* CIM_ElementStatisticalData is an association that relates a ManagedElement to its StatisticalData. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the instantiation of the ElementStatisticalData association for the referenced instance of CIM_StatisticalData. ElementStatisticalData describes the existence requirements and context for the CIM_StatisticalData, relative to a specific ManagedElement. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , statistical_data_id6 INTEGER REFERENCES statistical_data(id) ); 
        CREATE TABLE public.element_view /* CIM_ElementView is used to associate an instance of CIM_View with an instance representing one or more instances of managed resources that contribute to the view. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , view_id6 INTEGER REFERENCES view(id) ); 
        CREATE TABLE public.enabled_logical_element_capabilities /* EnabledLogicalElementCapabilities describes the capabilities supported for changing the state of the assciated EnabledLogicalElement. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fru /* The CIM_FRU class is a vendor-defined collection of Products and/or PhysicalElements that is associated with a Product for the purpose of supporting, maintaining or upgrading that Product at the customer's location. FRU is an acronym for 'field replaceable unit'. The use of FRU has been deprecated IN lieu of describing what is a valid replacement part for a piece of hardware (via the ElementFRU association
FROM PhysicalElement to ReplacementFRU)
        AND what has actually been replaced (the ElementHasBeenFRUed association
    BETWEEN PhysicalElements). */ ( id SERIAL PRIMARY KEY ,
         fru_number text[] ,
         identifying_number text[] ,
         vendor text[] ,
         description text[] ,
         name text[] ,
         revision_level text[] ,
         customer_replaceable text[] ,
         instance_id text[] ,
         caption text[] ,
         element_name text[] ,
         generation text[] ); 
    CREATE TABLE public.fru_includes_product /* Indicates that a FRU may be composed of other Product(s). Indicates that a FRU may be composed of other Product(s). The use of this association has been deprecated since the FRU class itself has been deprecated. The composition of ReplacementFRUs is described by the ConcreteComponent association. */ ( id SERIAL PRIMARY KEY ,
         fru_id8 INTEGER REFERENCES fru(id) ,
         product_id9 INTEGER REFERENCES product(id) ); 
         CREATE TABLE public.fru_physical_elements /* Indicates the PhysicalElements that make up a FRU. */ ( id SERIAL PRIMARY KEY ,
         fru_id7 INTEGER REFERENCES fru(id) ,
         physical_element_id8 INTEGER REFERENCES physical_element(id) ); 
         CREATE TABLE public.group_synchronized /* Indicates that two replication groups are associated. */ ( id SERIAL PRIMARY KEY ,
         managed_element_id5 INTEGER REFERENCES managed_element(id) ,
         managed_element_id6 INTEGER REFERENCES managed_element(id) ,
         relationship_name text[] ,
         consistency_enabled text[] ,
         consistency_type text[] ,
         consistency_state text[] ,
         consistency_status text[] ,
         when_synced text[] ,
         sync_maintained text[] ,
         copy_recovery_mode text[] ,
         copy_state text[] ,
         failed_copy_stops_host_io text[] ,
         mode text[] ,
         percent_synced text[] ,
         progress_status text[] ,
         rpo text[] ,
         requested_copy_state text[] ,
         skew text[] ,
         sync_type text[] ,
         when_activated text[] ,
         when_deactivated text[] ,
         when_established text[] ,
         when_suspended text[] ,
         when_synchronized text[] ); 
         CREATE TABLE public.hosted_dependency /* HostedDependency defines a ManagedElement IN the context of another ManagedElement IN which it resides. */ ( id SERIAL PRIMARY KEY ,
         managed_element_id5 INTEGER REFERENCES managed_element(id) ,
         managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
         CREATE TABLE public.implementation_capabilities /* The CIM_ImplementationCapabilities identifies the capabilities of the implementation of a SET of classes scoped by a scoping system
        OR a central class. */ ( id SERIAL PRIMARY KEY , supported_element_name_code_set text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.job_capabilities /* CIM_JobCapabilities identifies the capabilities of a job created AS a result of a Service method. */ ( id SERIAL PRIMARY KEY , delete_job_supported text[] , interactive_timeout_max text[] , default_values_supported text[] , client_retries_max text[] , cleanup_interval text[] , silent_mode_supported text[] , time_before_removal_min text[] , time_before_removal_max text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.launch_in_context_capabilities /* This class exposes the capabilities of the Launch IN Context service. */ ( id SERIAL PRIMARY KEY , max_restriction_list_size text[] , max_launch_points text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.localization_capabilities /* This class is being deprecated to avoid conflicts
WITH localization implementations
USING CIM/XML
    OVER HTTP protocol, the preferred mechanism. Describes the input
        AND output localization capabilities of the entity associated via ElementCapabilities. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.location /* The Location class specifies the position
        AND address of a PhysicalElement. */ ( id SERIAL PRIMARY KEY , name text[] , physical_position text[] , address text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_device_view /* LogicalDeviceView is an abstract class that provides a common superclass for view classes that primarily represent logical devices. The definition of each sub-class will include properties propagated
FROM the the graph of classes that are used to model the resource IN the normalized view. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.logical_element /* CIM_LogicalElement is a base class for ALL the components of a System that represent abstract system components, such AS Files, Processes,
        OR LogicalDevices. */ ( id SERIAL PRIMARY KEY , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_identity /* CIM_LogicalIdentity is an abstract
        AND generic association, indicating that two ManagedElements represent different aspects of the same underlying entity. This relationship conveys what could be defined
WITH multiple inheritance. IN most scenarios, the Identity relationship is determined by the equivalence of Keys
        OR some other identifying properties of the related Elements. This relationship is reasonable IN several scenarios. For example, it could be used to represent that a LogicalDevice is both a 'bus' entity
        AND a 'functional' entity. A Device could be both a USB (bus)
        AND a Keyboard (functional) entity. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.member_of_collection /* CIM_MemberOfCollection is an aggregation used to establish membership of ManagedElements IN a Collection. */ ( id SERIAL PRIMARY KEY , collection_id6 INTEGER REFERENCES collection(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.opaque_management_data_capabilities /* CIM_OpaqueManagementDataCapabilities describes the capabilities of CIM_OpaqueManagementDataService. */ ( id SERIAL PRIMARY KEY , max_available_storage text[] , max_read_length text[] , max_write_length text[] , truncation_supported text[] , max_instances_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.ordered_component /* CIM_OrderedComponent is a generic association used to establish 'part of' relationships
    BETWEEN ManagedElements. It arranges the PartComponents IN a specific assigned order. The semantics of the order depends
    ON the context
        AND use by the referencing classes. For example, if this association is used to arrange settings IN a hierarchical order, THEN
    this specifies the sequence IN which the settings are applied. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) , assigned_sequence text[] ); 
    CREATE TABLE public.ordered_dependency /* CIM_OrderedDependency is used to establish a relationship
    BETWEEN a ManagedElement
        AND its dependencies. Each dependency is an Antecedent reference
        AND the order IN which the dependencies need to be resolved is indicated by the AssignedSequence property. For example, if this association is used to arrange dependencies of a software IN a hierarchical order, THEN
    this specifies the sequence IN which the dependencies need to be installed prior to installing the software. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , assigned_sequence text[] ); 
    CREATE TABLE public.ordered_member_of_collection /* CIM_OrderedMemberOfCollection is an aggregation used to establish an ordered membership of ManagedElements IN a Collection. */ ( id SERIAL PRIMARY KEY , collection_id6 INTEGER REFERENCES collection(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) , assigned_sequence text[] ); 
    CREATE TABLE public.owning_collection_element /* OwningCollectionElement represents an association
    BETWEEN a Collection
        AND the ManagedElement responsible for the control
        OR ownership of the Collection. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , collection_id6 INTEGER REFERENCES collection(id) ); 
        CREATE TABLE public.physical_statistical_information /* Statistical information associated
WITH a PhysicalElement
        OR one of its subclasses. */ ( id SERIAL PRIMARY KEY , physical_creation_class_name text[] , tag text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.physical_statistics /* PhysicalStatistics relates the PhysicalStatisticalInformation class to the PhysicalElement to which it applies. */ ( id SERIAL PRIMARY KEY , physical_statistical_information_id5 INTEGER REFERENCES physical_statistical_information(id) , physical_element_id6 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.power_management_capabilities /* A class derived
FROM Capabilities that describes the power management aspects of an element (typically a system
        OR device). The element's power management capabilities are decoupled from a PowerManagementService, since a single service could apply to multiple elements, each with specific capabilities. */ ( id SERIAL PRIMARY KEY , other_power_change_capabilities text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.product_component /* The CIM_ProductComponent association defines a containment and component relationship among Products. For example, a Product may come bundled with other Products. Note that this association duplicates ProductParentChild. The latter association is maintained for legacy reasons. This association, ProductComponent, is added for ease of query and modeling consistency. Using ProductComponent, an application can query for all Component relationships for a Product, versus querying the various Component relationships AND ProductParentChild. */ ( id SERIAL PRIMARY KEY , product_id8 INTEGER REFERENCES product(id) , product_id9 INTEGER REFERENCES product(id) ); 
        CREATE TABLE public.product_element_component /* Indicates that the referenced ManagedElement is part of a Product. */ ( id SERIAL PRIMARY KEY , product_id7 INTEGER REFERENCES product(id) , managed_element_id8 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.product_fru /* CIM_ProductFRU is an association between Product and FRU that provides information regarding what Product components have been or are being replaced. The association is one to many, conveying that a Product can have many FRUs, and that a particular instance of a FRU is only applied to one (instance of a) Product. */ ( id SERIAL PRIMARY KEY , product_id5 INTEGER REFERENCES product(id) , fru_id6 INTEGER REFERENCES fru(id) ); 
        CREATE TABLE public.product_physical_component /* Indicates that the referenced PhysicalElement is acquired as part of a Product. This class is maintained for compatibility with existing implementations, but may be deprecated in favor of ProductElementComponent in the future. */ ( id SERIAL PRIMARY KEY , physical_element_id7 INTEGER REFERENCES physical_element(id) , product_id8 INTEGER REFERENCES product(id) ); 
        CREATE TABLE public.product_support /* CIM_ProductSupport is an association between Product and SupportAccess that conveys how support is obtained for the Product. This is a many-to-many relationship, implying that various types of Support are available for a Product, and that the same Support object can provide assistance for multiple Products. */ ( id SERIAL PRIMARY KEY , product_id5 INTEGER REFERENCES product(id) , support_access_id6 INTEGER REFERENCES support_access(id) ); 
        CREATE TABLE public.profile /* Note: The use of CIM_Profile is deprecated in favor of aggregating instances of Setting or SettingData into "higher-level" Settings or SettingData objects using the ConcreteComponent association. This use simplifies the use of Settings or SettingData. With Profiles subclassing from Collection, separate associations were needed between an element and either its Profiles or Settings or SettingData. This class introduced unnecessary complexity and redundancy into the model. Deprecated description: Profile specifies a general collection of Settings or SettingData objects that are logically grouped together. Note: The CIM_Profile class uses simplified naming or identity algorithms and collection algorithms, as compared to CIM_Configuration. The settings are "collected" into the Profile using the MemberOfCollection association. Note that a Profile obtains its setting data and other necessary information from collected Setting and SettingData instances and by the definition of additional properties in subclasses. One example of a Profile is to define the collection of settings for a particular person. Another is to define the collection of settings that are appropriate when initializing a system. Profile is tied to a ManagedElement using the ElementProfile association. The ManagedElement provides the context for the Profile, and the settings collected by Profile should be settings of the associated ManagedElement. Note that a ManagedElement cannot exist when the Profile is instantiated. This situation is important to remember when the Profile is used in the creation of the real-world entity that is represented by (and then instantiated in) the ManagedElement. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.redundancy_group /* A class derived from LogicalElement that is a special collection of ManagedSystemElements. This collection indicates that the aggregated components together provide redundancy. All elements aggregated in a RedundancyGroup should be instantiations of the same object class. The use of this class is being deprecated in lieu of using the RedundancySet class. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , redundancy_status text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.related_element_causing_error /* This association defines the relationship between a failing managed element and the managed element that is causing the error. The cause and effect might be indirect. The cause might be simply that the lack of functionality of one component causes another component to be overworked. The association instance must exist as long as the cause-and- effect relationship exists. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , failure_relationship_initiated text[] , effect_correlation text[] , ranking text[] ); 
        CREATE TABLE public.related_statistical_data /* CIM_RelatedStatisticalData is an association that defines hierarchies and/or dependencies of related CIM_Statistical Data classes. */ ( id SERIAL PRIMARY KEY , statistical_data_id5 INTEGER REFERENCES statistical_data(id) , statistical_data_id6 INTEGER REFERENCES statistical_data(id) , description text[] ); 
        CREATE TABLE public.related_statistics /* CIM_RelatedStatistics is an association that defines hierarchies and/or dependencies of related CIM_Statistical Information classes. */ ( id SERIAL PRIMARY KEY , statistical_information_id5 INTEGER REFERENCES statistical_information(id) , statistical_information_id6 INTEGER REFERENCES statistical_information(id) ); 
        CREATE TABLE public.replaceable_product_fru /* ReplaceableProductFRU is an association between Product and FRU that shows what Product components may be replaced. The association is one to many, conveying that a Product can have many FRUs, and that a particular instance of a FRU is only applied to one (instance of a) Product. */ ( id SERIAL PRIMARY KEY , product_id5 INTEGER REFERENCES product(id) , fru_id6 INTEGER REFERENCES fru(id) ); 
        CREATE TABLE public.resource_allocation_setting_data /* The ResourceAllocationSettingData class represents settings specifically related to an allocated resource that are outside the scope of the CIM class typically used to represent the resource itself. These settings include information specific to the allocation that may not be visible to the consumer of the resource itself. For example, a virtual processor may look like a 2 ghz processor to the consumer (virtual computer system), however the virtualization system may use time-slicing to schedule the the virtual processor to only allow it to use 1 ghz. */ ( id SERIAL PRIMARY KEY , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , pool_id text[] , consumer_visibility text[] , allocation_units text[] , virtual_quantity text[] , reservation text[] , limit_ text[] , weight text[] , automatic_allocation text[] , automatic_deallocation text[] , parent text[] , address text[] , mapping_behavior text[] , address_on_parent text[] , virtual_quantity_units text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.resource_pool /* A ResourcePool is a logical entity (with associated controls)provided by the host system for the purpose of allocation and assignment of resources. A given ResourcePool may be used to allocate resources of a specific type. Hierarchies of ResourcePools may be created to provide administrative control over allocations. In the cases where resources are subdivided, multiple resource pools may exist (e.g. nodal boundaries in NUMA-like systems). In systems that support over commitment, pools represent the reservable capacity, not an upper bound or limit on the maximum amount that can be allocated. Admission control during power on may detect and prevent systems from powering due to resource exhaustion. For example, over commitment on a ResourcePool with ResourceType=Memory would require that sufficient space be available in some backing-store, that may be managed through a storage ResourcePool. */ ( id SERIAL PRIMARY KEY , instance_id text[] , pool_id text[] , primordial text[] , capacity text[] , reserved text[] , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , allocation_units text[] , consumed_resource_units text[] , currently_consumed_resource text[] , max_consumable_resource text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.resource_pool_configuration_capabilities /* This class exposes the supported capabilities of a ResourcePoolConfigurationService. Not all implementations will support all methods on the service. Clients may use instances of this class to determine which methods are supported. The same method must not be listed in both lists. Implementations must either be non-blocking and use a Job for long running operations, or always block until the operation completes. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.sap_statistical_information /* Statistical information associated with a Service AccessPoint object or one of its subclasses. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , sap_creation_class_name text[] , sap_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scoped_setting_data /* The ScopedSettingData class represents the general concept of SettingData, which is scoped or contained by a ManagedElement (that is, settings that are specifically defined for a system, device, and so on). ScopedSettingData is tied to a ManagedElement using the ScopedSetting association. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the instantiation of the ScopedSetting association for the referenced instance of ScopedSettingData. ScopedSetting describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement must exist and it provides the context for the ScopedSettingData. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.service_statistical_information /* Statistical information associated with a Service object or one of its subclasses. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.setting /* The Setting class represents configuration-related and operational parameters for one or more ManagedSystemElements. An Element can have multiple Setting objects associated with it. The current operational values for the parameters of an Element are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the Setting object. For example, a modem might have a Setting baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note: The CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information. Setting instances can be aggregated together into higher-level Setting objects using ConcreteComponent associations. */ ( id SERIAL PRIMARY KEY , setting_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.setting_context /* Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of instances of Setting or SettingData. Therefore, the aggregation of Settings into Configurations is replaced by the ConcreteComponent relationship between instances of Settings and SettingData. Deprecated description: This relationship associates Configuration objects with Setting objects. For example, Settings of a NetworkAdapter could change based on the site or network to which its hosting ComputerSystem is attached. In this case, the ComputerSystem would have two different Configuration objects, corresponding to the differences in network configuration for the two network segments. Configuration A would aggregate a Setting object for the NetworkAdapter when operating on segment "ANet", whereas Configuration B would aggregate a different NetworkAdapter Setting object, specific to segment "BNet". Note that many Settings of the computer are independent of the network Configuration. For example, both Configurations A and B would aggregate the same Setting object for the MonitorResolution of the ComputerSystem. */ ( id SERIAL PRIMARY KEY , configuration_id7 INTEGER REFERENCES configuration(id) , setting_id8 INTEGER REFERENCES setting(id) ); 
        CREATE TABLE public.settings_define_capabilities /* This association indicates that the non-null, non-key set of properties of the component SettingData instance specifies some capabilities of the associated Capabilities instance. The interpretation of the set of properties in the associated SettingData is governed by the properties: PropertyPolicy and ValueRole. For a particular Capabilities instance, the complete set of Component SettingData instances, together with properties of the Capabilities instance itself, defines the overall range of supported capabilities. PropertyPolicy determines whether the properties of the set are interpreted independently or as a whole (i.e. correlated.) ValueRole further qualifies the members of the set. This association eliminates the need to define and maintain corresponding property definitions and values in both a Capabilities subclass and a SettingData subclass. Typically these setting instances will be published along with the associated Capabilities instance and will not be modifiable by the client. */ ( id SERIAL PRIMARY KEY , capabilities_id6 INTEGER REFERENCES capabilities(id) , setting_data_id7 INTEGER REFERENCES setting_data(id) , property_policy text[] , value_role text[] , value_range text[] ); 
        CREATE TABLE public.software_identity /* SoftwareIdentity provides descriptive information about a software component for asset tracking and/or installation dependency management. When the IsEntity property has the value TRUE, the instance of SoftwareIdentity represents an individually identifiable entity similar to Physical Element. SoftwareIdentity does NOT indicate whether the software is installed, executing, etc. This extra information may be provided through specialized associations to Software Identity. For instance, both InstalledSoftwareIdentity and ElementSoftwareIdentity may be used to indicate that the software identified by this class is installed. SoftwareIdentity is used when managing the software components of a ManagedElement that is the management focus. Since software may be acquired, SoftwareIdentity can be associated with a Product using the ProductSoftwareComponent relationship. The Application Model manages the deployment and installation of software via the classes, SoftwareFeatures and SoftwareElements. SoftwareFeature and SoftwareElement are used when the software component is the management focus. The deployment/installation concepts are related to the asset/identity one. In fact, a SoftwareIdentity may correspond to a Product, or to one or more SoftwareFeatures or SoftwareElements - depending on the granularity of these classes and the deployment model. The correspondence of Software Identity to Product, SoftwareFeature or SoftwareElement is indicated using the ConcreteIdentity association. Note that there may not be sufficient detail or instrumentation to instantiate ConcreteIdentity. And, if the association is instantiated, some duplication of information may result. For example, the Vendor described in the instances of Product and SoftwareIdentity MAY be the same. However, this is not necessarily true, and it is why vendor and similar information are duplicated in this class. Note that ConcreteIdentity can also be used to describe the relationship of the software to any LogicalFiles that result from installing it. As above, there may not be sufficient detail or instrumentation to instantiate this association. */ ( id SERIAL PRIMARY KEY , instance_id text[] , major_version text[] , minor_version text[] , revision_number text[] , build_number text[] , large_build_number text[] , is_large_build_number text[] , version_string text[] , manufacturer text[] , serial_number text[] , release_date text[] , is_entity text[] , extended_resource_type text[] , other_extended_resource_type_description text[] , min_extended_resource_type_major_version text[] , min_extended_resource_type_minor_version text[] , min_extended_resource_type_revision_number text[] , min_extended_resource_type_build_number text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.software_installation_service_capabilities /* A subclass of capabilities that defines the capabilities of a SoftwareInstallationService. A single instance of SoftwareInstallationServiceCapabilities is associated with a SoftwareInstallationService using ElementCapabilities. */ ( id SERIAL PRIMARY KEY , can_add_to_collection text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.spare_group /* A class derived from RedundancyGroup indicating that one or more of the aggregated elements can be spared. (The actual Spares are defined using the ActsAsSpare association.) An example is the use of redundant NICs in a ComputerSystem - where one NIC is primary and the other is Spare. The 'primary' NIC would be a member of the SpareGroup (associated using the RedundancyComponent class) and the 'other' NIC would be associated using the ActsAsSpare relationship. The use of the class is being deprecated in lieu of using the RedundancySet class. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , redundancy_status text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.spared /* The Spared association indicates an element that is acting as a replacement for another element. If the Dependent references a Collection, this indicates that 'spared' element is a member of that collection and the actual mapping between the spare and the spared is un-important. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.storage_allocation_setting_data /* The CIM_StorageAllocationSettingData class represents settings specifically related to the allocation of virtual storage. */ ( id SERIAL PRIMARY KEY , virtual_resource_block_size text[] , virtual_quantity text[] , virtual_quantity_units text[] , access text[] , host_resource_block_size text[] , reservation text[] , limit_ text[] , host_extent_starting_address text[] , host_extent_name text[] , host_extent_name_format text[] , other_host_extent_name_format text[] , host_extent_name_namespace text[] , other_host_extent_name_namespace text[] , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , pool_id text[] , consumer_visibility text[] , allocation_units text[] , weight text[] , automatic_allocation text[] , automatic_deallocation text[] , parent text[] , address text[] , mapping_behavior text[] , address_on_parent text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_redundancy_group /* A class derived from RedundancyGroup containing mass storage-related redundancy information. StorageRedundancy Groups are used to protect user data. They act on one or more underlying StorageExtents, associated via ExtentRedundancyComponent and produce one or more protected StorageExtents that are associated to the underlying StorageExtents via ProtectedExtentBasedOn or CompositeExtentBasedOn. StorageRedundancyGroups may overlap. However, the underlying StorageExtents within the overlap should not contain any check data. The use of this class is being deprecated in lieu of using the StorageRedundancySet class. */ ( id SERIAL PRIMARY KEY , type_of_algorithm text[] , storage_redundancy text[] , is_striped text[] , is_concatenated text[] , creation_class_name text[] , name text[] , redundancy_status text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.system_setting /* CIM_SystemSetting represents the general concept of a CIM_Setting that is scoped by a System. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , setting_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.system_setting_context /* Note: The Configuration and SystemConfiguration classes are deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of Settings or SettingData instances. Therefore, the aggregation of SystemSettings into System Configurations is replaced by the ConcreteComponent relationship between instances of Settings and SettingData. Deprecated description: This relationship associates System-specific Configuration objects with System-specific Setting objects, similar to the SettingContext association. */ ( id SERIAL PRIMARY KEY , system_configuration_id7 INTEGER REFERENCES system_configuration(id) , system_setting_id8 INTEGER REFERENCES system_setting(id) ); 
        CREATE TABLE public.system_specific_collection /* SystemSpecificCollection represents the general concept of a collection that is scoped (or contained) by a System. It represents a Collection that has meaning only in the context of a System, a Collection whose elements are restricted by the definition of the System, or both of these types of Collections. This meaning is explicitly described by the (required) association, HostedCollection. An example of a SystemSpecificCollection is a Fibre Channel zone that collects network ports, port groupings, and aliases (as required by a customer) in the context of an AdminDomain. The Collection is not a part of the domain, but merely an arbitrary grouping of the devices and other Collections in the domain. In other words, the context of the Collection is restricted to the domain, and its members are also limited by the domain. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.virtual_ethernet_switch_setting_data /* CIM_VirtualEthernetSwitchSettingData specializes CIM_VirtualSystemSettingDatato add the specific properties required to define a virtual Ethernet bridge. */ ( id SERIAL PRIMARY KEY , max_num_macaddress text[] , evb_mode text[] , other_evbmode text[] , virtual_system_identifier text[] , virtual_system_type text[] , creation_time text[] , configuration_id text[] , configuration_data_root text[] , configuration_file text[] , snapshot_data_root text[] , suspend_data_root text[] , swap_file_data_root text[] , log_data_root text[] , automatic_startup_action text[] , automatic_startup_action_delay text[] , automatic_startup_action_sequence_number text[] , automatic_shutdown_action text[] , automatic_recovery_action text[] , recovery_file text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.virtual_system_management_capabilities /* Capabilities of a CIM_VirtualSystemManagementService. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.virtual_system_snapshot_capabilities /* The CIM_VirtualSystemSnapshotCapabilities class defines the properties that describe the capabilities of a virtual system with respect to snapshots, like for example the set of snapshot operations that it enabled for a virtual system. */ ( id SERIAL PRIMARY KEY , guest_osnotification_enabled text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.virtual_system_snapshot_service_capabilities /* The CIM_VirtualSystemSnapshotServiceCapabilities class defines the properties that describe the capabilities of a virtual system snapshot service, like for example which snapshot operations are implemented. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.common_database_capabilities /* Properties in this class represent general, high-level database capabilities that may be supported by a common database. For example, the ability for a database to support recoverability, replication, parallelism, or clustering would be specified in this class. Detailed settings, such as the minimum and maximum number of parallel servers for a database that supports parallelism, would be defined in the CIM_DatabaseParameter class. This information is tied to the CommonDatabase using the ElementCapabilities association. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.database_parameter /* The CIM_DatabaseParameter class extends from CIM_ScopedSettingData. This abstract class specifies the database and service configuration parameters that are common across database models and vendor implementations. The SNMP RDBMS MIB defines database and service parameters as name and value pair combinations rather than as specific named properties of the class. In order to maintain a consistent mapping between SNMP and CIM, a CIM_SNMPDatabaseParameter class extends from the abstract CIM_DatabaseParameter class, which defines parameters as a name value pair. In a future release of the database MOF, the working group can choose to create a new class that extends from CIM_DatabaseParameter, which specifies properties for common configuration parameters. The parameter context for a specific database or database service is established by collecting the SettingData using the CIM_ElementProfile association. The SNMP RDBMS MIB defines generic tables that contain rows of named database or service configuration entries. A parameter entry contains a parameter name, description, and value. See the description of the rdbmsDbParamTable or the rdbmsSrvParamTable for more information on the SNMP definitions. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.database_segment_setting_data /* This class defines the attributes that affect the growth of a DatabaseSegment. The attributes are tied to the DatabaseSegment through an ElementSettingData association. This class can also be used to specify the default settings for all DatabaseSegment instances that are created within a CommonDatabase through an ElementSettingData association to the CommonDatabase. Processes that create new instances of DatabaseSegment and the associated setting data should check for a DatabaseSegmentSettingData instance that is associated with the CommonDatabase and should create a new instance of DatabaseSegmentSettingData that is specific to the DatabaseSegment only if the default settings need to be overridden or frozen for the specific DatabaseSegment instance. */ ( id SERIAL PRIMARY KEY , initial_extent_size text[] , minimum_extents text[] , maximum_extents text[] , next_extent_size text[] , percent_increase text[] , number_of_free_lists text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.snmp_database_parameter /* The CIM_SNMPDatabaseParameter class extends from CIM_DatabaseParameter. This class is included in the CIM database schema to provide explicit mapping to the way that the SNMP MIB defines database and service parameters. More information on the SNMP MIB parameters can be found in RFC 1697. The SNMP RDBMS MIB defines generic tables that contain rows of named database or service configuration entries. A parameter entry contains a parameter name, description, and value. See the description of the rdbmsDbParamTable or the rdbmsSrvParamTable for more detailed information on the SNMP definitions. */ ( id SERIAL PRIMARY KEY , parameter_value text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.abstract_protocol_controller_for_device /* This abstract association indicates a subclass of LogicalDevice or a view of a logical device is connected through a specific ProtocolController or view of a ProtocolController. Specific subclasses of this association would identify whether views or specific classes are used. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) , device_number text[] , access_priority text[] , access_state text[] ); 
        CREATE TABLE public.advanced_storage_setting /* This subclass of StorageSetting allows a client to specify advanced settings that can be applied to creating and manipulating elements. */ ( id SERIAL PRIMARY KEY , initial_storage_tier_methodology text[] , initial_storage_tiering_selection text[] , relative_performance_order_limit text[] , storage_tiering_frozen text[] , no_single_point_of_failure text[] , data_redundancy_max text[] , data_redundancy_min text[] , data_redundancy_goal text[] , package_redundancy_max text[] , package_redundancy_min text[] , package_redundancy_goal text[] , delta_reservation_max text[] , delta_reservation_min text[] , delta_reservation_goal text[] , changeable_type text[] , extent_stripe_length text[] , extent_stripe_length_min text[] , extent_stripe_length_max text[] , parity_layout text[] , user_data_stripe_depth text[] , user_data_stripe_depth_min text[] , user_data_stripe_depth_max text[] , cu_image text[] , compressed_element text[] , compression_rate text[] , data_organization text[] , disk_type text[] , emulated_device text[] , encryption text[] , form_factor_type text[] , incremental_deltas text[] , initial_synchronization text[] , interconnect_speed text[] , interconnect_type text[] , low_space_warning_threshold text[] , persistent_replica text[] , port_type text[] , rpm text[] , replication_priority text[] , space_limit text[] , space_limit_warning_threshold text[] , storage_extent_initial_usage text[] , storage_pool_initial_usage text[] , subsystem_id text[] , thin_provisioned_initial_reserve text[] , thin_provisioned_pool_type text[] , use_replication_buffer text[] , instance_id text[] , element_name text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.alarm_device_capabilities /* AlarmDeviceCapabilities describes the capabilities supported for changing the state OF THE ASSOCIATED AlarmDevice. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.allocated_resources /* A subclass of SystemSpecificCollection for collecting leaf remote resources that have been allocated for use in a system (e.g., StorageVolumes assigned to a virtualizer's StoragePool). This class collects ALL the allocated resources of a specific type for the system that can be found (via the MemberOfCollection associations)
FROM the collection. */ ( id SERIAL PRIMARY KEY ,
         element_type text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.block_statistics_manifest_collection /* The BlockStatisticsManifestCollection class aggregates,
         via MemberOfCollection,
         a SET of BlockStatisticsManifests. This collection is associated via AssociatedBlockStatisticsManifestCollection to exactly one StatisticsCollection. The BlockStatisticsManifestCollection is used to filter the retrieval of statistics. For example,
         a BlockStatisticsManifestCollection is specified AS part of the StatisticsService.GetStatisticsCollection method to filter the statistics returned by that method. */ ( id SERIAL PRIMARY KEY ,
         element_name text[] ,
         is_default text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.device_sharing_capabilities /* A class derived
FROM Capabilities that describes the type of access supported for a shared device. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.disk_drive_view /* The CIM_DiskDriveView instance is a view that is derived
FROM CIM_StorageExtent, CIM_MediaPresent, CIM_DiskDrive, CIM_Realizes, CIM_PhysicalPackage, CIM_ElementSoftwareIdentity
        AND CIM_SoftwareIdentity. */ ( id SERIAL PRIMARY KEY , se_system_creation_class_name text[] , se_system_name text[] , se_creation_class_name text[] , se_device_id text[] , se_block_size text[] , se_number_of_blocks text[] , se_consumable_blocks text[] , dd_system_creation_class_name text[] , dd_system_name text[] , dd_creation_class_name text[] , dd_device_id text[] , dd_name text[] , pp_creation_class_name text[] , pp_tag text[] , pp_manufacturer text[] , pp_model text[] , si_instance_id text[] , si_version_string text[] , dd_location_indicator text[] , pp_serial_number text[] , pp_part_number text[] , si_manufacturer text[] , si_build_number text[] , si_major_version text[] , si_revision_number text[] , si_minor_version text[] , dd_disk_type text[] , dd_encryption text[] , dd_form_factor text[] , lp_port_type text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.disk_group /* A DiskGroup is a named collection of DiskDrives
        AND the StorageExtents accessed
USING those Drives. The collection is used to limit the BasedOn relationships of the Extents IN the DiskGroup. Extents IN the Group cannot be BasedOn storage accessed
FROM Drives outside of the Group. For example, a SoftwareVolume created within the DiskGroup is restricted to be completely accessed
USING Drives IN the Group. Actions such AS replicate
        OR migrate
    ON an Extent must operate within the scope of the Extents that are present IN the DiskGroup. */ ( id SERIAL PRIMARY KEY , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.disk_partition_configuration_capabilities /* DiskPartitionConfigurationCapabilities instances describe a partition style supported by the platform. An instance of this class is associated
WITH a volume (or partition)
    WHEN a partition table is installed (see DiskPartitionConfigurationService.SetPartitionStyle. */ ( id SERIAL PRIMARY KEY , partition_style text[] , version text[] , max_number_of_partitions text[] , max_capacity text[] , overlap_allowed text[] , partition_table_size text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.drive_component_view_view /* This aggregates DiskDriveView instances to the StoragePoolView that has the disk drives AS pool components. */ ( id SERIAL PRIMARY KEY , storage_pool_view_id6 INTEGER REFERENCES storage_pool_view(id) , disk_drive_view_id7 INTEGER REFERENCES disk_drive_view(id) ); 
    CREATE TABLE public.element_statistical_data_view /* The CIM_ElementStatisticalDataView is an association
    BETWEEN a View Class instance
        AND the CIM_StatisticalData instance for the base class of the View (e.g., CIM_StorageVolume). */ ( id SERIAL PRIMARY KEY , view_id5 INTEGER REFERENCES view(id) , statistical_data_id6 INTEGER REFERENCES statistical_data(id) ); 
        CREATE TABLE public.element_storage_protection_setting_data /* CIM_ElementStorageProtectionSettingData represents the association
    BETWEEN a storage element (CIM_StorageVolume
        OR CIM_LogicalDisk to be protected
        AND the applicable protection setting. */ ( id SERIAL PRIMARY KEY , storage_protection_setting_id5 INTEGER REFERENCES storage_protection_setting(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , is_default text[] , is_current text[] , is_next text[] ); 
        CREATE TABLE public.ethernet_port_statistics /* The EthernetPortStatistics class describes the statistics for the EthernetPort. */ ( id SERIAL PRIMARY KEY , packets_transmitted text[] , packets_received text[] , symbol_errors text[] , alignment_errors text[] , fcs_errors text[] , single_collision_frames text[] , multiple_collision_frames text[] , sqe_test_errors text[] , deferred_transmissions text[] , late_collisions text[] , excessive_collisions text[] , internal_mactransmit_errors text[] , internal_macreceive_errors text[] , carrier_sense_errors text[] , frame_too_longs text[] , bytes_transmitted text[] , bytes_received text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fc_adapter_event_counters /* Note: The use of the FCAdapterEventCounters class is deprecated because FibreChannelAdapter is deprecated. FCPortStatistics should be used instead, but it redefines the level at which data is collected. Therefore, there is no direct translation of the individual counters
    BETWEEN the two classes. This object describes event counters that were specific to a FibreChannelAdapter. */ ( id SERIAL PRIMARY KEY , abts_frames_received text[] , abts_frames_sent text[] , fbs_ysreceived text[] , pbs_ysreceived text[] , pbs_yssent text[] , frj_tsreceived text[] , prj_tsreceived text[] , prj_tssent text[] , prl_isrejected text[] , prl_osrejected text[] , abts_frames_rejected text[] , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.fc_port_settings /* A port that supports FibreChannel capabilities may be configured via the FCPortSettings class. The configuration changes are expected to be stored to non-volatile memory. */ ( id SERIAL PRIMARY KEY , requested_type text[] , link_technology text[] , requested_speed text[] , auto_sense_speed text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.fc_port_statistics /* FCPortStatistics is the statistics for the FCPort. */ ( id SERIAL PRIMARY KEY , lip_count text[] , nos_count text[] , error_frames text[] , dumped_frames text[] , link_failures text[] , loss_of_signal_counter text[] , loss_of_sync_counter text[] , primitive_seq_protocol_err_count text[] , crc_errors text[] , invalid_transmission_words text[] , frames_too_short text[] , frames_too_long text[] , address_errors text[] , buffer_credit_not_provided text[] , buffer_credit_not_received text[] , delimiter_errors text[] , encoding_disparity_errors text[] , link_resets_received text[] , link_resets_transmitted text[] , multicast_frames_received text[] , multicast_frames_transmitted text[] , fbsy_frames text[] , pbsy_frames text[] , frjt_frames text[] , prjt_frames text[] , rx_class1_frames text[] , tx_class1_frames text[] , class1_fbsy text[] , class1_pbsy text[] , class1_frjt text[] , class1_prjt text[] , rx_class2_frames text[] , tx_class2_frames text[] , class2_fbsy text[] , class2_pbsy text[] , class2_frjt text[] , class2_prjt text[] , rx_class3_frames text[] , tx_class3_frames text[] , class3_frames_discarded text[] , rx_broadcast_frames text[] , tx_broadcast_frames text[] , bytes_transmitted text[] , bytes_received text[] , packets_transmitted text[] , packets_received text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.fc_switch_capabilities /* FibreChannel switch control
        AND configuration capabilities. */ ( id SERIAL PRIMARY KEY , domain_idconfigureable text[] , min_domain_id text[] , max_domain_id text[] , domain_idlocked_supported text[] , npiv_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.failover_storage_extents_collection /* The FailoverStorageExtentsCollection class aggregates StorageExtents which have been failed
    OVER by the RedundancySet.Failover method. The StorageExtents are no longer a member of a RedundancySet
        AND may be associated
WITH a StoragePool reserved for sparing. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.fibre_port_event_counters /* Note: The use of the FibrePortEventCounters class is deprecated because FibrePort is deprecated. FCPortStatistics should be used instead, but it redefines the level at which data is collected. Therefore, there is no direct translation of the individual counters
    BETWEEN the two classes. Deprecated description: This object defines error counters that are specific to a FibrePort. */ ( id SERIAL PRIMARY KEY , plog_isreceived text[] , plog_issent text[] , eof_aborts_received text[] , eof_aborts_transmitted text[] , plog_osreceived text[] , plog_ossent text[] , plog_isrejected text[] , plog_osrejected text[] , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.file_system_replication_capabilities /* This subclass defines the replication capabilities of a ReplicationService. Multiple instances of FileSystemReplicationCapabilities may be associated
WITH a ReplicationService
USING ElementCapabilities. A provider should create one instance for each supported SynchronizationType. */ ( id SERIAL PRIMARY KEY , supported_replication_type text[] , initial_replication_state text[] , replica_host_accessibility text[] , space_limit_supported text[] , space_reservation_supported text[] , local_mirror_snapshot_supported text[] , remote_mirror_snapshot_supported text[] , incremental_deltas_supported text[] , persistent_replicas_supported text[] , bidirectional_connections_supported text[] , maximum_replicas_per_source text[] , maximum_ports_per_connection text[] , maximum_connections_per_port text[] , maximum_peer_connections text[] , maximum_local_replication_depth text[] , maximum_remote_replication_depth text[] , replication_priority_default text[] , low_space_warning_threshold_default text[] , space_limit_warning_threshold_default text[] , delta_replica_pool_access text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.indicator_ledcapabilities /* LEDCapabilities describes the capabilities supported for managing the associated LED. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.lldp_ethernet_port_statistics /* This class describes LLDP statistics that applies to LLDP frames
    ON this Ethernet Port. For more detailed descriptions
    ON these properties, please refer to IEEE LLDP-EXT-DOT1-V2-MIB. */ ( id SERIAL PRIMARY KEY , packets_transmitted text[] , packets_received text[] , symbol_errors text[] , alignment_errors text[] , fcs_errors text[] , single_collision_frames text[] , multiple_collision_frames text[] , sqe_test_errors text[] , deferred_transmissions text[] , late_collisions text[] , excessive_collisions text[] , internal_mactransmit_errors text[] , internal_macreceive_errors text[] , carrier_sense_errors text[] , frame_too_longs text[] , bytes_transmitted text[] , bytes_received text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.label_reader_stat_info /* Statistics for a LabelReader, related to read successes, failures
        AND retries. */ ( id SERIAL PRIMARY KEY , scan_successes text[] , scan_failures text[] , scan_retries text[] , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_port_capabilities /* LogicalPortCapabilities describes the configuration capabilities for properties IN LogicalPortSettings. */ ( id SERIAL PRIMARY KEY , auto_sense_speed_configurable text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.logical_port_group /* A collection of one
        OR more ports that are logically grouped for administrative
        AND discovery
        OR topology purposes. LogicalPortGroups define port collections for access control,
        OR for use IN routing policy
        OR other management tasks. For example, IN Fibre Channel
        AND Infiniband, a LogicalPortGroup represents the concept of a 'node'. */ ( id SERIAL PRIMARY KEY , name text[] , name_format text[] , other_name_format text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.mapping_protocol_controller_view /* The CIM_MappingProtocolControllerView instance is a view that is derived
FROM CIM_LogicalPort, CIM_ProtocolController, CIM_ProtocolEndpoint, CIM_AuthorizedPrivilege
        AND CIM_StorageHardwareID. CIM_ElementView may associate CIM_MappingProtocolControllerView to its underlying elements (regardless of whether
        OR NOT they are instantiated). */ ( id SERIAL PRIMARY KEY , pc_system_creation_class_name text[] , pc_system_name text[] , pc_creation_class_name text[] , pc_device_id text[] , shid_instance_id text[] , shid_storage_id text[] , shidid_type text[] , pep_system_creation_class_name text[] , pep_creation_class_name text[] , pep_system_name text[] , pep_name text[] , pep_protocol_iftype text[] , pep_other_type_description text[] , pep_role text[] , pep_connection_type text[] , ap_instance_id text[] , ap_privilege_granted text[] , ap_element_name text[] , lp_system_creation_class_name text[] , lp_system_name text[] , lp_creation_class_name text[] , lp_device_id text[] , lp_usage_restriction text[] , lp_port_type text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.masking_group /* This class represents a collection of storage masking objects, such AS a group of InitiatorPorts, TargetPorts
        OR LUNames. */ ( id SERIAL PRIMARY KEY , delete_on_empty text[] , delete_when_becomes_unassociated text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.media_access_stat_info /* Statistics related to reading
        AND writing at a specific MediaAccessDevice,
        OR for a specific StorageExtent. Although the same class is used to represent this data, at the instance level the object holds information for the MediaAccessDevice (independent of the StorageExtent),
        OR for the Extent (independent of its AccessDevice). Note that this class models the same properties AS MediaAccessStatData. The latter, however, uses the simplified key mechanisms of the StatisticalData class. */ ( id SERIAL PRIMARY KEY , read_operations text[] , unrecoverable_read_operations text[] , write_operations text[] , unrecoverable_write_operations text[] , recovered_read_operations text[] , recovered_write_operations text[] , recovered_seek_operations text[] , unrecoverable_seek_operations text[] , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.memory_allocation_setting_data /* The MemoryAllocationSettingData class represents settings used
    WHEN allocating a memory extent. Instances can represent a default
        OR staged setting IN which
    CASE they are NOT associated
WITH an existing extent. Instances can also represent the specific settings used
    WHEN allocating an existing extent IN which
    CASE they are assocated to that memory extent. */ ( id SERIAL PRIMARY KEY ,
         resource_type text[] ,
         channel_interleave_size text[] ,
         channel_count text[] ,
         controller_interleave_size text[] ,
         replication text[] ,
         other_resource_type text[] ,
         resource_sub_type text[] ,
         pool_id text[] ,
         consumer_visibility text[] ,
         allocation_units text[] ,
         virtual_quantity text[] ,
         reservation text[] ,
         limit_ text[] ,
         weight text[] ,
         automatic_allocation text[] ,
         automatic_deallocation text[] ,
         parent text[] ,
         address text[] ,
         mapping_behavior text[] ,
         address_on_parent text[] ,
         virtual_quantity_units text[] ,
         instance_id text[] ,
         element_name text[] ,
         changeable_type text[] ,
         configuration_name text[] ,
         so_id text[] ,
         so_org_id text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
    CREATE TABLE public.memory_capabilities /* A subclass of Capabilities that defines the capabilities of a SET if primordial memory extents represented by a MemoryResources pool. */ ( id SERIAL PRIMARY KEY ,
         alignment text[] ,
         instance_id text[] ,
         element_name text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.memory_configuration_capabilities /* A subclass of Capabilities that defines the Capabilities of a MemoryConfigurationService. An instance of MemoryConfigurationCapabilities is associated
WITH a MemoryConfigurationService
USING ElementCapabilities. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.memory_error /* MemoryError defines a memory space that has errors. The Key of the class is the StartingAddress of the bytes IN error. */ ( id SERIAL PRIMARY KEY , starting_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , system_level_address text[] , error_resolution text[] , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , ending_address text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.monitor_resolution /* MonitorResolution describes the relationship
    BETWEEN horizontal
        AND vertical resolutions, refresh rate
        AND scan mode for a DesktopMonitor. The actual resolutions,
         etc. that are IN use,
         are the values specified IN the VideoController object. */ ( id SERIAL PRIMARY KEY ,
         setting_id text[] ,
         horizontal_resolution text[] ,
         vertical_resolution text[] ,
         refresh_rate text[] ,
         min_refresh_rate text[] ,
         max_refresh_rate text[] ,
         scan_mode text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.network_port_capabilities /* NetworkPortCapabilities describes the capabilities supported for properties that are configurable IN NetworkPort. */ ( id SERIAL PRIMARY KEY ,
         speed_configurable text[] ,
         network_ids_configurable text[] ,
         network_ids_format text[] ,
         auto_sense_speed_configurable text[] ,
         element_name_edit_supported text[] ,
         max_element_name_len text[] ,
         element_name_mask text[] ,
         instance_id text[] ,
         element_name text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.operational_power_manifest_collection /* The OperationalPowerManifestCollection class aggregates,
         via MemberOfCollection,
         a SET of OperationalPowerManifests. The OperationalPowerManifestCollection is used to filter the retrieval of statistics. For example,
         an OperationalPowerManifestCollection is specified AS part of the OperationalPowerStatisticsService.GetStatisticsCollection method to filter the statistics returned by that method. */ ( id SERIAL PRIMARY KEY ,
         element_name text[] ,
         is_default text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.pci_port_group /* A collection of one
        OR more PCI device ports. */ ( id SERIAL PRIMARY KEY , bus_number text[] , name text[] , name_format text[] , other_name_format text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.persistent_configuration_capabilities /* A subclass of Capabilities that defines the capabilities of a PersistentMemoryService. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.persistent_memory_capabilities /* CIM_PersistentMemoryCapabilities describes the capabilities of pool(s) of persistent memory. Capabilities can be derived
FROM the underlying persistent memory devices, memory controllers, platform firmware,
        OR other available software. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.persistent_memory_namespace_setting_data /* PersistentMemoryNamespaceSettingData reflects the parameters specified during persistent memory namespace creation
        OR modification that define the quality of service offered by the associated PersistentMemoryNamespace. */ ( id SERIAL PRIMARY KEY , resource_type text[] , access_type text[] , optimize text[] , other_resource_type text[] , resource_sub_type text[] , pool_id text[] , consumer_visibility text[] , allocation_units text[] , virtual_quantity text[] , reservation text[] , limit_ text[] , weight text[] , automatic_allocation text[] , automatic_deallocation text[] , parent text[] , address text[] , mapping_behavior text[] , address_on_parent text[] , virtual_quantity_units text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.picker_stat_info /* Statistics for a PickerElement, related to pick/put successes, retries
        AND failures. */ ( id SERIAL PRIMARY KEY , pick_successes text[] , pick_failures text[] , pick_retries text[] , put_successes text[] , put_failures text[] , put_retries text[] , system_creation_class_name text[] , system_name text[] , device_creation_class_name text[] , device_id text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.power_allocation_setting_data /* PowerAllocationSettingData class is used to provide configuration
        AND capabilities information about power consumption and/or allocation for a CIM_ManagedSystemElement. */ ( id SERIAL PRIMARY KEY , power_allocation_setting_purpose text[] , other_setting_purpose text[] , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , pool_id text[] , consumer_visibility text[] , allocation_units text[] , virtual_quantity text[] , reservation text[] , limit_ text[] , weight text[] , automatic_allocation text[] , automatic_deallocation text[] , parent text[] , address text[] , mapping_behavior text[] , address_on_parent text[] , virtual_quantity_units text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.power_utilization_management_capabilities /* CIM_PowerUtilizationManagementCapabilities describes the capabilities of the associated CIM_PowerUtilizationManagementService. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.printer_element /* This class extends LogicalElement to abstract the concept of a PrinterElement that is a component (e.g., PrintMarker) of a scoping Printer (print device). This class defines common properties for key (InstanceID)
        AND for correlation of status
        AND event (alert) information
    BETWEEN CIM
        AND SNMP management interfaces (SNMPRowId). Note: A Printer shall be associated
WITH at least one of every required component (e.g., PrintMarker) via an instance of the PrinterComponent class. A Printer may be associated
WITH zero
        OR more optional components (e.g., PrintSupply) via an instance of the ConcreteComponent class. See: Model IN section 2 of Printer MIB (RFC 3805)
        AND section 3 of Finisher MIB (RFC 3806). */ ( id SERIAL PRIMARY KEY , instance_id text[] , snmp_row_id text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.processor_capabilities /* ProcessorCapabilities inherits the capabilities of EnabledLogicalElementCapabilities
        AND adds properties describing processor core
        AND hardware thread support. */ ( id SERIAL PRIMARY KEY , number_of_processor_cores text[] , number_of_hardware_threads text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.protocol_controller_masking_capabilities /* A subclass of Capabilities that defines the Masking-related capabilities of a ProtocolController. */ ( id SERIAL PRIMARY KEY , ports_per_view text[] , client_selectable_device_numbers text[] , attach_device_supported text[] , one_hardware_idper_view text[] , unique_unit_numbers_per_port text[] , privilege_denied_supported text[] , protocol_controller_requires_authorized_identity text[] , protocol_controller_supports_collections text[] , expose_paths_supported text[] , create_protocol_controller_supported text[] , maximum_map_count text[] , spc_allows_no_lus text[] , spc_allows_no_targets text[] , spc_allows_no_initiators text[] , spc_supports_default_views text[] , expose_paths_with_name_and_host_type_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.remote_resources /* A subclass of SystemSpecificCollection which collects together remote resources that are seen by a system. This class collects ALL the remote resources of a specific type for the system that can be found (via the MemberOfCollection associations). */ ( id SERIAL PRIMARY KEY , element_type text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.replica_pair_view /* The CIM_ReplicaView instance is a view that is derived
FROM a source
        AND target CIM_StorageVolume (or CIM_LogicalDisk)
        AND a CIM_StorageSynchronized association
    BETWEEN them. CIM_ElementView may associate CIM_ReplicaPairView to its underlying elements (regardless of whether
        OR NOT they are instantiated). */ ( id SERIAL PRIMARY KEY , sv_source_system_creation_class_name text[] , sv_source_system_name text[] , sv_source_creation_class_name text[] , sv_source_device_id text[] , sv_source_name text[] , sv_source_name_format text[] , sv_source_name_namespace text[] , sv_source_block_size text[] , sv_source_number_of_blocks text[] , sv_source_consumable_blocks text[] , sv_source_primordial text[] , sv_source_is_based_on_underlying_redundancy text[] , sv_source_no_single_point_of_failure text[] , sv_source_data_redundancy text[] , sv_source_package_redundancy text[] , sv_source_delta_reservation text[] , sv_source_element_name text[] , sv_source_usage text[] , sv_source_other_usage_description text[] , ss_when_synced text[] , ss_sync_maintained text[] , ss_copy_type text[] , ss_sync_state text[] , ss_copy_priority text[] , ss_sync_type text[] , ss_mode text[] , ss_progress_status text[] , sv_target_system_creation_class_name text[] , sv_target_system_name text[] , sv_target_creation_class_name text[] , sv_target_device_id text[] , sv_target_name text[] , sv_target_name_format text[] , sv_target_name_namespace text[] , sv_target_block_size text[] , sv_target_number_of_blocks text[] , sv_target_consumable_blocks text[] , sv_target_primordial text[] , sv_target_is_based_on_underlying_redundancy text[] , sv_target_no_single_point_of_failure text[] , sv_target_data_redundancy text[] , sv_target_package_redundancy text[] , sv_target_delta_reservation text[] , sv_target_element_name text[] , sv_target_usage text[] , sv_target_other_usage_description text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.replication_group /* This class represents a collection of storage objects, such AS a group of StorageVolumes. */ ( id SERIAL PRIMARY KEY , persistent text[] , delete_on_empty_element text[] , delete_on_unassociated text[] , consistent_point_in_time text[] , reserved_as text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scsi_multipath_configuration_capabilities /* A class derived
FROM CIM_Capabilities that models the capabilities of a multipath driver. Note that 'path' IN this context refers to end-to-end device paths (for example, SCSI initiator/target)
WITH no understanding of edge paths
    BETWEEN interconnect elements such AS switches. Load balancing only applies to symmetric multipath devices
        OR to the ports IN SCSITargetPortGroups IN active access state. A driver may support different algorithms for load balancing. A few common algorithms are listed. Algorithms for specific device models
        AND software vendor specific algorithms are also accommodated. An instance of this capabilities class MUST be instantiated whenever SCSIPathConfigurationService is instantiated
        AND they MUST be assocaited one to one
USING ElementCapabilities. Multiple instances of the service/acapabilities pair MAY exist if multiple multipath drivers are installed. Each LogicalDevice subclass served by the underlying multipath driver is associated to the associated Service instance via ServiceAvailableToELement. */ ( id SERIAL PRIMARY KEY , can_set_tpgaccess text[] , can_override_paths text[] , exposes_path_device_files text[] , device_name_filespace text[] , only_supports_specified_products text[] , maximum_weight text[] , autofailback_support text[] , auto_failback_enabled text[] , polling_rate_max text[] , current_polling_rate text[] , default_load_balance_type text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.scsi_target_port_group /* A class derived
FROM SystemSpecificCollection that models SCSI Target Port Groups. SCSITargetPortGroup is part of the model for devices
WITH asymmetric access to logical units - access is optimized for a subset of target ports. SCSITargetPortGroup is aggregated to SCSIProtocolEndpoints that expose a common ValueMap { 2,
         3,
         4,
         5,
         6 },
         Values { Active/Optimized,
         Active/Non-optimized,
         StandBy,
         Unavailable,
         Transitioning },
         access state for a SET of associated logical Units (modeled by various subclasses of LogicalDevice). SCSITargetPortGroups only apply to target devices
WITH asymmetric multipath access
        AND NOT to devices
WITH symmetric (or single path) access. */ ( id SERIAL PRIMARY KEY , asymmetric_ text[] , current_load_balance_type text[] , other_current_load_balance_type text[] , auto_failback_enabled text[] , polling_rate_max text[] , current_polling_rate text[] , access_state text[] , explicit_failover text[] , identifier text[] , preferred text[] , supports_lu_assignment text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.spare_configuration_capabilities /* A subclass of Capabilities that defines the Capabilities of a SpareConfigurationService. An instance of SpareConfigurationCapabilities is associated
WITH a top level ComputerSystem
USING ElementCapabilities. This allows systems that automatically manage sparing to describe their capabilities without implementing a SpareConfigurationService instance. */ ( id SERIAL PRIMARY KEY , system_configured_spares text[] , automatic_fail_over text[] , maximum_spare_storage_extents text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.statistics_capabilities /* An instance of this class defines the specific support for the metered elements
        AND methods for retrieving that statistical data
FROM a StatisticsService. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_capabilities /* A subclass of Capabilities that defines the Capabilities of a StorageService
        OR StoragePool. For example, an instance of StorageCapabilities could be associated
WITH either a StorageConfigurationService
        OR StoragePool by
USING ElementCapabilities. */ ( id SERIAL PRIMARY KEY , element_type text[] , no_single_point_of_failure text[] , no_single_point_of_failure_default text[] , data_redundancy_max text[] , data_redundancy_min text[] , data_redundancy_default text[] , package_redundancy_max text[] , package_redundancy_min text[] , package_redundancy_default text[] , delta_reservation_max text[] , delta_reservation_min text[] , delta_reservation_default text[] , extent_stripe_length_default text[] , parity_layout_default text[] , user_data_stripe_depth_default text[] , encryption text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_element_composition_capabilities /* Configuration settings for Storage Element Composition service. */ ( id SERIAL PRIMARY KEY , supports_composites text[] , max_composite_size text[] , max_composite_elements text[] , supports_composite_naming text[] , supports_representative_element text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_erasure_capabilities /* Capabilities for the storage element erasure functionality */ ( id SERIAL PRIMARY KEY , default_erasure_method text[] , can_erase_on_return_to_storage_pool text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_library_capabilities /* Capabilities of Storage Library systems. */ ( id SERIAL PRIMARY KEY , max_audit_time text[] , supported_element_name_code_set text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_pool_diagnostic_setting_data /* This class defines the additional settings to be used for storage pool diagnostic tests. */ ( id SERIAL PRIMARY KEY , depth text[] , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] , result_persistence text[] , query_timeout text[] , non_destructive text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_protection_capabilities /* A subclass of Capabilities that defines the Capabilities of a StorageProtectionService. An instance of StorageProtectionCapabilities is associated
WITH a StorageProtectionService
USING ElementCapabilities. The properties IN this class specify the capabilites of the service for protecting StorageVolumes
        AND LogicalDisks
FROM accidental
        OR intentional destruction. */ ( id SERIAL PRIMARY KEY , protection_time_granularity text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_replication_capabilities /* This subclass defines the replication capabilities of a StorageConfigurationService. Multiple instances of StorageReplicationCapabilities may be associated
WITH a StorageConfigurationService
USING ElementCapabilities. A provider should create one instance for each supported SynchronizationType. */ ( id SERIAL PRIMARY KEY , supported_synchronization_type text[] , initial_replication_state text[] , replica_host_accessibility text[] , space_limit_supported text[] , space_reservation_supported text[] , local_mirror_snapshot_supported text[] , remote_mirror_snapshot_supported text[] , incremental_deltas_supported text[] , persistent_replicas_supported text[] , bidirectional_connections_supported text[] , maximum_replicas_per_source text[] , maximum_ports_per_connection text[] , maximum_connections_per_port text[] , maximum_peer_connections text[] , maximum_local_replication_depth text[] , maximum_remote_replication_depth text[] , initial_synchronization_default text[] , replication_priority_default text[] , low_space_warning_threshold_default text[] , space_limit_warning_threshold_default text[] , remote_replication_service_point_access text[] , alternate_replication_service_point_access text[] , delta_replica_pool_access text[] , remote_buffer_element_type text[] , remote_buffer_host text[] , remote_buffer_location text[] , remote_buffer_supported text[] , use_replication_buffer_default text[] , peer_connection_protocol text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.storage_resource_load_group /* StorageResourceLoadGroup aggregates either the StoragePools
        OR the individual StorageVolumes that have the same affinity for a storage processor. The affinity of this group may change during failover
        OR failback/rebind
FROM one storage processor to another IN a storage server. StorageResourceLoadGroup has a instance of the StorageProcessorAffinity association to each instance of CIM_ComputerSystem representing a storage processor that may host the StorageResourceLoadGroup IN either a healthy
        OR failover state. Each instance of StorageResourceLoadGroup IN a storage server is also associated to each instance of TargetPortGroup IN the server by the AsymmetricAccessibility class. There is an instance of CIM_HostedCollection associating the StorageResourceLoadGroup
WITH the top-level CIM_ComputerSystem that aggregrates the storage processor ComputerSystem instances. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.storage_server_asymmetry_capabilities /* This class defines the asymmetric characteristics
        AND capabilites of a redundant storage server. The properties IN this class guide client algorithms IN the interpretation of the instances of StorageResourceLoadGroup, TargetPortGroup, StorageProcessorAffinity,
        AND AsymmetricAccessibility,
        AND also determining support for methods that affect assignment of storage resources to storage processors. */ ( id SERIAL PRIMARY KEY , storage_resource_symmetry_capability text[] , storage_resource_type text[] , storage_resource_affinity_assignable text[] , port_group_failover_behavior text[] , target_port_symmetry_capability text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_setting_with_hints /* This subclass of AdvancedStorageSetting allows a client to specify 'hint's for optimization of the volume performance. The effect of these hints is implementation dependent. */ ( id SERIAL PRIMARY KEY , data_availability_hint text[] , access_randomness_hint text[] , access_direction_hint text[] , access_latency_hint text[] , access_bandwidth_weight text[] , storage_cost_hint text[] , storage_efficiency_hint text[] , initial_storage_tier_methodology text[] , initial_storage_tiering_selection text[] , relative_performance_order_limit text[] , storage_tiering_frozen text[] , no_single_point_of_failure text[] , data_redundancy_max text[] , data_redundancy_min text[] , data_redundancy_goal text[] , package_redundancy_max text[] , package_redundancy_min text[] , package_redundancy_goal text[] , delta_reservation_max text[] , delta_reservation_min text[] , delta_reservation_goal text[] , changeable_type text[] , extent_stripe_length text[] , extent_stripe_length_min text[] , extent_stripe_length_max text[] , parity_layout text[] , user_data_stripe_depth text[] , user_data_stripe_depth_min text[] , user_data_stripe_depth_max text[] , cu_image text[] , compressed_element text[] , compression_rate text[] , data_organization text[] , disk_type text[] , emulated_device text[] , encryption text[] , form_factor_type text[] , incremental_deltas text[] , initial_synchronization text[] , interconnect_speed text[] , interconnect_type text[] , low_space_warning_threshold text[] , persistent_replica text[] , port_type text[] , rpm text[] , replication_priority text[] , space_limit text[] , space_limit_warning_threshold text[] , storage_extent_initial_usage text[] , storage_pool_initial_usage text[] , subsystem_id text[] , thin_provisioned_initial_reserve text[] , thin_provisioned_pool_type text[] , use_replication_buffer text[] , instance_id text[] , element_name text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_tier /* This class represents a collection of storage objects, such AS a collection of StorageExtents identified AS a storage tier. */ ( id SERIAL PRIMARY KEY , relative_performance_order text[] , storage_object_type text[] , technology text[] , state text[] , dynamic text[] , delete_on_empty_storage_tier text[] , percentage text[] , total_capacity text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_tier_capabilities /* A subclass of StorageCapabilities that defines the Capabilities of a storage tier. */ ( id SERIAL PRIMARY KEY , relative_performance_order_min text[] , relative_performance_order_max text[] , relative_performance_order_default text[] , element_type text[] , no_single_point_of_failure text[] , no_single_point_of_failure_default text[] , data_redundancy_max text[] , data_redundancy_min text[] , data_redundancy_default text[] , package_redundancy_max text[] , package_redundancy_min text[] , package_redundancy_default text[] , delta_reservation_max text[] , delta_reservation_min text[] , delta_reservation_default text[] , extent_stripe_length_default text[] , parity_layout_default text[] , user_data_stripe_depth_default text[] , encryption text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.system_registration_capabilities /* The capabilities of a WBEM server. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.target_masking_group /* Target Port Masking Group (ProtocolEndpoints). */ ( id SERIAL PRIMARY KEY , element_name text[] , delete_on_empty text[] , delete_when_becomes_unassociated text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.target_port_group /* TargetPortGroup aggregates the ProtocolEndpoints representing a group of target ports IN a storage server. The ProtocolEndpoints may be a subclass of CIM_ProtocolEndpoint AS appropriate for the type of target port implemented by the storage server. The target ports are aggregated because they have the same affinity for an associated storage processor for failover
        AND the same accessibility state to storage resources IN a given StorageResourceLoadGroup. The TargetPortGroup may have either a fixed affinity for a storage processor within the server
        OR an affinity that changes during failover
FROM one storage processors to another. TargetPortGroup has a instance of the StorageProcessorAffinity association to each instance of CIM_ComputerSystem representing a storage processor that may host the TargetPortGroup IN either a healthy
        OR failover state. Each instance of TargetPortGroup IN a storage server is also associated to each instance of StorageResourceLoadGroup IN the server by the AsymmetricAccessibility class. There is an instance of CIM_HostedCollection associating the StorageResourceLoadGroup
WITH the top-level CIM_ComputerSystem that aggregates the storage processor ComputerSystem instances. */ ( id SERIAL PRIMARY KEY , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.tier_service_capabilities /* A subclass of Capabilities that defines the Capabilities of a TierService to manage storage tiers. An instance of TierServiceCapabilities is associated
WITH a TierService
USING ElementCapabilities. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.vtl_statistical_data_service_capabilities /* Virtual Library System Statistical Data Capabilities */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.video_controller_resolution /* Note: The use of the CIM_VideoControllerResolutionclass has been deprecated IN lieu of CIM_VideoHeadResolution. Deprecated description: VideoControllerResolution describes the various video modes that a VideoController can support. Video modes are defined by the possible horizontal
        AND vertical resolutions, refresh rate, scan mode,
        AND number of color settings that are supported by a Controller. The actual resolutions
        AND so
    ON that are IN use are the values specified IN the VideoController object. */ ( id SERIAL PRIMARY KEY , setting_id text[] , horizontal_resolution text[] , vertical_resolution text[] , refresh_rate text[] , min_refresh_rate text[] , max_refresh_rate text[] , scan_mode text[] , number_of_colors text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.view_capabilities /* The CIM_ViewCapabilities identifies the capabilities of the implementation of view classes. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.volume_view /* The CIM_VolumeView instance is a view that is derived
FROM CIM_StorageVolume, CIM_ElementSettingData, CIM_StorageSetting, CIM_AllocatedFromStoragePool
        AND CIM_StoragePool. */ ( id SERIAL PRIMARY KEY , sv_system_creation_class_name text[] , sv_system_name text[] , sv_creation_class_name text[] , sv_device_id text[] , sv_name text[] , sv_name_format text[] , sv_name_namespace text[] , sv_block_size text[] , sv_number_of_blocks text[] , sv_consumable_blocks text[] , sv_isbased_on_underlying_redundancy text[] , sv_nosingle_point_of_failure text[] , sv_data_redundancy text[] , sv_package_redundancy text[] , sv_delta_reservation text[] , sv_usage text[] , sv_other_usage_description text[] , ss_instance_id text[] , ss_element_name text[] , ss_nosingle_point_of_failure text[] , ss_data_redundancy_min text[] , ss_data_redundancy_max text[] , ss_data_redundancy_goal text[] , ss_package_redundancy_min text[] , ss_package_redundancy_max text[] , ss_package_redundancy_goal text[] , ss_changeable_type text[] , afsp_space_consumed text[] , sp_instance_id text[] , sp_pool_id text[] , sv_element_name text[] , sv_primordial text[] , ss_extent_stripe_length text[] , ss_extent_stripe_length_min text[] , ss_extent_stripe_length_max text[] , ss_parity_layout text[] , ss_user_data_stripe_depth text[] , ss_user_data_stripe_depth_min text[] , ss_user_data_stripe_depth_max text[] , ss_storage_pool_initial_usage text[] , ss_storage_extent_initial_usage text[] , sv_iscomposite text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.wi_fi_port_capabilities /* CIM_WiFiPortCapabilities is a specialization of CIM_NetworkPortCapabilities that describes the capabilities of a WiFiPort. */ ( id SERIAL PRIMARY KEY , speed_configurable text[] , network_ids_configurable text[] , network_ids_format text[] , auto_sense_speed_configurable text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.zone_capabilities /* ZoneCapabilities exposes the capabilities for zoning of an AdminDomain. */ ( id SERIAL PRIMARY KEY , zone_name_max_len text[] , zone_name_format text[] , max_num_zone_sets text[] , max_num_zone text[] , max_num_zone_members text[] , max_num_zones_per_zone_set text[] , max_num_zone_aliases text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.zone_membership_setting_data /* ZoneMembershipSettingData provides the identification criteria for possible Zone
        AND ZoneAlias members. */ ( id SERIAL PRIMARY KEY , connectivity_member_type text[] , other_connectivity_member_type text[] , connectivity_member_id text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.abstract_indication_subscription /* CIM_IndicationSubscription describes a flow of Indications. The flow is specified by the referenced Filter,
        AND directed to the referenced destination
        OR process IN the Handler. Property values of the referenced CIM_IndicationFilter instance
        AND CIM_ListenerDestination instance MAY significantly effect the definition of the subscription. E.g., a subscription associated
WITH a "Transient" destination MAY be deleted
    WHEN the destination terminates
        OR is no longer available. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , listener_destination_id7 INTEGER REFERENCES listener_destination(id) , on_fatal_error_policy text[] , other_on_fatal_error_policy text[] , failure_trigger_time_interval text[] , subscription_state text[] , other_subscription_state text[] , time_of_last_state_change text[] , subscription_duration text[] , subscription_start_time text[] , subscription_time_remaining text[] , repeat_notification_policy text[] , other_repeat_notification_policy text[] , repeat_notification_interval text[] , repeat_notification_gap text[] , repeat_notification_count text[] , subscription_info text[] , alert_on_state_change text[] , last_indication_identifier text[] , last_indication_production_date_time text[] ); 
        CREATE TABLE public.alert_indication /* A concrete superclass for CIM Alert notifications. An AlertIndication is a specialized type of CIM_Indication that contains information about the severity, cause, recommended actions
        AND other data of a real world event. This event
        AND its data may
        OR may NOT be modeled IN the CIM class hierarchy. */ ( id SERIAL PRIMARY KEY , description text[] , alerting_managed_element text[] , alerting_element_format text[] , other_alerting_element_format text[] , alert_type text[] , other_alert_type text[] , perceived_severity text[] , probable_cause text[] , probable_cause_description text[] , trending text[] , event_id text[] , event_time text[] , system_creation_class_name text[] , system_name text[] , provider_name text[] , message text[] , message_id text[] , owning_entity text[] , indication_identifier text[] , indication_time text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.alert_inst_indication /* A subclass of CIM_AlertIndication that embeds a CIM_Inst Indication. It is used
    WHEN adding AlertIndication data to a LifeCycle Indication. */ ( id SERIAL PRIMARY KEY , alert_type text[] , ind_object text[] , description text[] , alerting_managed_element text[] , alerting_element_format text[] , other_alerting_element_format text[] , other_alert_type text[] , perceived_severity text[] , probable_cause text[] , probable_cause_description text[] , trending text[] , event_id text[] , event_time text[] , system_creation_class_name text[] , system_name text[] , provider_name text[] , message text[] , message_id text[] , owning_entity text[] , indication_identifier text[] , indication_time text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
    CREATE TABLE public.class_indication /* CIM_ClassIndication is an abstract superclass describing changes IN the definition of the schema. Subclasses represent specific types of change notifications, such AS class creation, deletion
        AND modification. */ ( id SERIAL PRIMARY KEY , class_definition text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.class_modification /* CIM_ClassModification notifies
    WHEN a class definition IN the schema is modified. */ ( id SERIAL PRIMARY KEY , previous_class_definition text[] , class_definition text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
    CREATE TABLE public.filter_collection /* A FilterCollection is a subclass of CIM_Collection which aggregates instances of CIM_IndicationFilter. */ ( id SERIAL PRIMARY KEY , instance_id text[] , collection_name text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.filter_collection_subscription /* CIM_FilterCollectionSubscription associates the CIM_FilterCollection
WITH a CIM_ListenerDestionation. */ ( id SERIAL PRIMARY KEY , filter_collection_id5 INTEGER REFERENCES filter_collection(id) , listener_destination_id6 INTEGER REFERENCES listener_destination(id) , on_fatal_error_policy text[] , other_on_fatal_error_policy text[] , failure_trigger_time_interval text[] , subscription_state text[] , other_subscription_state text[] , time_of_last_state_change text[] , subscription_duration text[] , subscription_start_time text[] , subscription_time_remaining text[] , repeat_notification_policy text[] , other_repeat_notification_policy text[] , repeat_notification_interval text[] , repeat_notification_gap text[] , repeat_notification_count text[] , subscription_info text[] , alert_on_state_change text[] , last_indication_identifier text[] , last_indication_production_date_time text[] ); 
CREATE TABLE public.indication_handler /* CIM_IndicationHandler is an abstract superclass describing how an Indication is to be processd/delivered/'handled'. This may define a destination
        AND protocol for delivering Indications,
        OR it may define a process to invoke. This class is derived
FROM CIM_ManagedElement to allow modeling the dependency of the Handler
    ON a specific service. */ ( id SERIAL PRIMARY KEY , owner text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , persistence_type text[] , other_persistence_type text[] , destination text[] , other_protocol text[] , protocol text[] , password text[] , username text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.indication_handler_cimxml /* CIM_IndicationHandlerCIMXML describes the destination for Indications to be delivered via CIM-XML. */ ( id SERIAL PRIMARY KEY , destination text[] , owner text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , persistence_type text[] , other_persistence_type text[] , other_protocol text[] , protocol text[] , password text[] , username text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.indication_service_capabilities /* IndicationServiceCapabilities describes whether properties
    ON the Indication Service can be modified by a client. */ ( id SERIAL PRIMARY KEY , filter_creation_enabled_is_settable text[] , delivery_retry_attempts_is_settable text[] , delivery_retry_interval_is_settable text[] , subscription_removal_action_is_settable text[] , subscription_removal_time_interval_is_settable text[] , max_listener_destinations text[] , max_active_subscriptions text[] , subscriptions_persisted text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.indication_subscription /* CIM_IndicationSubscription describes a flow of Indications. The flow is specified by the referenced Filter,
        AND directed to the referenced destination
        OR process IN the Handler. Property values of the referenced CIM_IndicationFilter instance
        AND CIM_ListenerDestination instance MAY significantly effect the definition of the subscription. E.g., a subscription associated
WITH a "Transient" destination MAY be deleted
    WHEN the destination terminates
        OR is no longer available. */ ( id SERIAL PRIMARY KEY , indication_filter_id5 INTEGER REFERENCES indication_filter(id) , listener_destination_id6 INTEGER REFERENCES listener_destination(id) , on_fatal_error_policy text[] , other_on_fatal_error_policy text[] , failure_trigger_time_interval text[] , subscription_state text[] , other_subscription_state text[] , time_of_last_state_change text[] , subscription_duration text[] , subscription_start_time text[] , subscription_time_remaining text[] , repeat_notification_policy text[] , other_repeat_notification_policy text[] , repeat_notification_interval text[] , repeat_notification_gap text[] , repeat_notification_count text[] , subscription_info text[] , alert_on_state_change text[] , last_indication_identifier text[] , last_indication_production_date_time text[] ); 
        CREATE TABLE public.inst_creation /* CIM_InstCreation notifies
    WHEN a new instance is created. */ ( id SERIAL PRIMARY KEY , source_instance text[] , source_instance_model_path text[] , source_instance_host text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
    CREATE TABLE public.inst_deletion /* CIM_InstDeletion notifies
    WHEN an existing instance is deleted. */ ( id SERIAL PRIMARY KEY , source_instance text[] , source_instance_model_path text[] , source_instance_host text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
    CREATE TABLE public.threshold_indication /* A subclass of CIM_AlertIndications carrying additional threshold information related to the notification. This subclass is used
    WHEN one of the ProbableCauses is SET to 53,
         "Threshold Crossed". */ ( id SERIAL PRIMARY KEY ,
         threshold_identifier text[] ,
         threshold_value text[] ,
         observed_value text[] ,
         description text[] ,
         alerting_managed_element text[] ,
         alerting_element_format text[] ,
         other_alerting_element_format text[] ,
         alert_type text[] ,
         other_alert_type text[] ,
         perceived_severity text[] ,
         probable_cause text[] ,
         probable_cause_description text[] ,
         trending text[] ,
         event_id text[] ,
         event_time text[] ,
         system_creation_class_name text[] ,
         system_name text[] ,
         provider_name text[] ,
         message text[] ,
         message_id text[] ,
         owning_entity text[] ,
         indication_identifier text[] ,
         indication_time text[] ,
         other_severity text[] ,
         indication_filter_name text[] ,
         sequence_context text[] ,
         sequence_number text[] ); 
         CREATE TABLE public.sa_action /* SAAction is the base class for the various types of key exchange
        OR IPsec actions. It is abstract
        AND used to categorize the different types of actions of SARules. */ ( id SERIAL PRIMARY KEY , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.sa_negotiation_action /* SANegotiationAction is the base class for negotiated SAs. It is abstract, specifying the common parameters that control the IPsec phase 1
        AND phase 2 negotiations. */ ( id SERIAL PRIMARY KEY , min_lifetime_seconds text[] , idle_duration_seconds text[] , min_lifetime_kilobytes text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.sa_proposal /* SAProposal is a base class defining the common properties of,
        AND anchoring common associations for, IPsec phase 1
        AND phase 2 proposals. It is defined AS a kind of ScopedSettingData (scoped by a ComputerSystem
        OR AdminDomain), since its subclasses define sets of IPsec properties that MUST be applied together, if negotiated. This subclassing is different than that defined IN IETF's IPSP Policy draft - where it is subclassed from Policy. The definition as SettingData is more consistent with the application of the properties as a set, to the negotiated Security Association. To indicate that 'this' proposaltransform is negotiated for a Security Association, use the ElementSettingData to associate the proposal and the SA. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.sa_static_action /* SAStaticAction is the base class for both key exchange as well as IPsec actions that require no negotiation. It is a concrete class that can be aggregated with other subclasses of PolicyAction (such as NetworkPacketAction) into a PolicyRule, to describe how packets are handled throughout the lifetime of the Security Association. */ ( id SERIAL PRIMARY KEY , lifetime_seconds text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.query_capabilities /* CIM_QueryCapabilities is deprecated. See CIM_GenericOperationCapabilitiesStructure. This class defines the extent of the support of a query language. Query languages may be used in support of the query operation, as defined in the OpenQueryInstances CIM Operation from DSP0223, or in the filtering of indications. An instance of this class associated to the CIM_ObjectManager instance denotes that the WBEM Infrastructure itself supports the query operation. An instance of this class associated to a CIM_Provider instance denotes that the provider has less or more capabilities than the Object Manager for processing queries. If the provider has different support for query languages than the object manager then, instances of this class shall be associated to both the object manager and the provider. An instance of this class associated to the CIM_IndicationService denotes what query languages can be used to formulate an indication filter. The possible query languages are CQL and XPath, as denoted by the CQLFeatures and XPathFeatures respectively. A value of null in one of these properties indicates that the related query language is not supported. */ ( id SERIAL PRIMARY KEY , x_path_features text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.referenced_specification /* Associates two instances of RegisteredSpecification where one of the represented specifications references the other. */ ( id SERIAL PRIMARY KEY , registered_specification_id5 INTEGER REFERENCES registered_specification(id) , registered_specification_id6 INTEGER REFERENCES registered_specification(id) ); 
        CREATE TABLE public.registered_profile /* A RegisteredProfile describes a set of CIM Schema classes with required properties and/or methods, necessary to manage a real-world entity or to support a usage scenario, in an interoperable fashion. RegisteredProfiles can be defined by the DMTF or other standards organizations. Note that this class should not be confused with CIM_Profile, which collects SettingData instances, to be applied as a 'configuration profile' for an element. A RegisteredProfile is a named 'standard' for CIM-based management of a particular System, subsystem, Service or other entity, for a specified set of uses. It is a complete, standalone definition, as opposed to the subclass RegisteredSubProfile, which requires a scoping profile for context. The uses for a RegisteredProfile or SubProfile MUST be specified in the document that defines the profile. Examples of Profiles are to manage various aspects of an Operating System, Storage Array, or Database. The name of the profile is defined and scoped by its authoring organization. */ ( id SERIAL PRIMARY KEY , specification_type text[] , instance_id text[] , other_specification_type text[] , registered_organization text[] , other_registered_organization text[] , registered_name text[] , registered_version text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.registered_sub_profile /* A RegisteredSubProfile subclasses RegisteredProfile to indicate that a scoping profile is required to provide context. The latter is specified by the mandatory association, SubProfileRequiresProfile. */ ( id SERIAL PRIMARY KEY , specification_type text[] , instance_id text[] , other_specification_type text[] , registered_organization text[] , other_registered_organization text[] , registered_name text[] , registered_version text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.wbem_server_capabilities /* WBEMServerCapabilities describes the capabilities supported for managing the assicated WBEM Server. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.aggregation_metric_definition /* CIM_AggregationMetricDefinition represents the definitional aspects of a metric that is derived from another metric value. The CIM_AggregationMetricDefinition should be associated with the CIM_ManagedElement(s) to which it applies. */ ( id SERIAL PRIMARY KEY , change_type text[] , simple_function text[] , name text[] , data_type text[] , calculable text[] , units text[] , is_continuous text[] , time_scope text[] , gathering_type text[] , programmatic_units text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.aggregation_metric_value /* Each CIM_AggregationMetricValue object represents the instance value of a metric defined by an instance of CIM_AggregationMetricDefinition. The properties inherited from CIM_BaseMetricValue provide the actual metric value. The properties introduced in CIM_AggregationMetricValue provide information about the interval over which the aggregation function was applied. */ ( id SERIAL PRIMARY KEY , aggregation_time_stamp text[] , aggregation_duration text[] , instance_id text[] , metric_definition_id text[] , measured_element_name text[] , time_stamp text[] , duration text[] , metric_value text[] , breakdown_dimension text[] , breakdown_value text[] , volatile text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_element_performs_uo_w /* This association identifies a specific execution of a UnitOf Work with the specific LogicalElement that is performing/ has performed it. Where the LogicalElementUnitOfWorkDef association describes what an Element can do, this relationship describes what a particular Element is doing or has done. */ ( id SERIAL PRIMARY KEY , logical_element_id5 INTEGER REFERENCES logical_element(id) , unit_of_work_id6 INTEGER REFERENCES unit_of_work(id) ); 
        CREATE TABLE public.metric_def_for_me /* This association ties a CIM_BaseMetricDefinition to a CIM_ManagedElement to define metrics for the latter. The metrics definition is given context by the ManagedElement, which is why the definition is dependent on the element. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , base_metric_definition_id6 INTEGER REFERENCES base_metric_definition(id) , metric_collection_enabled text[] ); 
        CREATE TABLE public.metric_for_me /* This association links a ManagedElement to the metric values being maintained for it. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , base_metric_value_id6 INTEGER REFERENCES base_metric_value(id) ); 
        CREATE TABLE public.metric_instance /* Weak association of metric value objects with their metric definition. This association ties an instance of CIM_BaseMetricValue to its CIM_BaseMetricDefinition; it is weak because the existence of a CIM_BaseMetricValue depends on the existence of its associated CIM_BaseMetricDefinition: An instance of CIM_BaseMetricValue must not exist without being associated to its corresponding CIM_BaseMetricDefinition. */ ( id SERIAL PRIMARY KEY , base_metric_definition_id5 INTEGER REFERENCES base_metric_definition(id) , base_metric_value_id6 INTEGER REFERENCES base_metric_value(id) ); 
        CREATE TABLE public.metric_service_capabilities /* MetricServiceCapabilities describes the capabilities of the associated CIM_BaseMetricService. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.sub_uo_w /* Similar to the SubUoWDef association (which describes the relationship between definitional UnitsOfWork), this association identifies the executional UnitOfWork Dependencies. It associates executing/executed UnitsOfWork with their parent Units. In most cases, the SubUoW reflects the execution side of the relationship defined in SubUoWDef. However, there may be cases where the SubUoWDef is not defined, but for a particular UnitOfWork, the SubUoW relationship is valid. Therefore, it is not a requirement (but it is desirable) that there be a corresponding SubUoWDef for each instance of SubUoW. */ ( id SERIAL PRIMARY KEY , unit_of_work_id5 INTEGER REFERENCES unit_of_work(id) , unit_of_work_id6 INTEGER REFERENCES unit_of_work(id) ); 
        CREATE TABLE public.unit_of_work_definition /* A LogicalElement that describes units of work (e.g. transactions). This class represents the definitional components of a unit of work, and not the unit itself. */ ( id SERIAL PRIMARY KEY , name text[] , context text[] , trace_level_type_id text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.uo_wdef_trace_level_type /* Refers to the refinement of the UnitOfWorkDefinition: the trace level type. It is not required that a UnitOfWork be associated to a TraceLevelType. But if it is associated, only one Type can be specified for the Definition. In contrast, TraceLevelTypes can be reused for multiple Definitions. */ ( id SERIAL PRIMARY KEY , trace_level_type_id5 INTEGER REFERENCES trace_level_type(id) , unit_of_work_definition_id6 INTEGER REFERENCES unit_of_work_definition(id) ); 
        CREATE TABLE public.uo_wmetric /* This association ties a MetricDefinition to an instance of a UnitOfWork. Its primary purpose is to specify the value of the Metric for the instance of UnitOfWork. It is defined as a Dependency since the Metric value relies on the specific UnitOfWork for context. */ ( id SERIAL PRIMARY KEY , unit_of_work_id5 INTEGER REFERENCES unit_of_work(id) , metric_definition_id6 INTEGER REFERENCES metric_definition(id) , value text[] ); 
        CREATE TABLE public.uo_wmetric_definition /* An association that describes the Metrics related to a UnitOfWorkDefinition. This is a Dependency relationship since the MetricDefinition relies on the UnitOfWorkDefinition for context. At least one context must be defined for a MetricDefinition, hence the Min (1) qualifier is placed on the UnitOfWorkDefinition reference. */ ( id SERIAL PRIMARY KEY , unit_of_work_definition_id5 INTEGER REFERENCES unit_of_work_definition(id) , metric_definition_id6 INTEGER REFERENCES metric_definition(id) ); 
        CREATE TABLE public.administrative_distance /* Information in this class affects the choice of one protocol over another, when two protocols learn the same route. Properties define the preference of a protocol, called its distance. The lower the distance, the higher the preference for that protocol. This class affects ALL routes and contains the default distances. Specific administrative distances relative to an individual route and Forwarding Service are defined in the NextHopForwardedByService association, its AdminDistance property. AdministrativeDistance, being a global object, is weak to the AdminDomain that contains it. Hence, the AdminDomain keys are propagated to this class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , direct_connect text[] , static text[] , ebgp text[] , eigrp_internal text[] , igrp text[] , ospf text[] , isis text[] , rip text[] , egp text[] , eigrp_external text[] , ibgp text[] , bgp_local text[] , unknown text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.allocation_scheduling_element /* This class is a subclass of the abstract class SchedulingElement. It introduces five new properties to support bandwidth-based scheduling. As is the case with all subclasses of SchedulingElement, the input associated with an instance of AllocationSchedulingElement is of one of two types: either a queue, or another scheduler. */ ( id SERIAL PRIMARY KEY , allocation_units text[] , bandwidth_allocation text[] , burst_allocation text[] , can_share text[] , work_flexible text[] , instance_id text[] , work_conserving text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_attributes /* This class defines the BGP Attributes, that can be used to affect routing decisions. BGPAttributes are specific to a given AutonomousSystem that contains it. Hence, the keys of the AutonomousSystem are propagated to this class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , version text[] , local_preference text[] , as_path text[] , as_set text[] , next_hop text[] , next_hop_self text[] , med text[] , bgp_community_value text[] , atomic_aggregate text[] , aggregator text[] , origin text[] , originator_id text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_cluster /* The BGP speakers in an AS are required to be fully meshed. This can lead to a huge number of TCP connections per router. One way to reduce the peering requirements is to use a route reflector. This is based on specifying one or more routers to act as focal points for IBGP sessions. The route reflector as a whole is called a cluster. It is logically divided into three types of routers: reflectors, clients of the route reflector(s), and non-clients of the route reflector. There can be more than one route reflector in a cluster, and there can be more than one cluster in an AS. */ ( id SERIAL PRIMARY KEY , cluster_id text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_path_attributes /* This class defines the per-path information used to process specific BGP attribute information, as defined in the bgp4PathAttrTable of RFC 1657. */ ( id SERIAL PRIMARY KEY , as_numbers text[] , path_attr_next_hop text[] , path_attr_origin text[] , path_attr_multi_exit_disc text[] , path_attr_local_pref text[] , path_attr_atomic_aggregate text[] , path_attr_aggregator_as text[] , path_attr_aggregator_addr text[] , path_attr_calc_local_pref text[] , path_attr_best text[] , path_attr_unknown_number text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_peer_group /* A BGP Peer Group is a set of BGP neighbors that share the same update policies. This enables an administrator to assign policies to the peer group, instead of individually. This enables the routers in the Peer Group to optimize UPDATE messages. Consequently, Peer Groups have a set of restrictions that must be followed in order to work correctly with external BGP peers. Otherwise, loss of routing information could occur. A BGPPeerGroup is weak to the AutonomousSystem that contains it. Therefore, the keys from System must be propagated to it. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , connect_retry_interval text[] , hold_time_configured text[] , keep_alive_configured text[] , min_asorigination_interval text[] , min_route_advertisement_interval text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_route_map /* A route map is used to control and modify routing information as well as to define when a route is redistributed between routing domains. Route maps are placed in router configuration files, and several instances of the same route map may be used to implement different actions. RouteMaps MAY use FilterLists to identify the route. A BGPRouteMap is specific to a given AutonomousSystem that contains it. Hence, the keys of the AutonomousSystem are propagated to this class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , direction text[] , action text[] , match_condition_type text[] , other_match_condition_type text[] , set_metric_type text[] , set_metric_value text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_statistics /* This class contains statistical information for a Service's sessions. It is deprecated since the statistics are defined IN the BGP4 MIB at the level of individual peers/ endpoints. */ ( id SERIAL PRIMARY KEY , in_updates text[] , out_updates text[] , in_total_messages text[] , out_total_messages text[] , fsm_established_transitions text[] , fsm_established_time text[] , in_update_elapsed_time text[] , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.buffer_pool /* This class represents the use of buffers by a Queuing Service. The existence
        AND management of individual buffers will be modeled IN a future release. At the current level of abstraction, modeling the existence of the BufferPool is necessary. Long term, it is NOT sufficient. IN implementations
WHERE there are multiple buffer sizes,
         an instance of BufferPool should be defined for each SET of buffers
WITH identical
        OR similar sizes. These instances of buffer pools can THEN
    be grouped together
USING the CollectedBuffersPool association. Note that this class is derived
FROM CollectionOfMSEs,
        AND not
FROM Forwarding
        OR ConditioningService. BufferPool is only a collection of storage,
        AND is NOT a Service. */ ( id SERIAL PRIMARY KEY , collection_id text[] , creation_class_name text[] , name text[] , buffer_size text[] , size_of_buffers text[] , total_buffers text[] , available_buffers text[] , shared_buffers text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.collected_buffer_pool /* CIM_CollectedBufferPool is an aggregation association representing that a Pool may itself be contained IN a 'higher level' Pool. */ ( id SERIAL PRIMARY KEY ,
         buffer_pool_id6 INTEGER REFERENCES buffer_pool(id) ,
         buffer_pool_id7 INTEGER REFERENCES buffer_pool(id) ); 
         CREATE TABLE public.connectivity_collection /* A ConnectivityCollection groups together a SET of ProtocolEndpoints of the same 'type' (i.e., class) which are able to communicate
WITH each other. It may also group related Systems, users
        OR other ManagedElements. A ConnectivityCollection represents the ability to send and/or receive data
    OVER a SET of ProtocolEndpoints. The collection is defined IN the context of an AdminDomain
        OR scoping ComputerSystem. This is mandated by the Hosted Collection association
    ON the SystemSpecificCollection superclass. Note that the entities aggregated into the Collection are specified
USING the association, MemberOfCollection. */ ( id SERIAL PRIMARY KEY , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.dhcp_capabilities /* A class derived
FROM EnabledLogicalElementCapabilities representing the capabilities of a DHCP client. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.dhcp_setting_data /* This class represents the desired configuration settings for the DHCPProtocolEndpoint (i.e. DHCP client configuration. */ ( id SERIAL PRIMARY KEY , address_origin text[] , requested_ipv4_address text[] , requested_lease_time text[] , client_identifier text[] , vendor_class_identifier text[] , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.dns_general_setting_data /* The DNSGeneralSettingData class represents the system wide configuration options for the DNS client. Therefore, these configuration parameters are scoped to a computer system
        AND are applicable to ALL of the network interfaces of the scoping system. */ ( id SERIAL PRIMARY KEY , address_origin text[] , append_primary_suffixes text[] , append_parent_suffixes text[] , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.dns_setting_data /* DNSSettingData defines the DNSconfiguration settings for a single IP network connection.
WITH the exception of the the DNSServerAddresses
        AND the hostname IN use, the configuration of a DNSProtocolEndpoint is indicated by the properties of an associated instance of DNSSettingData. */ ( id SERIAL PRIMARY KEY , address_origin text[] , domain_name text[] , requested_hostname text[] , use_suffix_when_registering text[] , register_this_connections_address text[] , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.dynamic_forwarding_entry /* A DynamicForwardingEntry represents an entry IN the forwarding (filtering) database associated
WITH the TransparentBridgingService. The entry is Weak to the Service AS specified by TransparentBridgingDynamicForwarding. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , mac_address text[] , dynamic_status text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.extended_static_ipassignment_setting_data /* CIM_ExtendedStaticIPAssignmentSettingData defines a IP configuration which could be statically assigned to a Network Interface / LANEndpoint. */ ( id SERIAL PRIMARY KEY , address_origin text[] , protocol_iftype text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.filter_entry_base /* A FilterList aggregates instances of (subclasses of) FilterEntryBase via the aggregation EntriesInFilterList. The filter entries are always ANDed together
    WHEN grouped by the FilterList. Note that it is possible to aggregate different types of filters into a single FilterList - for example, packet header filters (represented by the IpHeadersFilter class)
        AND IPsec security filters. A FilterList is weak to the network device (e.g.,
         the ComputerSystem) that contains it. Hence,
         the ComputerSystem keys are propagated to this class. */ ( id SERIAL PRIMARY KEY ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         name text[] ,
         is_negated text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.filter_list /* A FilterList is used by network devices to identify routes by aggregating a SET of FilterEntries into a unit,
         called a FilterList. FilterLists can also be used to accept
        OR deny routing updates. A FilterList is weak to the network device (i.e., the ComputerSystem) that contains it. Hence, the ComputerSystem keys are propagated to this class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , direction text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.filter_lists_in_bgproute_map /* RouteMaps do NOT have to use FilterLists, but if they do, this association defines which FilterList is used by a particular RouteMap. */ ( id SERIAL PRIMARY KEY , filter_list_id5 INTEGER REFERENCES filter_list(id) , bgp_route_map_id6 INTEGER REFERENCES bgp_route_map(id) ); 
        CREATE TABLE public.hdr8021_filter /* 8021Filter allows 802.1.source
        AND destination MAC addresses, AS well AS the 802.1 protocol ID, priority,
        AND VLAN identifier fields, to be expressed IN a single object to classify
        AND identify traffic. */ ( id SERIAL PRIMARY KEY , hdr_protocol_id8021 text[] , hdr_priority_value8021 text[] , hdr_vlanid8021 text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , is_negated text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ieee8021x_capabilities /* CIM_IEEE8021xCapabilities describes the IEEE 802.1x security capabilities of a layer 2 ProtocolEndpoint. */ ( id SERIAL PRIMARY KEY , roaming_supported text[] , fast_roaming_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.ip_address_range /* IPAddressRange represents a grouping of specific addresses,
        AND provides additional semantics for this group if appropriate. The class is deprecated IN lieu of the concrete class RangeOfIPAddresses since there is sufficient information for the class to be instantiated. IN addition, an address range should be defined IN the context of a System (for example, a network element
        OR an admin domain). These semantics are incorporated IN the RangeOfIPAddresses class. */ ( id SERIAL PRIMARY KEY , start_address text[] , end_address text[] , type_of_address text[] , allocation_region text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ip_connectivity_subnet /* An IPConnectivitySubnet represents a group of related IPProtocolEndpoints that can communicate
WITH each other, AS members of a subnet. The class describes the characteristics of the subnet. */ ( id SERIAL PRIMARY KEY , subnet_number text[] , subnet_mask text[] , prefix_length text[] , address_type text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ip_headers_filter /* IPHeadersFilter contains the most commonly required properties for performing filtering
    ON IP, TCP
        OR UDP headers. Properties NOT present IN an instance of the IPHeadersFilter are treated AS 'all values'. */ ( id SERIAL PRIMARY KEY , hdr_ipversion text[] , hdr_protocol_id text[] , hdr_src_port_start text[] , hdr_src_port_end text[] , hdr_dest_port_start text[] , hdr_dest_port_end text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , is_negated text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ipso_filter_entry /* An IPSOFilterEntry is used to match traffic based
    ON the IP Security Options header values (ClassificationLevel
        AND ProtectionAuthority) AS defined IN RFC1108. This type of FilterEntry is used to adjust the IPsec encryption level according to the IPSO classification of the traffic (e.g., secret, confidential, restricted, etc.). */ ( id SERIAL PRIMARY KEY , match_condition_type text[] , classification_level text[] , other_classification_level text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , is_negated text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ipx_connectivity_network /* A network
        OR subnet that uses the IPX protocol. */ ( id SERIAL PRIMARY KEY , network_number text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.lan_connectivity_segment /* A collection of LAN Endpoints of a particular type (i.e., Ethernet
        OR Token Ring), that are able to intercommunicate without the assistance of bridging
        OR routing services. */ ( id SERIAL PRIMARY KEY ,
         lanid text[] ,
         connectivity_type text[] ,
         other_type_description text[] ,
         connectivity_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.logical_network /* A LogicalNetwork groups together a SET of ProtocolEndpoints of a given type which are able to communicate
WITH each other directly. It is used for describing the characteristics of the grouping and/or its associated medium. A LogicalNetwork represents the ability to send and/or receive data
    OVER a network. This class is deprecated IN lieu of ConnectivityCollection. The latter better defines that a LogicalNetwork 'collects' ProtocolEndpoints
        AND other related entities,
        AND is hosted within an AdminDomain. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , network_type text[] , other_type_description text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.named_address_collection /* A NamedAddressCollection groups ProtocolEndpoints/addresses
        AND other network identifiers for the purposes of assigning a single name (i.e., an alias). It is a subclass of SystemSpecificCollection to force the definition of the 'named collection' IN the context of a System (for example, either a ComputerSystem
        OR an AdminDomain hosting a naming alias). */ ( id SERIAL PRIMARY KEY , collection_alias text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.network_vlan /* An instance of NetworkVLAN represents a collection of VLANSwitchEndpoints and/or VLANEndstationEndpoints which are members of the VLAN. There SHOULD be an instance of NetworkVLAN for every VLAN available IN a switch. For example, IN a switch
WITH port-based VLANs, if there are 16 VLANs to which ports can be assigned (VLAN 1 through VLAN 16), there SHOULD be an instance of NetworkVLAN for each of VLAN 1 through VLAN 16. */ ( id SERIAL PRIMARY KEY , vlan_id text[] , sa_identifier text[] , transmission_size text[] , type_of_media text[] , other_type_description text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.next_hop_iproute /* NextHopIPRoute specifies routing IN an IP network. */ ( id SERIAL PRIMARY KEY , route_derivation text[] , other_derivation text[] , destination_mask text[] , prefix_length text[] , address_type text[] , instance_id text[] , destination_address text[] , admin_distance text[] , route_metric text[] , is_static text[] , type_of_route text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.next_hop_routing /* NextHopRouting relates a destination address to the address
        OR interface through which the remote address may be reached. An instance of this class can represent either static
        OR dynamic routing,
        AND may represent a routing table entry (but it is NOT required that ALL NextHopRoutes be IN a routing table). Static routes are distinguished by setting the IsStatic boolean property to TRUE. Subclasses of NextHopRouting provide specific protocol
        AND Key information. NextHopRoutes are dependent
    ON at least one ForwardingService to execute them. This is conveyed by the CIM_NextHopForwardedByService association. NextHopRouting is deprecated IN lieu of the more general, concrete NextHopRoute class. NextHopRoute allows the definition of BOTH a next hop address
        AND an interface for transmission of the traffic. Also, it does NOT mandate the instantiation of a ForwardingService class. The latter is NOT needed if the sole purpose of the instance is to specify a 'desired/configured' route. This is simply a specification of the next hop. */ ( id SERIAL PRIMARY KEY , destination_address text[] , destination_mask text[] , next_hop text[] , is_static text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ospf_area_configuration /* Each OSPF router has an association to one
        OR more OSPF areas. Into these areas, a router advertises summaries filtered by specific address ranges. This would natively be modeled AS a ternary association (router/OSPFService to OSPFArea to RangeOfIPAddresses), which is problematic IN some implementations. To get around this issue, the OSPFAreaConfiguration class is defined to act AS a focal point to bring together the router (indicated AS a ComputerSystem
WITH an instance of OSPFService, associated to the AreaConfiguration
USING OSPFServiceConfiguration), the area (indicated AS an OSPFArea, associated to the AreaConfiguration
USING AreaOfConfiguration)
        AND the address ranges for advertising (indicated AS instances of RangeOfIPAddresses, associated to the AreaConfiguration
USING RangesOfConfiguration). There would be an instance of OSPFAreaConfiguration for each connected area of a router/OSPFService.
    WHEN network administrators want to control the advertisements of OSPF routers by filters, they first define the relevant ranges. IN order for a router to handle a range, an instance of RangeOfIPAddresses MUST be associated to the relevant OSPFAreaConfiguration (using the relationship, RangesOf Configuration). The association
    BETWEEN the range
        AND area configuration contains a property defining the handling (EnableAdvertise) to allow
        OR disallow advertisements IN the range. Notes: - Because RangeOfIPAddresses is scoped by a System (via the HostedCollection association), an instance of RangeOfIPAddresses would be associated to an OSPFArea, satisfying this semantic. - This class is inherited
FROM LogicalElement, because a suitable subclass 'lower' IN the inheritance hiearchy does NOT exist. */ ( id SERIAL PRIMARY KEY , instance_id text[] , stub_default_cost text[] , stub_metric_type text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ospf_link /* This class is used to represent OSPF connectivity
    BETWEEN two
        OR more OSPF protocol endpoints. */ ( id SERIAL PRIMARY KEY , link_type text[] , hello_interval text[] , router_dead_interval text[] , multicast_forwarding text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ospf_service_capabilities /* The OSPFServiceCapabilities class represents the capabilities of an OSPF service. */ ( id SERIAL PRIMARY KEY , support_nssa text[] , support_on_demand text[] , support_mospf text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.peer_idpayload_filter_entry /* PeerIDPayloadFilterEntry defines filters used to match the Identification Type field IN the ID Payload of the IKE protocol exchange. It permits the specification of ID values such AS "*@example.com"
        OR "192.0.2.0/24". */ ( id SERIAL PRIMARY KEY , match_identity_type text[] , match_identity_value text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , is_negated text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.preamble_filter /* PreambleFilter allows the classification of packets
USING traffic-conditioning results (where the results are determined by a PreambleMarkerService
        AND stored IN a 'packet preamble'). This permits information about the treatment that a packet receives
    ON an ingress interface to be communicated along
WITH the packet to the egress interface. An instance of PreambleFilter selects packets based
    ON a two-part string (type
        AND value pair) identifying a specific entry IN the preamble. The logic for this match is 'at least one.' That is, a packet
WITH multiple entries/results IN its preamble matches a filter if at least one of these matches the filter. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , is_negated text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.priority_scheduling_element /* This class is a subclass of the abstract class SchedulingElement. It indicates that a scheduler is taking packets
FROM a SET of inputs
USING the priority scheduling discipline. AS is the
    CASE
WITH ALL subclasses of SchedulingElement, the input associated
WITH an instance of PrioritySchedulingElement is of one of two types: either a queue,
        OR another scheduler. The Priority property represents the priority for an input, relative to the priorities of ALL the other inputs to which the scheduler (that aggregates this PrioritySchedulingElement) is associated. Inputs to which the scheduler is related via other scheduling disciplines do NOT figure IN this prioritization. Because scheduling of this type is always work conserving, the inherited boolean property, WorkConserving, is restricted to TRUE IN this class. */ ( id SERIAL PRIMARY KEY , work_conserving text[] , priority text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.protocol_service_capabilities /* A subclass of EnabledLogicalElementCapabilities that defines the capabilities of a ProtocolService. An instance of CIM_ProtocolServiceCapabilities is associated
WITH a ProtocolService
USING ElementCapabilities. */ ( id SERIAL PRIMARY KEY , max_connections text[] , max_listening_ports text[] , listening_port_management_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.range_of_ipaddresses /* The class RangeOfIPAddresses represents an implicit grouping (or 'pool') of IP addresses specified by the properties, Start
        AND EndAddress. It is defined AS scoped/contained by a system such AS an individual network element
        OR an admin domain. */ ( id SERIAL PRIMARY KEY , start_address text[] , end_address text[] , address_type text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ranges_of_configuration /* This association connects address ranges to the OSPF area configuration.
    WHEN network administrators want to control the advertisements of OSPF routers by filters, they first define the relevant ranges. IN order for a router to handle a range, an instance of RangeOfIPAddresses MUST be associated to the router's OSPFAreaConfiguration, using this relationship. The association between the range and area configuration contains a property (EnableAdvertise) defining the handling - to allow or disallow advertismenets in the range. */ ( id SERIAL PRIMARY KEY , range_of_ipaddresses_id5 INTEGER REFERENCES range_of_ipaddresses(id) , ospf_area_configuration_id6 INTEGER REFERENCES ospf_area_configuration(id) , enable_advertise text[] ); 
    CREATE TABLE public.redirection_service_capabilities /* RedirectionServiceCapabilities describes the capabilities of the associated RedirectionService. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.routing_policy /* This class is used to implement routing policies. It aggregates a set of FilterLists, along with other appropriate constructs, into a unit. One of the most important uses of this class is to change the routing policy by changing values of various attributes in a consistent manner. A RoutingPolicy is weak to the network device (i.e., the ComputerSystem) that contains it. Hence, the ComputerSystem keys are propagated to this class. Note that this class was defined before the Policy Model and hence is not positioned in that hierarchy. The class will be repositioned in a later release of the Network Model. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , action text[] , attribute_action text[] , bgp_action text[] , bgp_value text[] , remark_action text[] , remark_value text[] , conditioning_action text[] , other_conditioning_action text[] , conditioning_value text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.sa_transform /* SATransform is the base class for the various types of transforms that are in effect for an existing IPsecSAEndpoint, or aggregated into phase 2 proposals used during the IPsec negotiation process. This class is defined as a kind of ScopedSettingData, since it describes the set of transform properties that MUST be applied together, if negotiated. This subclassing is different than that defined in IETF's IPSP Policy draft -
WHERE it is subclassed
FROM Policy. The definition AS SettingData is more consistent
WITH the application of the properties AS a set, to the negotiated Security Association. Note that an instance of this class is 'scoped'
        OR contained by a System (either a ComputerSystem
        OR AdminDomain), rather than by a SecurityAssociationEndpoint. This is indicated by instantiating the ScopedSetting association,
        AND is necessary since the transform data is used IN IPsec negotiation policies (also scoped by Systems) before ever being associated
WITH a SecurityAssociationEndpoint. The latter semantics (i.e., that 'this' transform is negotiated for 'this' Security Association) is conveyed via a subclass of ElementSettingData, TransformOfSecurityAssociation. */ ( id SERIAL PRIMARY KEY , element_name text[] , max_lifetime_seconds text[] , max_lifetime_kilobytes text[] , vendor_id text[] , instance_id text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.ssh_capabilities /* A subclass of ProtocolServiceCapabilities that defines the capabilities of an SSH Service. An instance of CIM_SSHCapabilities is associated
WITH an instance of CIM_ProtocolService via the CIM_ElementCapabilities association. */ ( id SERIAL PRIMARY KEY , other_supported_sshversion text[] , other_supported_encryption_algorithm text[] , max_connections text[] , max_listening_ports text[] , listening_port_management_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.spanning_tree_statistics /* Statistical information regarding the SpanningTreeService. */ ( id SERIAL PRIMARY KEY , time_since_topology_change text[] , top_changes text[] , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.static_forwarding_entry /* A StaticForwardingEntry represents an entry IN the static (destination-address filtering) database associated
WITH the TransparentBridgingService. The entry is Weak to the Service AS specified by TransparentBridgingStatic Forwarding. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , mac_address text[] , static_status text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.switch_port_source_routing_statistics /* Statistical information regarding a SwitchPort supporting source routing. */ ( id SERIAL PRIMARY KEY , spec_in_frames text[] , spec_out_frames text[] , ape_in_frames text[] , ape_out_frames text[] , ste_in_frames text[] , ste_out_frames text[] , segment_mismatch_discards text[] , duplicate_segment_discards text[] , hop_count_exceeds_discards text[] , dup_lan_id_or_tree_errors text[] , lan_id_mismatches text[] , system_creation_class_name text[] , system_name text[] , sap_creation_class_name text[] , sap_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.switch_port_spanning_tree_statistics /* Statistical information regarding a SwitchPort participating IN the spanning tree. */ ( id SERIAL PRIMARY KEY , forward_transitions text[] , system_creation_class_name text[] , system_name text[] , sap_creation_class_name text[] , sap_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.switch_port_statistics /* Statistical information regarding a generic SwitchPort, independent of the specific kind of switching done
    ON frames arriving at the port. */ ( id SERIAL PRIMARY KEY , delay_exceeded_discards text[] , mtu_exceeded_discards text[] , system_creation_class_name text[] , system_name text[] , sap_creation_class_name text[] , sap_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.switch_port_transparent_bridging_statistics /* Statistical information regarding a SwitchPort, at which transparent bridging is performed. */ ( id SERIAL PRIMARY KEY , in_frames text[] , out_frames text[] , in_discards text[] , system_creation_class_name text[] , system_name text[] , sap_creation_class_name text[] , sap_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.telnet_capabilities /* A subclass of ProtocolServiceCapabilities that defines the capabilities of a Telnet Service. An instance of TelnetCapabilities is associated
WITH the ProtocolService
USING ElementCapabilities. */ ( id SERIAL PRIMARY KEY , max_connections text[] , max_listening_ports text[] , listening_port_management_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.transparent_bridging_statistics /* Statistical information regarding the TransparentBridging Service. */ ( id SERIAL PRIMARY KEY , learned_entry_discards text[] , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.usb_redirection_capabilities /* USBRedirectionCapabilities describes the capabilities of the USB Redirection Service. */ ( id SERIAL PRIMARY KEY , single_class_per_sap text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.vlan_endpoint_capabilities /* Capabilities supported by the VLAN endpoint. */ ( id SERIAL PRIMARY KEY , dot1_qtagging text[] , dot1q_acceptable_vlanframes_types text[] , dot1q_ingress_filtering text[] , supports_trunk_encapsulation_negotiation text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.virtual_routing_and_forwarding_table /* A collection of interfaces
        AND associated routes that form the context used for a virtual routing
        AND forwarding table. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , route_distinguisher text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.wi_fi_endpoint_capabilities /* Describes the capabilities of a WiFiEndpoint. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.x509_credential_filter_entry /* An X509CredentialFilterEntry allows filtering
    ON the attributes of an X.509 certificate. Each instance includes a value for MatchFieldName that specifies the particular X.509 attribute that is being matched. */ ( id SERIAL PRIMARY KEY , match_field_name text[] , match_field_value text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , is_negated text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.i_scsicapabilities /* The capabilites for an iSCSI Network Entity. An instance of this class will be associated by ElementCapabilities to a instance of ComputerSystem that represents the Network Entity. These capability properties are associated to a Network Entity/ComputerSystem since they affect ALL login negotiations
    ON ALL iSCSI ProtocolEndpoints aggregated to the system. */ ( id SERIAL PRIMARY KEY , minimum_specification_version_supported text[] , maximum_specification_version_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.i_scsiconfiguration_capabilities /* A subclass of Capabilities that defines the capabilities of a iSCSIConfigurationService. */ ( id SERIAL PRIMARY KEY , i_scsiprotocol_endpoint_creation_supported text[] , identifier_selection_supported text[] , i_scsinode_creation_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.adjacent_slots /* AdjacentSlots describes the layout of Slots
    ON a HostingBoard
        OR adapter Card. Information LIKE the distance
    BETWEEN the Slots
        AND whether they are 'shared' (if one is populated, THEN
    the other Slot can NOT be used), is conveyed AS properties of the association. */ ( id SERIAL PRIMARY KEY , slot_id5 INTEGER REFERENCES slot(id) , slot_id6 INTEGER REFERENCES slot(id) , distance_between_slots text[] , shared_slots text[] ); 
    CREATE TABLE public.card /* The Card class represents a type of physical container that can be plugged into another Card
        OR HostingBoard,
        OR is itself a HostingBoard/Motherboard IN a Chassis. The CIM_Card class includes any package capable of carrying signals
        AND providing a mounting point for PhysicalComponents, such AS Chips,
        OR other PhysicalPackages, such AS other Cards. */ ( id SERIAL PRIMARY KEY , hosting_board text[] , slot_layout text[] , requires_daughter_board text[] , special_requirements text[] , requirements_description text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.chip /* The Chip class represents any type of integrated circuit hardware, including ASICs, processors, memory chips, etc. */ ( id SERIAL PRIMARY KEY , form_factor text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.configuration_capacity /* ConfigurationCapacity provides information
    ON the minimum
        AND maximum numbers of power supplies, fans, disk drives, etc. that can be connected to
        OR placed on/into a PhysicalElement (and the number that must be connected/added/removed at a time). The PhysicalElement whose configuration is described is identified
USING the ElementCapacity association, inherited
FROM PhysicalCapacity. The object whose capacities are indicated (ie, the power supply
        OR fan) is identified IN the ObjectType
        AND VendorCompatibilityStrings properties of this class.
    WHEN ObjectType has a value of 25 (Multi-Purpose) THEN
    additional description of the object is provided IN the VendorCompatibilityStrings property. Since the same min/max configurations can apply to multiple instances, this class is NOT defined AS 'weak'. Examples of the use of the ConfigurationCapacity class are to describe that a 'control unit' Chassis may be connected to (at most) 4 other I/O chassis,
        OR to describe what a StorageLibrary's cabinet may contain. Continuing the latter example, a particular StorageLibrary's cabinet might hold a minimum of 3
        AND a maximum of 9 TapeDrives,
        AND a minimum of 88
        AND a maximum of 264 StorageMediaLocations ("Slots"). This information would be described IN two instances of ConfigurationCapacity, both associated to the StorageLibrary's PhysicalPackage. This class does NOT represent the tradeoffs that are likely to be required of one resource for another. It simply represents capacities. In the case of the StorageLibrary, there may be only 2 valid configurations - 9 TapeDrives with 88 Slots, or 3 TapeDrives with 264 Slots. This class only conveys that 'up to' 9 Drives and 'up to' 264 slots may be available and are supported. */ ( id SERIAL PRIMARY KEY , name text[] , object_type text[] , other_type_description text[] , minimum_capacity text[] , maximum_capacity text[] , increment text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.connected_to /* The ConnectedTo association indicates that two or more PhysicalConnectors are connected together. */ ( id SERIAL PRIMARY KEY , physical_connector_id5 INTEGER REFERENCES physical_connector(id) , physical_connector_id6 INTEGER REFERENCES physical_connector(id) ); 
        CREATE TABLE public.container /* The Container association represents the relationship between a contained and a containing PhysicalElement. A containing object must be a PhysicalPackage. */ ( id SERIAL PRIMARY KEY , physical_package_id6 INTEGER REFERENCES physical_package(id) , physical_element_id7 INTEGER REFERENCES physical_element(id) , location_within_container text[] ); 
        CREATE TABLE public.container_view /* The CIM_ContainerView instance is a view that is derived from the CIM_Container between the View Class of a physical element (e.g., the Disk Drive View) and the CIM_PhysicalPackage of the ComputerSystem. */ ( id SERIAL PRIMARY KEY , physical_package_id6 INTEGER REFERENCES physical_package(id) , view_id7 INTEGER REFERENCES view(id) ); 
        CREATE TABLE public.element_capacity /* ElementCapacity associates a PhysicalCapacity object with one or more PhysicalElements. It serves to associate a description of min/max hardware requirements or capabilities (stored as a kind of PhysicalCapacity), with the PhysicalElements being described. */ ( id SERIAL PRIMARY KEY , physical_capacity_id5 INTEGER REFERENCES physical_capacity(id) , physical_element_id6 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.element_in_connector /* Adapter cards, DIMMs and other physical elements are plugged into System Connectors for power and/or to transfer data. This relationship is defined by ElementInConnector. */ ( id SERIAL PRIMARY KEY , physical_connector_id5 INTEGER REFERENCES physical_connector(id) , physical_element_id6 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.elements_linked /* The ElementsLinked association indicates which Physical Elements are cabled together by a PhysicalLink. */ ( id SERIAL PRIMARY KEY , physical_link_id5 INTEGER REFERENCES physical_link(id) , physical_element_id6 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.link_has_connector /* Cables and Links utilize PhysicalConnectors to actually 'connect' PhysicalElements. This association explicitly defines this relationship of Connectors for PhysicalLinks. */ ( id SERIAL PRIMARY KEY , physical_link_id6 INTEGER REFERENCES physical_link(id) , physical_connector_id7 INTEGER REFERENCES physical_connector(id) ); 
        CREATE TABLE public.media_physical_stat_info /* Statistics related to reading physical labels and picks/puts at a specific StorageMediaLocation, or for a specific piece of PhysicalMedia. Although the same class is used to represent this data, at the instance level the object holds information for the Location (independent of the Media), OR for the Media (independent of its StorageMediaLocation). This class is deprecated in lieu of MediaPhysicalStatData, to take advantage of the simplified key structure defined there. */ ( id SERIAL PRIMARY KEY , scan_successes text[] , scan_failures text[] , scan_retries text[] , pick_successes text[] , pick_failures text[] , pick_retries text[] , put_successes text[] , put_failures text[] , put_retries text[] , physical_creation_class_name text[] , tag text[] , creation_class_name text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.memory_capacity /* MemoryCapacity describes the type of Memory that can be installed on a PhysicalElement and its minimum/maximum configurations. Information on what memory is currently 'installed', versus an Element's min/max requirements, is located IN instances of the PhysicalMemory class. */ ( id SERIAL PRIMARY KEY , name text[] , memory_type text[] , minimum_memory_capacity text[] , maximum_memory_capacity text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.package_in_connector /* Adapter cards
        AND other 'packaging' are plugged into System Connectors for power and/or to transfer data. This relationship is defined by PackageInConnector. For example, it would be used to describe the insertion of a daughtercard onto another Card. Various subclasses of PackageInConnector are also defined. PackageInSlot
        AND its subclass, CardInSlot, are two examples of subclasses. */ ( id SERIAL PRIMARY KEY , physical_connector_id5 INTEGER REFERENCES physical_connector(id) , physical_package_id6 INTEGER REFERENCES physical_package(id) ); 
        CREATE TABLE public.package_in_slot /* Complex networking devices often are Chassis-based. These Chassis allow for enhancement and/or augmentation of their base functionality by accepting additional Chassis devices, similar to accepting functionality IN the form of adding Cards. This association models this capability. */ ( id SERIAL PRIMARY KEY , slot_id5 INTEGER REFERENCES slot(id) , physical_package_id6 INTEGER REFERENCES physical_package(id) ); 
        CREATE TABLE public.package_location /* PackageLocation is a space/hole/shelf, possibly
WITH mounting brackets
        OR other connecting hardware,
WHERE other PhysicalPackages may be placed. This class describes an entity that holds something else
        AND is NOT just a 'place' (as is conveyed by the CIM_Location object). This class has several corollaries to HostingBoard.
WHERE a HostingBoard (backplane) has connectors/slots to describe the capabilities of holding additional PhysicalPackages, a PackageLocation is used to describe the same
    CASE for the general package,
WHERE there may
        OR may NOT be no connectors. Examples of PackageLocations would include a disk cage IN a tower PC
        OR the chassis area
WHERE the power supply is mounted. */ ( id SERIAL PRIMARY KEY , location_coordinates text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
CREATE TABLE public.packaged_component /* A Component is typically contained by a PhysicalPackage, such AS a Chassis
        OR Card. The PackagedComponent association makes this relationship explicit. IN the first sentence, the word, 'typically', is used. This is because a Component may be removed from,
        OR NOT yet inserted into, its containing Package (ie, the Removable boolean is TRUE). Therefore, a Component may NOT always be associated
WITH a container. */ ( id SERIAL PRIMARY KEY , physical_package_id6 INTEGER REFERENCES physical_package(id) , physical_component_id7 INTEGER REFERENCES physical_component(id) , location_within_container text[] ); 
CREATE TABLE public.physical_asset_capabilities /* PhysicalAssetCapabilities describes the capabilities of representing the FRU related information of the associated instance of the CIM_PhysicalElement subclass. */ ( id SERIAL PRIMARY KEY , fru_info_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.physical_frame /* PhysicalFrame is a superclass of Rack, Chassis
        AND other frame enclosures, AS they are defined IN extension classes. Properties LIKE visible
        OR audible alarm,
        AND data related to security breaches are IN this superclass. */ ( id SERIAL PRIMARY KEY , cable_management_strategy text[] , lock_present text[] , audible_alarm text[] , visible_alarm text[] , security_breach text[] , breach_description text[] , is_locked text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.physical_memory /* PhysicalMemory is a subclass of CIM_Chip, representing low level memory devices - SIMMS, DIMMs, raw memory chips, etc. */ ( id SERIAL PRIMARY KEY , form_factor text[] , memory_type text[] , total_width text[] , data_width text[] , speed text[] , capacity text[] , bank_label text[] , position_in_row text[] , interleave_position text[] , configured_memory_clock_speed text[] , is_speed_in_mhz text[] , max_memory_speed text[] , capability__block_accessible_persistent_memory text[] , capability__byte_accessible_persistent_memory text[] , capability__volatile_memory text[] , firmware_version text[] , memory_subsystem_controller_manufacturer_id text[] , memory_subsystem_controller_product_id text[] , memory_technology text[] , module_manufacturer_id text[] , module_product_id text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.rack /* A Rack is a PhysicalFrame that represents an enclosure IN which Chassis are placed. Typically a Rack is nothing more than the enclosure,
        AND ALL the functioning componentry is packaged IN the Chassis, loaded IN the Rack. */ ( id SERIAL PRIMARY KEY , height text[] , type_of_rack text[] , country_designation text[] , cable_management_strategy text[] , lock_present text[] , audible_alarm text[] , visible_alarm text[] , security_breach text[] , breach_description text[] , is_locked text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.replacement_set /* The ReplacementSet class aggregates PhysicalElements that must be 'replaced'
        OR 'FRUed' together. For example,
    WHEN replacing a memory card, the component memory chips could be removed
        AND replaced AS well. Or,
         a SET of memory chips may be specified to be replaced
        OR upgraded together
USING this association. */ ( id SERIAL PRIMARY KEY , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.slot_in_slot /* Slots are special types of Connectors into which adapter Cards are typically inserted. The SlotInSlot relationship represents the ability of a special adapter to extend the existing Slot structure to enable otherwise incompatible Cards to be plugged into a Frame
        OR Hosting Board. The adapter effectively creates a new Slot
        AND can be thought of (conceptually) AS a Slot IN a Slot. This enables Cards that would otherwise be physically and/or electrically incompatible
WITH the existing Slots to be supported, by interfacing to the Slot provided by the adapter. This has many practical uses. For example, networking boards are very expensive. AS new hardware becomes available, Chassis
        AND even Card configurations change. To protect the investment of their customers, networking vendors will manufacture special adapters that enable old Cards to fit into new Chassis
        OR Hosting Boards and/or new Cards to fit into old. This is done
USING a special adapter that fits
    OVER one
        OR more existing Slots
        AND presents a new Slot into which the Card can plug. */ ( id SERIAL PRIMARY KEY , slot_id5 INTEGER REFERENCES slot(id) , slot_id6 INTEGER REFERENCES slot(id) ); 
        CREATE TABLE public.storage_media_location /* StorageMediaLocation is a PackageLocation
WHERE PhysicalMedia may be placed. This class is typically used IN the context of a StorageLibrary. Examples of StorageMediaLocations are Media AccessDevices, InterLibraryPorts
        OR 'slots' IN a Library's panel. */ ( id SERIAL PRIMARY KEY , location_type text[] , media_capacity text[] , location_coordinates text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.system_bus_card /* The SystemBusCard class represents additional information for a CIM_Card, detailing the Card's bus type
        AND data width. These properties dictate the type of Slot into which the Card can be inserted. For example,
USING the properties of this class, one can define that a Card is a PCI, 64 bit adapter. */ ( id SERIAL PRIMARY KEY , bus_type text[] , bus_width text[] , hosting_board text[] , slot_layout text[] , requires_daughter_board text[] , special_requirements text[] , requirements_description text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
CREATE TABLE public.authentication_condition /* An abstract class whose subclasses describe one of a company's and/or administrator's credential requirements, and/or other information that should be authenticated IN order to establish/trust a CIM_Identity. The PolicyConditions collected by an instance of AuthenticationRule describe the various requirements under which a CIM_Identity's CurrentlyAuthenticated Boolean is set to TRUE. Note that the CIM_Identities which are authenticated are specified through the AuthenticationRule, using the PolicySet AppliesToElement association. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.biometric_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated in order to establish/trust a CIM_Identity. This class defines specific biometric data that should be authenticated. */ ( id SERIAL PRIMARY KEY , type_of_biometric text[] , other_biometric text[] , personal_identifier text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.compound_policy_action /* CompoundPolicyAction is used to represent an expression consisting of an ordered sequence of action terms. Each action term is represented as a subclass of the PolicyAction class. Compound actions are constructed by associating dependent action terms together using the PolicyActionInPolicyAction aggregation. */ ( id SERIAL PRIMARY KEY , sequenced_actions text[] , execution_strategy text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.compound_policy_condition /* CompoundPolicyCondition is used to represent compound conditions formed by aggregating simpler policy conditions. Compound conditions are constructed by associating subordinate condition terms together using the PolicyConditionInPolicyCondition aggregation. */ ( id SERIAL PRIMARY KEY , condition_list_type text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.document_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated in order to establish/trust a CIM_Identity. This class defines the specific document that should be authenticated. */ ( id SERIAL PRIMARY KEY , type_of_document text[] , other_document text[] , document_identifier text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.kerberos_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated in order to establish/trust a CIM_Identity. This class defines a user whose Kerberos ticket should be authenticated. */ ( id SERIAL PRIMARY KEY , user_name text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.method_action /* MethodAction is a PolicyAction that MAY invoke methods as defined by a query. If there are no results returned from the query, then no methods are called, otherwise each query result row defines the method to call and its parameters. The called method MAY be either an intrinsic method of a CIM Namespace or an extrinsic method of a CIM_ManagedElement. In order to correlate between methods called by this MethodAction and any other invoked Methods, InstMethodCall indications MAY be created for the method calls that result from this MethodAction. These indications are named by the value in the InstMethodCallName property. These indications MUST be produced if that InstMethodCallName value is included in the FROM clause of the query of some other MethodAction instance within the same PolicyRule. (The details of how this is accomplished are implementation dependent.) The input parameters to the method are defined by the query and MAY be fixed values defined by literals or MAY be defined by reference to one or more properties of classes named in the FROM clause of the query. The referenced objects MAY be those produced by QueryConditions or MethodActions instances associated to the same PolicyRule instance. */ ( id SERIAL PRIMARY KEY , inst_method_call_name text[] , query text[] , query_language text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.network_packet_action /* NetworkPacketAction standardizes different processing options that can be taken at the network packet level. The specific action is defined in the PacketAction enumerated property. Note that this property can be used in conjunction with other actions aggregated into a Rule, to fully define its effects. For example, when aggregated with the SAStaticAction class, NetworkPacketAction indicates whether a specific packet will be encrypted, bypassed or discarded for the lifetime of the Security Association. */ ( id SERIAL PRIMARY KEY , packet_action text[] , other_action text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.networking_idauthentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated in order to establish/trust a CIM_Identity. This class specifies that a networking ID or address should be verified. */ ( id SERIAL PRIMARY KEY , networking_identity_class_name text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.packet_filter_condition /* PacketFilterCondition specifies packet selection criteria (via association to FilterLists) for firewall policies, IPsec policies and similar uses. It is used as an anchor point to associate various types of filters with policy rules via the FilterOfPacketCondition association. By definition, policy rules that aggregate PacketFilterCondition are assumed to operate against every packet received and/or transmitted from an ingress and/or egress point. (Whether policy condition evaluation occurs at ingress or egress is specified by the Direction property in the associated FilterList.) PacketFilterCondition MAY also be used to define the specific CredentialManagementService that validates the credentials carried in a packet. This is accomplished using the association, AcceptCredentialFrom. Associated objects (such as FilterListsor Credential ManagementServices) represent components of the condition that MAY or MAY NOT apply at a given rule evaluation. For example, an AcceptCredentialFrom evaluation is only performed when a credential is available to be evaluated and compared against the list of trusted credential management services. Similarly, a PeerIDPayloadFilterEntry MAY only be evaluated when an ID payload is available for checking. Condition components that do not have applicability at rule evaluation time, MUST be evaluated to TRUE. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.physical_credential_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated in order to establish/trust a CIM_Identity. This class defines the specific type of physical credential that should be authenticated. */ ( id SERIAL PRIMARY KEY , type_of_credential text[] , other_credential text[] , physical_identifier text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.policy_component /* CIM_PolicyComponent is a generic association used to establish 'part of' relationships between the subclasses of CIM_Policy. For example, the PolicyConditionInPolicyRule association defines that PolicyConditions are part of a PolicyRule. */ ( id SERIAL PRIMARY KEY , policy_id7 INTEGER REFERENCES policy(id) , policy_id8 INTEGER REFERENCES policy(id) ); 
CREATE TABLE public.policy_condition_structure /* PolicyConditions may be aggregated into rules and into compound conditions. PolicyConditionStructure is the abstract aggregation class for the structuring of policy conditions. The Conditions aggregated by a PolicyRule or CompoundPolicyCondition are grouped into two levels of lists: either an ORed set of ANDed sets of conditions (DNF, the default) or an ANDed set of ORed sets of conditions (CNF). Individual PolicyConditions in these lists may be negated. The property ConditionListType specifies which of these two grouping schemes applies to a particular PolicyRule or CompoundPolicyCondition instance. One or more PolicyTimePeriodConditions may be among the conditions associated with a PolicyRule or CompoundPolicyCondition via the PolicyConditionStructure subclass association. In this case, the time periods are simply additional Conditions to be evaluated along with any others that are specified. */ ( id SERIAL PRIMARY KEY , policy_id7 INTEGER REFERENCES policy(id) , policy_condition_id8 INTEGER REFERENCES policy_condition(id) , group_number text[] , condition_negated text[] ); 
CREATE TABLE public.policy_group /* An aggregation of PolicySet instances (PolicyGroups and/or PolicyRules) that have the same decision strategy and inherit policy roles. PolicyGroup instances are defined and named relative to the CIM_System that provides their context. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , policy_group_name text[] , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.policy_group_in_policy_group /* PolicySetComponent provides a more general mechanism for aggregating both PolicyGroups and PolicyRules and doing so with the priority value applying only to the aggregated set rather than policy wide. A relationship that aggregates one or more lower-level PolicyGroups into a higher-level Group. A Policy Group may aggregate PolicyRules and/or other Policy Groups. */ ( id SERIAL PRIMARY KEY , policy_group_id7 INTEGER REFERENCES policy_group(id) , policy_group_id8 INTEGER REFERENCES policy_group(id) ); 
CREATE TABLE public.policy_role_collection /* PolicyRoleCollection is used to represent a collection of ManagedElements that share a common policy role, and the PolicySets that CAN BE applied to those elements. (Note that the PolicySets that are CURRENTLY applied are indicated via instances of the association, PolicySetAppliesToElement.) The PolicyRoleCollection always exists in the context of a System, specified using the PolicyRoleCollectionInSystem aggregation. The value of the PolicyRole property in this class specifies the role. It is defined as a free-form string. ManagedElements that share the role defined in this collection are aggregated into the Collection via the ElementInPolicyRoleCollection association. */ ( id SERIAL PRIMARY KEY , policy_role text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.policy_rule /* The central class used for representing the 'If Condition THEN
    Action' semantics of a policy rule. A PolicyRule condition, in the most general sense, is represented as either an ORed set of ANDed conditions (Disjunctive Normal Form, or DNF) or an ANDed set of ORed conditions (Conjunctive Normal Form, or CNF). Individual conditions may either be negated (NOT C) or unnegated (C). The actions specified by a PolicyRule are to be performed if and only if the PolicyRule condition (whether it is represented in DNF or CNF) evaluates to TRUE. The conditions and actions associated with a PolicyRule are modeled, respectively, with subclasses of PolicyCondition and PolicyAction. These condition and action objects are tied to instances of PolicyRule by the PolicyConditionInPolicyRule and PolicyActionInPolicyRule aggregations. A PolicyRule may also be associated with one or more policy time periods, indicating the schedule according to which the policy rule is active and inactive. In this case it is the PolicySetValidityPeriod aggregation that provides this linkage. The PolicyRule class uses the property ConditionListType, to indicate whether the conditions for the rule are in DNF (disjunctive normal form), CNF (conjunctive normal form) or, in the case of a rule with no conditions, as an UnconditionalRule. The PolicyConditionInPolicyRule aggregation contains two additional properties to complete the representation of the Rule's conditional expression. The first of these properties is an integer to partition the referenced PolicyConditions into one
        OR more groups,
        AND the second is a Boolean to indicate whether a referenced Condition is negated. An example shows how ConditionListType
        AND these two additional properties provide a unique representation of a SET of PolicyConditions IN either DNF
        OR CNF. Suppose we have a PolicyRule that aggregates five PolicyConditions C1 through C5,
WITH the following values IN the properties of the five PolicyConditionInPolicyRule associations: C1: GroupNumber = 1, ConditionNegated = FALSE C2: GroupNumber = 1, ConditionNegated = TRUE C3: GroupNumber = 1, ConditionNegated = FALSE C4: GroupNumber = 2, ConditionNegated = FALSE C5: GroupNumber = 2, ConditionNegated = FALSE If ConditionListType = DNF, THEN
    the overall condition for the PolicyRule is: (C1
        AND (NOT C2)
        AND C3)
        OR (C4
        AND C5)
    ON the other hand, if ConditionListType = CNF, THEN
    the overall condition for the PolicyRule is: (C1
        OR (NOT C2)
        OR C3)
        AND (C4
        OR C5) IN both cases, there is an unambiguous specification of the overall condition that is tested to determine whether to perform the PolicyActions associated
WITH the PolicyRule. PolicyRule instances may also be used to aggregate other PolicyRules and/or PolicyGroups.
    WHEN used IN this way to implement nested rules, the conditions of the aggregating rule apply to the subordinate rules AS well. However, any side effects of condition evaluation
        OR the execution of actions MUST NOT affect the result of the evaluation of other conditions evaluated by the rule engine IN the same evaluation pass. That is, an implementation of a rule engine MAY evaluate ALL conditions IN any order before applying the priority
        AND determining which actions are to be executed. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , policy_rule_name text[] , condition_list_type text[] , rule_usage text[] , priority text[] , mandatory text[] , sequenced_actions text[] , execution_strategy text[] , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_rule_in_policy_group /* PolicySetComponent provides a more general mechanism for aggregating both PolicyGroups
        AND PolicyRules
        AND doing so
WITH the priority value applying only to the aggregated SET rather than policy wide. A relationship that aggregates one
        OR more PolicyRules into a PolicyGroup. A PolicyGroup may aggregate PolicyRules and/or other PolicyGroups. */ ( id SERIAL PRIMARY KEY , policy_group_id7 INTEGER REFERENCES policy_group(id) , policy_rule_id8 INTEGER REFERENCES policy_rule(id) ); 
        CREATE TABLE public.policy_rule_validity_period /* The PolicyRuleValidityPeriod aggregation represents scheduled activation
        AND deactivation of a PolicyRule. If a PolicyRule is associated
WITH multiple policy time periods via this association, THEN
    the Rule is active if at least one of the time periods indicates that it is active. (In other words, the PolicyTimePeriodConditions are ORed to determine whether the Rule is active.) A Time Period may be aggregated by multiple PolicyRules. A Rule that does NOT point to a PolicyTimePeriodCondition via this association is,
FROM the point of view of scheduling, always active. It may, however, be inactive for other reasons. For example, the Rule's Enabled property may be set to "disabled" (value=2). */ ( id SERIAL PRIMARY KEY , policy_rule_id7 INTEGER REFERENCES policy_rule(id) , policy_time_period_condition_id8 INTEGER REFERENCES policy_time_period_condition(id) ); 
CREATE TABLE public.policy_set_component /* PolicySetComponent is a concrete aggregation that collects instances of the subclasses of PolicySet (i.e., PolicyGroups and PolicyRules). Instances are collected in sets that use the same decision strategy. They are prioritized relative to each other, within the set, using the Priority property of this aggregation. Together, the PolicySet.PolicyDecisionStrategy and PolicySet Component.Priority properties determine the processing for the groups and rules contained in a PolicySet. A larger priority value represents a higher priority. Note that the Priority property MUST have a unique value when compared with others defined for the same aggregating PolicySet. Thus, the evaluation of rules within a set is deterministically specified. */ ( id SERIAL PRIMARY KEY , policy_set_id6 INTEGER REFERENCES policy_set(id) , policy_set_id7 INTEGER REFERENCES policy_set(id) , priority text[] ); 
CREATE TABLE public.policy_set_in_role_collection /* PolicySetInRoleCollection aggregates zero or more PolicyRules and PolicyGroups (i.e., the subclasses of PolicySet) into a PolicyRoleCollection object, representing a role supported/enforced by the PolicySet. */ ( id SERIAL PRIMARY KEY , policy_role_collection_id6 INTEGER REFERENCES policy_role_collection(id) , policy_set_id7 INTEGER REFERENCES policy_set(id) ); 
CREATE TABLE public.policy_set_validity_period /* The PolicySetValidityPeriod aggregation represents scheduled activation and deactivation of a PolicySet. A PolicySet is considered "active" if it is both "Enabled" and in a valid time period. If a PolicySet is associated with multiple policy time periods via this association, then the Set is in a valid time period if at least one of the time periods evaluates to TRUE. If a PolicySet is contained in another PolicySet via the PolicySetComponent aggregation (e.g., a PolicyRule in a PolicyGroup), then the contained PolicySet (e.g., PolicyRule) is in a valid period if at least one of the aggregate's PolicyTimePeriodCondition instances evaluates to TRUE
        AND at least one of its own PolicyTimePeriodCondition instances also evalutes to TRUE. (In other words, the PolicyTimePeriodConditions are ORed to determine whether the PolicySet is IN a valid time period
        AND THEN
    ANDed
WITH the ORed PolicyTimePeriodConditions of each of PolicySet instances IN the PolicySetComponent hierarchy to determine if the PolicySet is IN a valid time period and,
         if also "Enabled",
         therefore,
         active,
         i.e.,
         the hierachy ANDs the ORed PolicyTimePeriodConditions of the elements of the hierarchy. A Time Period may be aggregated by multiple PolicySets. A SET that does NOT point to a PolicyTimePeriodCondition via this association,
        
FROM the point of view of scheduling, is always IN a valid time period. */ ( id SERIAL PRIMARY KEY , policy_set_id6 INTEGER REFERENCES policy_set(id) , policy_time_period_condition_id7 INTEGER REFERENCES policy_time_period_condition(id) ); 
CREATE TABLE public.public_private_key_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated IN order to establish/trust a CIM_Identity. This class defines the specific public/private key pair that should be authenticated. */ ( id SERIAL PRIMARY KEY , self_issued_key text[] , distinguished_name text[] , public_key text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.shared_secret_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated IN order to establish/trust a CIM_Identity. This class defines a specific identity whose shared secret should be authenticated. */ ( id SERIAL PRIMARY KEY , id_ofprincipal text[] , context_of_secret text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__activity /* Describes the date of each transaction
        AND the objects involved. */ ( id SERIAL PRIMARY KEY , parameter_list text[] , new_keys text[] , deleted text[] , modified text[] , local_date text[] , action_log text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__activity_resource /* Associates PRS_Activity
WITH PRS_Resource. */ ( id SERIAL PRIMARY KEY , prs__activity_id6 INTEGER REFERENCES prs__activity(id) , prs__resource_id7 INTEGER REFERENCES prs__resource(id) ); 
CREATE TABLE public.prs__activity_transaction /* Associates PRS_Activity
WITH PRS_Transaction. */ ( id SERIAL PRIMARY KEY , prs__activity_id5 INTEGER REFERENCES prs__activity(id) , prs__transaction_id6 INTEGER REFERENCES prs__transaction(id) ); 
CREATE TABLE public.prs__address /* Provides address information for PRS_ContactItem. */ ( id SERIAL PRIMARY KEY , address_type text[] , address1 text[] , address2 text[] , address3 text[] , address4 text[] , city text[] , region text[] , postal_code text[] , time_zone text[] , country text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__address_location /* Associates PRS_Address
        AND PRS_Location. */ ( id SERIAL PRIMARY KEY , prs__address_id5 INTEGER REFERENCES prs__address(id) , prs__location_id6 INTEGER REFERENCES prs__location(id) ); 
        CREATE TABLE public.prs__administrative /* PRS_Administrative defines administrative information about associated objects. There must be at least one PRS_Administrative instance associated
WITH a PRS_Solution. Administrative information is inherited
FROM a parent object. If the administrative information among objects within a Solution is NOT the same, additional PRS_Administrative instances may be associated
WITH other objects within the Solution. ALL instances under a specific parent inherit their administrative information unless there is an PRS_Administrative instance associated
WITH that instance. For example, if there is a PRS_Administrative instance associated
WITH a PRS_Problem instance, ALL of the PRS_Statement
        AND PRS_ Product instances within the Problem use the same Administrative information AS the PRS_Problem instance. */ ( id SERIAL PRIMARY KEY , compliance_level text[] , document_status text[] , distribution text[] , language text[] , copyright text[] , disclaimer text[] , rights text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__administrative_revision /* Associates PRS_Administrative
WITH PRS_Revision. */ ( id SERIAL PRIMARY KEY , prs__administrative_id6 INTEGER REFERENCES prs__administrative(id) , prs__revision_id7 INTEGER REFERENCES prs__revision(id) ); 
CREATE TABLE public.prs__agreement /* The agreement
        OR contract referenced for entitlement to service. */ ( id SERIAL PRIMARY KEY , contract_id text[] , agreement_type text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__attachment /* PRS_Attachment describes file attachments. A PRS_Attachment may be associated to any object derived
FROM PRS_ExchangeElement. PRS_Attachment is used to attach objects of any type including binary files, ASCII documents,
        OR URLs. Only one object may be attached per PRS_Attachment. The actual attachment carried by the Attachment object is included by one of two methods: by reference
        OR by value AS embedded data. A 'by reference' approach links indirectly to the attachment through the use of a string identifier, e.g. a file name. An 'embedded data' approach means the actual binary data is included IN PRS_Attachment. */ ( id SERIAL PRIMARY KEY , attachment_reference text[] , protocol text[] , format text[] , attachment_size text[] , attachment_object text[] , attachment_type text[] , attachment_name text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__category /* PRS_Category is used to classify the components of a Solution. Hierarchical classifications are created by associating PRS_CategoryParentChild
WITH multiple PRS_Category instances. */ ( id SERIAL PRIMARY KEY , category_contents text[] , category_type text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__category_parent_child /* PRS_CategoryParentChild is used to define classification hierarchies. */ ( id SERIAL PRIMARY KEY , prs__category_id5 INTEGER REFERENCES prs__category(id) , prs__category_id6 INTEGER REFERENCES prs__category(id) ); 
CREATE TABLE public.prs__contact /* PRS_Contact is used to anchor associations to PRS_Person
        AND PRS_Orgnaization. PRS_Contact is also used to anchor associations to PRS_Revision
        AND PRS_Resolution, AS well AS PRS_ServiceIncident. */ ( id SERIAL PRIMARY KEY , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__contact_item /* PRS_ContactItem is the abstract root class for PRS_Person
        AND PRS_Organization. It provides a common anchor point for the PRS_ContactContactItem association. */ ( id SERIAL PRIMARY KEY , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.prs__contact_item_address /* Associates PRS_ContactItem
WITH PRS_Address. */ ( id SERIAL PRIMARY KEY , prs__contact_item_id5 INTEGER REFERENCES prs__contact_item(id) , prs__address_id6 INTEGER REFERENCES prs__address(id) ); 
CREATE TABLE public.prs__expression /* PRS_Expression defines a specific relationship
    BETWEEN PRS_ExpressionElements associated
WITH PRS_SolutionElements. */ ( id SERIAL PRIMARY KEY , relation text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__expression_link /* Associates a PRS_Expression
WITH PRS_ExpressionElements such AS PRS_Expression, PRS_Product,
        AND PRS_Statement. */ ( id SERIAL PRIMARY KEY , prs__expression_id6 INTEGER REFERENCES prs__expression(id) , prs__expression_element_id7 INTEGER REFERENCES prs__expression_element(id) ); 
        CREATE TABLE public.prs__feature_resource /* Associates PRS_Feature
WITH PRS_Resource. This is used to track labor
        AND costs associated
WITH specific tasks defined IN a Feature object. */ ( id SERIAL PRIMARY KEY , prs__feature_id5 INTEGER REFERENCES prs__feature(id) , prs__resource_id6 INTEGER REFERENCES prs__resource(id) ); 
CREATE TABLE public.prs__organization /* PRS_Organization describes a PRS_Contact's organization name and business. */ ( id SERIAL PRIMARY KEY , name text[] , business text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__person /* Information about a personal contact. */ ( id SERIAL PRIMARY KEY , first_name text[] , last_name text[] , salutation text[] , title text[] , contact_type text[] , communication_mode text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__problem /* PRS_Problem is the root object of a set of associated objects that describe a Problem. One or more Problems may be associated with a Solution. The Problem is described by PRS_Statement and PRS_Product instances indirectly associated to the PRS_Problem through a PRS_Expression. */ ( id SERIAL PRIMARY KEY , likelihood text[] , impact text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__product_asset /* PRS_ProductAsset is used to provide specific information about a PRS_Product. PRS_ProductAsset associates this information to a PRS_Product using one or more Statements associated to a PRS_Expression. */ ( id SERIAL PRIMARY KEY , prs__product_id5 INTEGER REFERENCES prs__product(id) , prs__expression_id6 INTEGER REFERENCES prs__expression(id) ); 
CREATE TABLE public.prs__product_component /* PRS_ProductComponent is used to describe 'has a' relationships between Products and their components parts. See PRS_ProductParentChild for 'is a' relationships. */ ( id SERIAL PRIMARY KEY , prs__product_id6 INTEGER REFERENCES prs__product(id) , prs__product_id7 INTEGER REFERENCES prs__product(id) ); 
CREATE TABLE public.prs__product_parent_child /* Products may exist in a hierarchy of relationships with related Products. If a Producer deems these hierarchy relationships are relevant to the current Problem or Resolution, then the position of the Product in a hierarchy can be implied using one of two types of relationships: 'is a' and 'has a'. An 'is a' relationship implies a classification, such as versioning or typing. A 'has a' relationship implies that one product contains another. The PRS_ProductParentChild association is used to imply an 'is a' hierarchy. Use the ProductComponent association to imply 'has a' relationships. */ ( id SERIAL PRIMARY KEY , prs__product_id6 INTEGER REFERENCES prs__product(id) , prs__product_id7 INTEGER REFERENCES prs__product(id) ); 
CREATE TABLE public.prs__reference /* PRS_Reference is a placeholder to support links between PRS_Expression objects and a PRS_Solution. It does not have any properties. A 'Reference' Solution uses PRS_Statement objects to describe general, non-diagnostic knowledge and may not include any PRS_Problem and PRS_Resolution instances. */ ( id SERIAL PRIMARY KEY , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__resolution /* PRS_Resolution is the root object of a set of associated objects that describe a the resolution to a Problem. One or more Resolutions may be associated with a Solution. The Resolution is described by PRS_Statement and PRS_Product instances indirectly associated to the PRS_Resolution through a PRS_Expression. */ ( id SERIAL PRIMARY KEY , confidence text[] , prs_unique_name text[] , dirty_flag text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.prs__resolution_resource /* Associates PRS_Resolution with PRS_Resource. */ ( id SERIAL PRIMARY KEY , prs__resource_id5 INTEGER REFERENCES prs__resource(id) , prs__resolution_id6 INTEGER REFERENCES prs__resolution(id) ); 
CREATE TABLE public.prs__revision_contact /* Associates PRS_Revision and PRS_Contact. */ ( id SERIAL PRIMARY KEY , prs__revision_id6 INTEGER REFERENCES prs__revision(id) , prs__contact_id7 INTEGER REFERENCES prs__contact(id) ); 
CREATE TABLE public.prs__service_activity /* Associates PRS_ServiceIncident to PRS_Activity. */ ( id SERIAL PRIMARY KEY , prs__service_incident_id6 INTEGER REFERENCES prs__service_incident(id) , prs__activity_id7 INTEGER REFERENCES prs__activity(id) ); 
CREATE TABLE public.prs__service_agreement /* Associates PRS_ServiceIncident to PRS_Agreement. */ ( id SERIAL PRIMARY KEY , prs__service_incident_id5 INTEGER REFERENCES prs__service_incident(id) , prs__agreement_id6 INTEGER REFERENCES prs__agreement(id) ); 
CREATE TABLE public.prs__service_problem /* Associates PRS_ServiceIncident to PRS_Problem to describe the Problem being submitted to the Service Provider. */ ( id SERIAL PRIMARY KEY , prs__service_incident_id5 INTEGER REFERENCES prs__service_incident(id) , prs__problem_id6 INTEGER REFERENCES prs__problem(id) ); 
CREATE TABLE public.prs__service_provider /* Associates PRS_ServiceIncident to PRS_Contact to describe the Service Provider. */ ( id SERIAL PRIMARY KEY , prs__service_incident_id5 INTEGER REFERENCES prs__service_incident(id) , prs__contact_id6 INTEGER REFERENCES prs__contact(id) ); 
CREATE TABLE public.prs__service_requester /* PRS_ServiceRequester associates a PRS_ServiceIncident with a PRS_Contact representing the entity requesting service. Note that the Contact class is used for both Requesters and Providers, the context is determined by which association exists. */ ( id SERIAL PRIMARY KEY , prs__service_incident_id5 INTEGER REFERENCES prs__service_incident(id) , prs__contact_id6 INTEGER REFERENCES prs__contact(id) ); 
CREATE TABLE public.prs__service_resolution_solution /* Associates PRS_ServiceIncident to PRS_Solution to describe the Resolutions proposed by the Service Provider. */ ( id SERIAL PRIMARY KEY , prs__service_incident_id6 INTEGER REFERENCES prs__service_incident(id) , prs__solution_id7 INTEGER REFERENCES prs__solution(id) ); 
CREATE TABLE public.prs__solution_category /* PRS_SolutionCategory associates PRS_Solution with a PRS_Category for classification purposes. */ ( id SERIAL PRIMARY KEY , prs__solution_id5 INTEGER REFERENCES prs__solution(id) , prs__category_id6 INTEGER REFERENCES prs__category(id) ); 
CREATE TABLE public.prs__solution_expression /* Associates PRS_SolutionElements (PRS_Reference, PRS_Problem or PRS_Resolution) with PRS_Expressions. */ ( id SERIAL PRIMARY KEY , prs__solution_element_id6 INTEGER REFERENCES prs__solution_element(id) , prs__expression_id7 INTEGER REFERENCES prs__expression(id) ); 
CREATE TABLE public.prs__solution_has_element /* PRS_SolutionHasElement is an abstract base class for associating PRS_Solution with objects derived from PRS_SolutionElement. This association class allows all PRS_Reference, PRS_Problem and PRS_Resolution objects to be retrieved with a single query. */ ( id SERIAL PRIMARY KEY , prs__solution_id7 INTEGER REFERENCES prs__solution(id) , prs__solution_element_id8 INTEGER REFERENCES prs__solution_element(id) ); 
CREATE TABLE public.prs__solution_problem /* PRS_SolutionProblem aggregates a Problem into a Solution. */ ( id SERIAL PRIMARY KEY , prs__solution_id6 INTEGER REFERENCES prs__solution(id) , prs__problem_id7 INTEGER REFERENCES prs__problem(id) ); 
CREATE TABLE public.prs__solution_reference /* PRS_SolutionReference aggregates a Reference into a Solution. */ ( id SERIAL PRIMARY KEY , prs__solution_id6 INTEGER REFERENCES prs__solution(id) , prs__reference_id7 INTEGER REFERENCES prs__reference(id) ); 
CREATE TABLE public.prs__solution_resolution /* PRS_SolutionResolution aggregates a Resolution into a Solution. */ ( id SERIAL PRIMARY KEY , prs__solution_id6 INTEGER REFERENCES prs__solution(id) , prs__resolution_id7 INTEGER REFERENCES prs__resolution(id) ); 
CREATE TABLE public.prs__statement_feature /* Associates PRS_Statement with PRS_Feature. */ ( id SERIAL PRIMARY KEY , prs__statement_id5 INTEGER REFERENCES prs__statement(id) , prs__feature_id6 INTEGER REFERENCES prs__feature(id) ); 
CREATE TABLE public.bios_service_capabilities /* BIOSServiceCapabilities advertises to a client the methods that are supported by CIM_BIOSService. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.boot_service_capabilities /* A class derived from Capabilities that describes the boot configuration management aspects of a system. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.computer_system_node_capabilities /* Indicates general capabilities of a ComputerSystem node, such as the ability to support a battery (and be portable), and ECC memory. To tie these capabilities to a ComputerSystem instance, the ElementCapabilities association is used. */ ( id SERIAL PRIMARY KEY , battery_supported text[] , ecc_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.default_element_capabilities /* An association between a CIM_ManagedElement and a CIM_Capabilities element that specifies that the managed element uses the other as a default. The CIM_Capabilities element MUST be associated to the CIM_ManagedElement by CIM_ElementCapabilities as well. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , capabilities_id6 INTEGER REFERENCES capabilities(id) ); 
CREATE TABLE public.diagnostic_record /* Data related to Diagnostics may be recorded in various DiagnosticRecord objects. The type of information that is recorded in a log is specified via the LogOptions property in DiagnosticSetting. */ ( id SERIAL PRIMARY KEY , instance_id text[] , service_name text[] , managed_element_name text[] , expiration_date text[] , record_type text[] , other_record_type_description text[] , creation_time_stamp text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.diagnostic_service_capabilities /* DiagnosticServiceCapabilities is a class that describes the capabilities of the diagnostic service. This provides the means for the diagnostic service to describe its abilities, limitations, and/or potential for use of various diagnostic service parameters. For example, what types of settings the diagnostic service supports. */ ( id SERIAL PRIMARY KEY , supported_test_warnings text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.diagnostic_service_job_capabilities /* CIM_DiagnosticServiceJobCapabilities identifies the capabilities of a job created as a result of a DiagnosticService method. */ ( id SERIAL PRIMARY KEY , default_values_supported text[] , silent_mode_supported text[] , delete_job_supported text[] , interactive_timeout_max text[] , client_retries_max text[] , cleanup_interval text[] , time_before_removal_min text[] , time_before_removal_max text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.diagnostic_service_record /* While a DiagnosticService is running, data generated by the service may be recorded in DiagnosticServiceRecord objects. A DiagnosticServiceRecord is related to its Log via an instance of the LogManagesRecord aggregation class. */ ( id SERIAL PRIMARY KEY , loops_failed text[] , loops_passed text[] , instance_id text[] , service_name text[] , managed_element_name text[] , expiration_date text[] , record_type text[] , other_record_type_description text[] , creation_time_stamp text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.diagnostic_setting /* Specific diagnostic test parameters and execution instructions are defined by this class. To provide more detailed Settings for a type of test (i.e., additional properties), subclassing is appropriate. */ ( id SERIAL PRIMARY KEY , setting_id text[] , test_warning_level text[] , report_soft_errors text[] , report_status_messages text[] , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] , other_loop_control_description text[] , result_persistence text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.diagnostic_setting_data_record /* This class contains a snapshot of the settings that were used when the associated Diagnostic service was run. */ ( id SERIAL PRIMARY KEY , settings text[] , instance_id text[] , service_name text[] , managed_element_name text[] , expiration_date text[] , record_type text[] , other_record_type_description text[] , creation_time_stamp text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.diagnostic_setting_record /* A snapshot of the properties in the DiagnosticSetting instance that was used when the Diagnostic was run. */ ( id SERIAL PRIMARY KEY , halt_on_error text[] , quick_mode text[] , percent_of_test_coverage text[] , result_persistence text[] , instance_id text[] , service_name text[] , managed_element_name text[] , expiration_date text[] , record_type text[] , other_record_type_description text[] , creation_time_stamp text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.diagnostic_sub_test_record /* This is a subclass of CIM_DiagnosticRecord that identfies another log for a subtest of the diagnostic test. */ ( id SERIAL PRIMARY KEY , test_completion_status text[] , instance_id text[] , service_name text[] , managed_element_name text[] , expiration_date text[] , record_type text[] , other_record_type_description text[] , creation_time_stamp text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.disk_drive_diagnostic_service_capabilities /* This class defines the permissible settings that can be used for disk drive diagnostic tests. */ ( id SERIAL PRIMARY KEY , region text[] , seed text[] , supported_test_warnings text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.fchba_diagnostic_service_capabilities /* This class defines the permissible settings that can be used for FC HBA diagnostic tests. */ ( id SERIAL PRIMARY KEY , max_pattern_size_supported text[] , supported_test_warnings text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.fs_domain_identity /* An Identity as known in a specific authentication domain. Currently supported authentication domains are LDAP/Unix and Active Directory. */ ( id SERIAL PRIMARY KEY , principal_id text[] , domain_type text[] , principal_type text[] , instance_id text[] , currently_authenticated text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.fs_quota_applies_to_element /* An association between a quota config entry and a managed element. */ ( id SERIAL PRIMARY KEY , fs_quota_config_entry_id5 INTEGER REFERENCES fs_quota_config_entry(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.fs_quota_applies_to_principal /* An association between a quota configuration entry and a filesystem principal (i.e., the owner of the filesystem object). */ ( id SERIAL PRIMARY KEY , fs_domain_identity_id5 INTEGER REFERENCES fs_domain_identity(id) , fs_quota_config_entry_id6 INTEGER REFERENCES fs_quota_config_entry(id) ); 
CREATE TABLE public.fs_quota_capabilities /* The capabilities of the FSQuotaManagementService. */ ( id SERIAL PRIMARY KEY , conflicting_entries_usage text[] , is_active_setting_per_entry_supported text[] , is_monitored_setting_per_entry_supported text[] , is_grace_period_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.fs_quota_report_record /* Instances of this class represent one line in a filesystem quota report. All properties in it are optional except the amount used and the entity the number applies to. Filesystem quota reports are descriptions of the current state of the system. On a working system, no two complete quota reports will ever be the same. On systems which support default quotas, quota reports may be quite large, as they must report on every user/group in the system. A cursor mechanism is provided to make it possible to retrieve records a batch at a time. */ ( id SERIAL PRIMARY KEY , soft_limit_grace_period text[] , active text[] , monitored text[] , quota_type text[] , tree_name text[] , principal_id text[] , file_system text[] ); 
CREATE TABLE public.file_export_capabilities /* FileExportCapabilities specifies the capability of a FileExportService to support the specified methods. */ ( id SERIAL PRIMARY KEY , initial_enabled_state text[] , ca_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.file_server_capabilities /* A subclass of Capabilities that implemets the CreateGoalSettings method that a client may use to secure CIM_Setting_Data subclasses that can be used in creating or modifying a FileServer. */ ( id SERIAL PRIMARY KEY , file_server_settings_supported text[] , cifs_supported text[] , nfs_supported text[] , nis_supported text[] , dns_supported text[] , network_vlansupported text[] , scale_out_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.file_server_configuration_capabilities /* A subclass of Capabilities that defines the Capabilities of a FileServer. An instance of FileServerConfigurationCapabilities is associated with a FileServerConfigurationService using ElementCapabilities. FileServerConfigurationCapabilities specifies the combination of properties that a FileServerConfigurationService can support for creating, modifying, and deleting different types of Fileservers and the support for managing these as jobs. */ ( id SERIAL PRIMARY KEY , can_configure_cifs text[] , can_configure_nfs text[] , can_configure_nis text[] , can_configure_dns text[] , can_configure_network_vlan text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.file_system_configuration_capabilities /* FileSystemConfigurationCapabilities specifies the capability of a FileSystemConfigurationService to support the specified methods. */ ( id SERIAL PRIMARY KEY , initial_availability text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.file_system_setting_data /* This class allows a client to specify the desired persistence of a FileSystem. This information is tied to the FileSystem using the ElementSettingData association. */ ( id SERIAL PRIMARY KEY , persistence_type text[] , other_persistence_type text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.file_system_statistics_capabilities /* A specialization of the StatisticsCapabilities class that describes the capabilities of a FileSystemStatisticsService, which provides statistical data for instances of FileSystemStatisticalData. */ ( id SERIAL PRIMARY KEY , clock_tick_interval text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.file_system_statistics_manifest_collection /* The FileSystemStatisticsManifestCollection class aggregates, via MemberOfCollection, a set of FileSystemStatisticsManifests. This collection is associated via AssociatedFileSystemStatisticsManifestCollection to exactly one StatisticsCollection. The FileSystemStatisticsManifestCollection is used to filter the retrieval of statistics. For example, a FileSystemStatisticsManifestCollection is specified as part of the StatisticsService.GetStatisticsCollection method to filter the statistics returned by that method. */ ( id SERIAL PRIMARY KEY , element_name text[] , is_default text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.locally_accessible_file_system_capabilities /* LocallyAccessibleFileSystemCapabilities specifies the combination of properties that a File Server ComputerSystem (ComputerSystem.Dedicated=16) can support for accessing a LocalFileSystem. The LocallyAccessibleFileSystemCapabilities element is associated to the FileSystemConfigurationService via ElementCapabilities and to the File Server ComputerSystem via ScopedCapabilities. The supported combination of properties is specified by LocallyAccessibleFileSystemSetting elements that are associated with the LocallyAccessibleFileSystemCapabilities element via SettingsDefineCapabilities. These LocallyAccessibleFileSystemSettings must be derived from ScopedSettingData and scoped via ScopedSetting to the same File Server ComputerSystem as the LocallyAccessibleFileSystemCapabilities. The LocallyAccessibleFileSystemCapabilities element specifies the attributes of LocallyAccessibleFileSystemSetting that it can support in its SupportedProperties property. This class also provides a CreateGoalSettings method that isused to create a LocallyAccessibleFileSystemSetting element to be used as a goal when making a FileSystem locally accessible to the ComputerSystem. The goal is used as a parameter to the FileSystemConfigurationService.CreateFileSystem and FileSystemConfigurationService.ModifyFileSystem methods. If the methods are succesful, a clone of the goal is created that is associated with the FileSystem via ElementSettingData and scoped to the File Server ComputerSystem via ScopedSetting. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.locally_accessible_file_system_setting /* The LocallyAccessibleFileSystemSetting is a derived class of ScopedSettingData that specifies the attribute values set for a Filesystem that has been made locally accessible to the ComputerSystem. The ComputerSystem provides the scope (indicated via the ScopedSetting association).A FileSystem is 'locally accessible' to a ComputerSystem if a LocalAccessAvailable association exists between it and the ComputerSystem. This Setting provides further details on the functionality supported when locally accessible.When used as a setting for a FileSystem, these settings are associated with the FileSystem via the ElementSettingData association and cannot have undefined or NULL properties. When used to define a LocallyAccessibleFileSystemCapabilities via the SettingsDefineCapabilities association, these settings must be scoped to the ComputerSystem supported by the Capabilities element and cannot have undefined or NULL properties. Property values that represent an implementation-specific default can only be specified when this setting is used ina TemplateSettings parameter to the LocallyAccessibleFileSystemCapabilities.CreateGoalSettings() method. */ ( id SERIAL PRIMARY KEY , failure_policy text[] , retries_max text[] , initial_enabled_state text[] , other_enabled_state text[] , request_retry_policy text[] , transmission_retries_max text[] , retransmission_timeout_min text[] , caching_options text[] , read_buffer_size_min text[] , read_buffer_size_max text[] , write_buffer_size_min text[] , write_buffer_size_max text[] , read_write_policy text[] , lock_policy text[] , enable_on_system_start text[] , read_write_pref text[] , execute_pref text[] , root_access_pref text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.log_entry /* The LogEntry object can describe the definitional format for entries in a Log, or can be used to instantiate the actual entries in the Log. */ ( id SERIAL PRIMARY KEY , instance_id text[] , log_instance_id text[] , log_name text[] , record_id text[] , creation_time_stamp text[] , message_id text[] , message text[] , owning_entity text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.log_record /* The LogRecord object can describe the definitional format for entries in a MessageLog, or can be used to instantiate the actual records in the Log. The latter approach provides a great deal more semantic definition and management control over the individual entries in a MessageLog, than do the record manipulation methods of the Log class. It is recommended that the data in individual Log entries be modeled using subclasses of LogRecord, to avoid the creation of LogRecords with one property (such as RecordData) without semantics. Definitional formats for LogRecords could be specified by establishing a naming convention for the RecordID and Message Timestamp key properties. */ ( id SERIAL PRIMARY KEY , log_creation_class_name text[] , log_name text[] , creation_class_name text[] , record_id text[] , message_timestamp text[] , data_format text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.log_to_log /* This associates a log entry to another log (for example, a subtest log). */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.logical_file /* A LogicalFile is a named collection of data or executable code, or represents a LogicalDevice or Directory. It is located within the context of a FileSystem, on a Storage Extent. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.operating_system_capabilities /* OperatingSystemCapabilities provides information about the capabilities of associated instances of CIM_OperatingSystem. */ ( id SERIAL PRIMARY KEY , host_shutdown_behavior text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.platform_watchdog_service_capabilities /* A class derived from Capabilities that describes the watchdog service management aspects of a system. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.record_applies_to_element /* ManagedSystemElements may create RecordForLog objects to record their event, error or informational data within Logs. The relationship between these managed elements and the records they create is described by this association. */ ( id SERIAL PRIMARY KEY , record_for_log_id5 INTEGER REFERENCES record_for_log(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.record_log_capabilities /* CIM_RecordLogcapabilities describes the capabilities supported by the associated record log. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.resource_allocation_from_pool /* ResourceAllocationFromPool associates an instance of CIM_ResourceAllocationSettingData representing a resource allocation with the CIM_ResourcePool from which it is allocated. */ ( id SERIAL PRIMARY KEY , resource_pool_id5 INTEGER REFERENCES resource_pool(id) , resource_allocation_setting_data_id6 INTEGER REFERENCES resource_allocation_setting_data(id) ); 
CREATE TABLE public.setting_associated_to_capabilities /* This association defines settings that can be used to create or modify elements. Unlike ElementSettingData, these settings are not used to express the characteristics of existing managed elements. Typically, the capabilities associated with this class define the characteristics of a service in creating or modifying elements that are dependent on the service directly or indirectly. A CIM Client may use this association to find SettingData instances that can be used to create or modify these dependent elements. */ ( id SERIAL PRIMARY KEY , capabilities_id5 INTEGER REFERENCES capabilities(id) , setting_data_id6 INTEGER REFERENCES setting_data(id) , default_setting text[] ); 
CREATE TABLE public.symbolic_link /* This class is a special type of LogicalFile that represents a Symbolic Link. This convention is useful for some operating systems that want to represent a single file in multiple places or a single file that is represented via multiple names. */ ( id SERIAL PRIMARY KEY , target_file text[] , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.time_zone /* The TimeZone class is a set of properties defining a particular time zone. These properties include the concept of daylight saving time. */ ( id SERIAL PRIMARY KEY , time_zone_id text[] , time_zone_start_date text[] , standard_name text[] , standard_caption text[] , standard_offset text[] , standard_month text[] , standard_day text[] , standard_day_of_week text[] , standard_start_interval text[] , daylight_name text[] , daylight_caption text[] , daylight_offset text[] , daylight_month text[] , daylight_day text[] , daylight_day_of_week text[] , daylight_start_interval text[] , setting_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.unix_file /* The UnixFile class holds properties that are valid for various subclasses of LogicalFile, in a Unix environment. This is defined as a separate and unique class since it is applicable to Unix files, directories, etc. It is associated via a FileIdentity relationship to these subclasses of LogicalFile. Unless this approach of creating and associating a separate class is used, it is necessary to subclass each of the inheritance hierarchies under LogicalFile, duplicating the properties in this class. The referenced _PC* and _POSIX* constants are defined in unistd.h. Some properties indicate whether the UNIX implementation support a feature such as asynchronous I/O or priority I/O. If supported, sysconf returns the value as defined in the appropriate header file such as unistd.h. If a feature is not supported, then pathconf returns a -1. In this case, the corresponding property should be returned without any value. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , lf_creation_class_name text[] , lf_name text[] , user_id text[] , group_id text[] , save_text text[] , link_count text[] , file_inode_number text[] , set_uid text[] , set_gid text[] , last_modified_inode text[] , link_max text[] , name_max text[] , path_max text[] , posix_chown_restricted text[] , posix_no_trunc text[] , posix_async_io text[] , posix_prio_io text[] , posix_sync_io text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.virtual_system_setting_data_component /* The CIM_VirtualSystemSettingDataComponent association establishes a 'part of' relationship between an instance of the CIM_VirtualSystemSettingData class and a set of instances of the CIM_ResourceAllocationSettingData class. */ ( id SERIAL PRIMARY KEY , virtual_system_setting_data_id6 INTEGER REFERENCES virtual_system_setting_data(id) , resource_allocation_setting_data_id7 INTEGER REFERENCES resource_allocation_setting_data(id) ); 
CREATE TABLE public.access_control_information /* CIM_AccessControlInformation provides, through its properties and its associations, the specification of the access rights granted to a set of subject users to a set of target resources. The AccessControlInformation class is weak to the system (e.g., Computer System or Administrative Domain) for which the access controls apply. This class is deprecated in lieu of two others: AuthorizedPrivilege (defining specific access details) and SecuritySensitivity (defining individual security levels). The reasons for this are: 1. More specific access details are defined in Privilege (the superclass of AuthorizedPrivilege); and, 2. SecuritySensitivity allows security levels to be applied to other elements than access control information. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , security_classification text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.account_management_capabilities /* AccountManagementCapabilities describes the capabilities supported for managing Accounts associated with an instance of AccountManagementService. AccountManagementCapabilities is associated with an instance of AccountManagementService through the ElementCapabilities association. */ ( id SERIAL PRIMARY KEY , user_password_encryption_salt text[] , maximum_accounts_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.assigned_identity /* This relationship associates an Identity to a specific ManagedElement, whose trust and account information is represented. */ ( id SERIAL PRIMARY KEY , identity_id5 INTEGER REFERENCES identity(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.authentication_requirement /* CIM_AuthenticationRequirement provides, through its associations, the authentication requirements for access to system resources. For a particular set of target resources, the AuthenticationService may require that credentials be issued by a specific CredentialManagementService. The AuthenticationRequirement class is weak to the system (e.g., ComputerSystem or Administrative Domain) for which the requirements apply. Note that this class was defined before the Policy Model existed, and is deprecated in lieu of authentication policy - specifically, the AuthenticationCondition and AuthenticationRule classes. In the updated design, AuthenticationCondition describes the specific combinations of credentials (or alternative credentials) that are required in order to authenticate an Identity. This allows a more explicit and flexible description of authentication requirements. Also, the definition of 'security classification' as a property of this class was problematic - since it could not be assigned to an element in a straight forward fashion. To correct this issue, the SecuritySensitivity class (and its association, ElementSecuritySensitivity) are defined. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , security_classification text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.authentication_target /* CIM_AuthenticationTarget is an association used to apply authentication requirements for access to specific resources. For example, a shared secret may be sufficient for access to unclassified resources, but for confidential resources, a stronger authentication may be required. Since the AuthenticationRequirement class is deprecated in lieu of explicit policy rules, this association is similarly deprecated to its 'policy' equivalent. */ ( id SERIAL PRIMARY KEY , authentication_requirement_id6 INTEGER REFERENCES authentication_requirement(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.authorization_subject /* CIM_AuthorizationSubject is an association used to apply authorization decisions to specific subjects (i.e., users). This association is deprecated in lieu of a semantically equivalent one, AuthorizedSubject, since one of the referenced classes (AccessControlInformation) has been deprecated. */ ( id SERIAL PRIMARY KEY , access_control_information_id6 INTEGER REFERENCES access_control_information(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.authorization_target /* CIM_AuthorizationTarget is an association used to apply authorization decisions to specific target resources. The target resources may be aggregated into a collection or may be represented as a set of associations to ManagedElements. This association is deprecated in lieu of a semantically equivalent one, AuthorizedTarget, since one of the referenced classes (AccessControlInformation) has been deprecated. */ ( id SERIAL PRIMARY KEY , access_control_information_id6 INTEGER REFERENCES access_control_information(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.authorized_privilege /* Privilege is the base class for all types of activities which are granted or denied to a Role or an Identity. AuthorizedPrivilege is a subclass defining static renderings of authorization policy rules. The association of Roles and Identities to AuthorizedPrivilege is accomplished using the AuthorizedSubject relationship. The entities that are protected are defined using the AuthorizedTarget relationship. Note that this class and its AuthorizedSubject/Target associations provide a short-hand, static mechanism to represent authorization policies. */ ( id SERIAL PRIMARY KEY , instance_id text[] , privilege_granted text[] , represents_authorization_rights text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.authorized_subject /* CIM_AuthorizedSubject is an association used to tie specific AuthorizedPrivileges to specific subjects (i.e., Identities, Roles or Collections of these). At this time, only Identities and Roles (or Collections of Identities and Roles) should be associated to AuthorizedPrivileges using this relationship. Note that any Privileges not explicitly granted to a subject, SHOULD be denied. */ ( id SERIAL PRIMARY KEY , authorized_privilege_id5 INTEGER REFERENCES authorized_privilege(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.authorized_target /* CIM_AuthorizedTarget is an association used to tie an Identity's
        OR Role's AuthorizedPrivileges to specific target resources. */ ( id SERIAL PRIMARY KEY , authorized_privilege_id5 INTEGER REFERENCES authorized_privilege(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.collection_in_organization /* CIM_CollectionInOrganization is an association used to establish a parent-child relationship between a collection and an 'owning' OrganizationalEntity. A single collection should not have both a CollectionInOrganization and a CollectionInSystem association. */ ( id SERIAL PRIMARY KEY , organizational_entity_id6 INTEGER REFERENCES organizational_entity(id) , collection_id7 INTEGER REFERENCES collection(id) ); 
        CREATE TABLE public.credential_management_capabilities /* CIM_CredentialManagementCapabilities describes the capabilities for managing credentials. */ ( id SERIAL PRIMARY KEY , cumulative_privilege_methodology text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.credential_store /* CIM_CredentialStore class represents a collection of credentials such as certificates and biometric credentials. Credential collection can be used to store the credentials used by the service for validation of served up credentials or for the owned credentials of the service. */ ( id SERIAL PRIMARY KEY , instance_id text[] , usage text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.element_as_user /* CIM_ElementAsUser is an association used to establish the 'ownership' of UsersAccess object instances. That is, the ManagedElement may have UsersAccess to systems and, therefore, be 'users' on those systems. UsersAccess instances must have an 'owning' ManagedElement. Typically, the ManagedElements will be limited to Collection, Person, Service and ServiceAccessPoint. Other non-human ManagedElements that might be thought of as having UsersAccess (e.g., a device or system) have services that have the UsersAccess. Since the UsersAccess class is deprecated in lieu of CIM_Identity, this association is also deprecated and replaced by one of similar semantics, AssignedIdentity. It should be noted that the new class is NOT defined as a Dependency relationship, since it was felt that the association was not truly a dependency of the element on its access. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , users_access_id7 INTEGER REFERENCES users_access(id) ); 
        CREATE TABLE public.element_security_sensitivity /* This association labels an element with a security sensitivity. This association is not used to indicate clearance of a security principal, see IdentitySecurityClearance. */ ( id SERIAL PRIMARY KEY , security_sensitivity_id5 INTEGER REFERENCES security_sensitivity(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.gateway_path_id /* GatewayPathID extends StorageHardwareID to name a path segment defined by the end identities, HardwareID and GatewayID. The purpose is to describe Identity to allow access control to be applied to a particular path segment. Think of the element identified by GatewayPathID as a Gateway between a non-trusted world and a trusted world. */ ( id SERIAL PRIMARY KEY , gateway_id text[] , gateway_idtype text[] , other_gateway_idtype text[] , storage_id text[] , id_type text[] , other_idtype text[] , instance_id text[] , currently_authenticated text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.group /* The Group class is used to collect ManagedElements that are intended to be conformant with an LDAP GroupOfNames, as defined by IETF RFC 2256. For other purposes, ConcreteCollection, or other subclasses of Collection, may be more appropriate. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. This class's properties are a subset of a related class, OtherGroupInformation, which defines ALL the group properties
        AND IN array form for directory compatibility. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , business_category text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ip_network_identity /* IPNetworkIdentity is used to represent the various network identities that may be used for an IPProtocolEndpoint. The relationship
    BETWEEN the NetworkIdentity
        AND the IPProtocolEndpoint is modeled by the AssignedIdentity association, inherited
FROM CIM_Identity. This association could also be used to relate an address range
        OR other endpoint collection
WITH the Identity. */ ( id SERIAL PRIMARY KEY , identity_type text[] , identity_value text[] , instance_id text[] , currently_authenticated text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.keystore /* CIM_Keystore class represents a keystore, collection of key based credentials such AS certificates. Keystore can be used to store the certificates that are used for the client role of the validation of the served up certificates,
        OR for the server role, serving up the certificates to the client for the validation. Certificates IN the keystore can be revoked/invalidated by the means of application of Certificate Revocation List (CRL). */ ( id SERIAL PRIMARY KEY , usage text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.member_principal /* CIM_MemberPrincipal is an aggregation used to establish membership of principals (i.e., users) IN a Collection. That membership can be established either directly
        OR indirectly AS indicated IN the UsersAccessBy property. For example, a user may be identified directly by their userid (i.e., Account object instance)
        OR the user may be identified indirectly by realm
FROM which a ticket was issued (i.e., CredentialManagementService object instance). This association is deprecated IN lieu of its superclass. Usage feedback
    ON the class has indicated confusion regarding defining the members of the collection. Also, the UsersAccess aspects of this association have been deprecated. */ ( id SERIAL PRIMARY KEY , collection_id7 INTEGER REFERENCES collection(id) , managed_element_id8 INTEGER REFERENCES managed_element(id) , user_access_by text[] ); 
    CREATE TABLE public.more_group_info /* CIM_MoreGroupInfo is an association used to extend the information IN a CIM_Group class instance. */ ( id SERIAL PRIMARY KEY , group_id5 INTEGER REFERENCES public.group(id) , other_group_information_id6 INTEGER REFERENCES other_group_information(id) ); 
    CREATE TABLE public.org_structure /* CIM_OrgStructure is an association used to establish parent-child relationships
    BETWEEN OrganizationalEntity instances. This is used to capture organizational relationships
    BETWEEN object instances such AS those that are imported
FROM an LDAP-accessible directory. */ ( id SERIAL PRIMARY KEY , organizational_entity_id6 INTEGER REFERENCES organizational_entity(id) , organizational_entity_id7 INTEGER REFERENCES organizational_entity(id) ); 
CREATE TABLE public.org_unit /* The OrgUnit class is used to represent a sub-unit of an organization such a division
        OR department. The class is defined so AS to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information
FROM LDAP-accessible directories. This class's properties are a subset of a related class, OtherOrgUnitInformation, which defines all the group properties and in array form for directory compatibility. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , business_category text[] , facsimile_telephone_number text[] , locality_name text[] , ou text[] , postal_code text[] , state_or_province text[] , telephone_number text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.organization /* The Organization class is used to represent an organization such as a corporation or other autonomous entity. The class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. This class's properties are a subset of a related class, OtherOrganizationInformation, which defines ALL the group properties
        AND IN array form for directory compatibility. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , business_category text[] , facsimile_telephone_number text[] , locality_name text[] , mail text[] , organization_name text[] , postal_code text[] , state_or_province text[] , telephone_number text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.privilege_management_capabilities /* A subclass of Capabilities that defines the capabilities of the Privilege Management Service. */ ( id SERIAL PRIMARY KEY , shared_privilege_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.public_key_certificate /* A PublicKeyCertificate is a credential that is cryptographically signed by a trusted Certificate Authority (CA)
        AND issued to an authenticated entity (e.g., human user, service, etc.) called the Subject IN the certificate. The public key IN the certificate is cryptographically related to a private key that is held
        AND kept private by the authenticated Subject. The certificate
        AND its related private key can THEN
    be used for establishing trust relationships
        AND securing communications
WITH the Subject. Refer to the ITU/CCITT X.509 standard AS an example of such certificates. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , subject text[] , alt_subject text[] , instance_id text[] , issuer_name text[] , signature_algorithm text[] , other_signature_algorithm text[] , signature_algorithm_oid text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.role /* The Role object class is used to represent a position
        OR SET of responsibilities within an organization,
         organizational unit
        OR other scope,
        AND MAY be filled by a person
        OR persons (or non-human entities represented by ManagedSystemElement subclasses) - i.e., the 'role occupants'. The latter MAY be explicitly associated to a Role, by associating Identities
USING MemberOfCollection. The 'position or set of responsibilities' of a Role are represented AS a SET of rights defined by instances of the Privilege class,
        
        AND are also associated to the Role via MemberOfCollection. If Identities are NOT explicitly associated, instances of AuthorizationRule MUST be associated
WITH a Role
USING AuthorizationRuleAppliesToRole. The rule defines how subject entities are authorized for a Role
        AND to which target entities the Role applies. The Role class is defined so AS to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information
FROM LDAP-accessible directories. This class's properties are a subset of a related class, OtherRoleInformation, which defines all the group properties and uses arrays for directory compatibility. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , business_category text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.role_based_management_capabilities /* A subclass that extends the capabilities of the CIM_RoleBasedAuthorizationService. */ ( id SERIAL PRIMARY KEY , shared_privilege_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.role_limited_to_target /* The Role object class is used to represent a position or set of responsibilities within an organization, organizational unit or other scope. When explicitly restricting the target elements that may be accessed from this Role, this association MUST be used. */ ( id SERIAL PRIMARY KEY , role_id5 INTEGER REFERENCES role(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
CREATE TABLE public.user_contact /* UserContact contains the details related to contacting a user. This information will be promoted to UserEntity in a later major release of CIM, but cannot be promoted at this time since UserEntity is abstract today, with no keys. Key and required properties cannot be added to a class in a minor version release since this breaks backward compatibility. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , given_name text[] , surname text[] , mail text[] , user_id text[] , locality_name text[] , state_or_province text[] , postal_code text[] , telephone_number text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.users_credential /* CIM_UsersCredential is an association used to establish the credentials that may be used for a UsersAccess to a system or set of systems. Since the UsersAccess class is deprecated in lieu of CIM_Identity, this association is also deprecated and replaced by policy - where the AuthenticationCondition class describes the credentials that SHOULD be authenticated in order to establish the Identity. */ ( id SERIAL PRIMARY KEY , credential_id6 INTEGER REFERENCES credential(id) , users_access_id7 INTEGER REFERENCES users_access(id) ); 
CREATE TABLE public.x509_crl /* CIM_X509CRL describes Internet X509 Public Key Infrastructure (PKI) standard based Certificate Revocation List (CRL). CRL is issued by a Certificate Authority's (CA) toUPDATE the list of the certificates used IN the authentication. Upon application of a CRL to a SET of certificates,
         the certificates matched to those contained IN the CRL would be revoked
        AND invalidated for use IN authentication. Refer to the Internet X.509 PKI standard (RFC 3280) for more information. */ ( id SERIAL PRIMARY KEY , issued text[] , expires text[] , next_UPDATE text[] , version text[] , issuer_name text[] , instance_id text[] , signature_algorithm text[] , other_signature_algorithm text[] , signature_algorithm_oid text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.x509_certificate /* CIM_X509Certificate describes Internet X509 Public Key Infrastructure (PKI) standard based certificates. The certificates are signed by a trusted Certificate Authority (CA)
        OR by the owner of the certificate
        AND issued to an authenticated entity (e.g., human user, service, etc.) called the Subject IN the certificate. The public key IN the certificate is cryptographically related to a private key that is held
        AND kept private by the authenticated Subject. The certificate
        AND its related private key can THEN
    be used for establishing trust relationships
        AND securing communications
WITH the Subject. Refer to the Internet X.509 PKI standard (RFC 3280) for more information. */ ( id SERIAL PRIMARY KEY , subject text[] , alt_subject text[] , public_key_size text[] , is_valid text[] , public_key_algorithm text[] , path_length_constraint text[] , issuer_unique_id text[] , subject_unique_id text[] , trusted_root_certificate text[] , version text[] , issuer_name text[] , instance_id text[] , signature_algorithm text[] , other_signature_algorithm text[] , signature_algorithm_oid text[] , issued text[] , expires text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.installed_product /* The InstalledProduct object allows the grouping of SoftwareFeatures
        AND SoftwareElements that represent the result of the installation of a purchased Product. InstalledProduct is defined to be Weak to a Product. Often, Products are purchased once but may be installed several times IN different locations
    ON one
        OR more systems. ALL of the SoftwareElements
        AND SoftwareFeatures of a single install are grouped by an instance of InstalledProduct. These are defined
USING the associations, CollectedSoftwareFeatures
        AND Collected SoftwareElements. */ ( id SERIAL PRIMARY KEY , product_identifying_number text[] , product_name text[] , product_vendor text[] , product_version text[] , system_id text[] , collection_id text[] , name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.installed_product_image /* InstalledProductImage identifies the collection of Software Features
        AND SoftwareElements that are the result of the installation of the referenced Product. */ ( id SERIAL PRIMARY KEY , product_id6 INTEGER REFERENCES product(id) , installed_product_id7 INTEGER REFERENCES installed_product(id) ); 
        CREATE TABLE public.j2ee_connection_stats /* The J2eeConnectionStats class defines the performance statistics that are provided by a connection. JCA
        AND JDBC connection statistics are represented by this class. The semantics are determined by the class to which the ConnectionStats instance is associated via the CIM_ElementStatisticalData association. */ ( id SERIAL PRIMARY KEY , wait_time text[] , wait_time_max_time text[] , wait_time_min_time text[] , wait_time_total_time text[] , use_time text[] , use_time_max_time text[] , use_time_min_time text[] , use_time_total_time text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_ejbstats /* The J2eeEJBStats class defines the performance statistics that are available for ALL EJB component types. */ ( id SERIAL PRIMARY KEY , create_count text[] , remove_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_entity_bean_stats /* The J2eeEntityBeanStats class defines the performance statistics that are provided by entity beans. */ ( id SERIAL PRIMARY KEY , ready_count text[] , ready_low_water_mark text[] , ready_high_water_mark text[] , pooled_count text[] , pooled_low_water_mark text[] , pooled_high_water_mark text[] , create_count text[] , remove_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jcastats /* The J2eeJCAStats class defines the performance statistics that are provided by a JCA resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jdbcstats /* The J2eeJDBCStats class defines the performance statistics that are provided by a JDBC resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jmsconnection_stats /* The CIM_J2eeJMSConnectionStats class defines the performance statistics that are provided by a JMS connection. */ ( id SERIAL PRIMARY KEY , is_transactional text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jmsendpoint_stats /* The CIM_J2eeJMSEndpointStats class is a base class that defines the performance statistics that are provided by a JMS message producer
        OR JMS message consumer. */ ( id SERIAL PRIMARY KEY , expired_message_count text[] , message_count text[] , message_wait_time text[] , message_wait_time_max_time text[] , message_wait_time_min_time text[] , message_wait_time_total_time text[] , pending_message_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jmsproducer_stats /* The CIM_J2eeJMSProducerStats class defines the performance statistics that are provided by a JMS message producer. */ ( id SERIAL PRIMARY KEY , destination text[] , expired_message_count text[] , message_count text[] , message_wait_time text[] , message_wait_time_max_time text[] , message_wait_time_min_time text[] , message_wait_time_total_time text[] , pending_message_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jmssession_stats /* The CIM_J2eeJMSSessionStats class defines the performance statistics that are provided by a JMS session. */ ( id SERIAL PRIMARY KEY , durable_subscription_count text[] , expired_message_count text[] , message_count text[] , message_wait_time text[] , message_wait_time_max_time text[] , message_wait_time_min_time text[] , message_wait_time_total_time text[] , pending_message_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jmsstats /* The CIM_J2eeJMSStats class defines the performance statistics that are provided by a JMS resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jtastats /* The CIM_J2eeJTAStats class defines the performance statistics that are provided by a JTA resource. */ ( id SERIAL PRIMARY KEY , active_count text[] , committed_count text[] , rolledback_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_jvmstats /* The CIM_J2eeJVMStats class defines the performance statistics that are provided by a Java VM. */ ( id SERIAL PRIMARY KEY , heap_size text[] , heap_size_upper_bound text[] , heap_size_lower_bound text[] , heap_size_low_water_mark text[] , heap_size_high_water_mark text[] , up_time text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_java_mail_stats /* The J2eeJavaMailStats class defines the performance statistics that are provided by Java mail resources. */ ( id SERIAL PRIMARY KEY , sent_mail_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_managed_object_capabilities /* CIM_J2eeManagedObjectCapabilities is a class for defining additional capabilities of J2EE managed objects. It contains the attributes that are common to ALL J2EE managed objects. These common attributes are mapped to the corresponding J2EE classes
USING the CIM_ElementCapabilities association. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , state_manageable text[] , statistics_provider text[] , event_provider text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.j2ee_message_driven_bean_stats /* The J2eeMessageDrivenBeanStats class defines the performance statistics that are provided by message driven beans. */ ( id SERIAL PRIMARY KEY , message_count text[] , create_count text[] , remove_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.j2ee_servlet_stats /* The CIM_J2eeServletStats class defines the performance statistics that are provided by a Servlet component. */ ( id SERIAL PRIMARY KEY , service_time text[] , servlet_time_max_time text[] , service_time_min_time text[] , servlet_time_total_time text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
CREATE TABLE public.j2ee_session_bean_stats /* The J2eeSessionBeanStats class is a base class that defines the performance statistics that are provided by both stateful
        AND stateless session beans. */ ( id SERIAL PRIMARY KEY ,
         method_ready_count text[] ,
         method_ready_low_water_mark text[] ,
         method_ready_high_water_mark text[] ,
         create_count text[] ,
         remove_count text[] ,
         instance_id text[] ,
         element_name text[] ,
         start_statistic_time text[] ,
         statistic_time text[] ,
         sample_interval text[] ,
         rate_interval_end_time text[] ,
         rate_interval_start_time text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
        CREATE TABLE public.j2ee_stateful_session_bean_stats /* The J2eeStatefulSessionBeanStats class defines the performance statistics that are provided by a stateful session bean. */ ( id SERIAL PRIMARY KEY ,
         passive_count text[] ,
         passive_low_water_mark text[] ,
         passive_high_water_mark text[] ,
         method_ready_count text[] ,
         method_ready_low_water_mark text[] ,
         method_ready_high_water_mark text[] ,
         create_count text[] ,
         remove_count text[] ,
         instance_id text[] ,
         element_name text[] ,
         start_statistic_time text[] ,
         statistic_time text[] ,
         sample_interval text[] ,
         rate_interval_end_time text[] ,
         rate_interval_start_time text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.j2ee_stateless_session_bean_stats /* The J2eeStatelessSessionBeanStats class defines the performance statistics that are provided by a stateless session bean. */ ( id SERIAL PRIMARY KEY ,
         method_ready_count text[] ,
         method_ready_low_water_mark text[] ,
         method_ready_high_water_mark text[] ,
         create_count text[] ,
         remove_count text[] ,
         instance_id text[] ,
         element_name text[] ,
         start_statistic_time text[] ,
         statistic_time text[] ,
         sample_interval text[] ,
         rate_interval_end_time text[] ,
         rate_interval_start_time text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.software_element /* The CIM_SoftwareElement class is used to decompose a CIM_SoftwareFeature object into a SET of individually manageable
        OR deployable parts, for a particular platform. A SoftwareElement's platform is uniquely identified by its underlying hardware architecture and operating system (for example Sun Solaris on Sun Sparc or Windows NT on Intel platforms). As such, to understand the details of how the functionality of a particular SoftwareFeature is provided on a particular platform, the CIM_SoftwareElement objects referenced by CIM_SoftwareFeatureSoftwareElements associations are organized in disjoint sets based on the TargetOperatingSystem property. A CIM_SoftwareElement object captures the management details of a part or component in one of four states characterized by the SoftwareElementState property. */ ( id SERIAL PRIMARY KEY , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , other_target_os text[] , manufacturer text[] , build_number text[] , serial_number text[] , code_set text[] , identification_code text[] , language_edition text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.software_element_component /* SoftwareElements may have an arbitrarily complex hierarchy. SoftwareElementComponent is used to construct that hierarchy. It should not be used to represent dependency. */ ( id SERIAL PRIMARY KEY , software_element_id6 INTEGER REFERENCES software_element(id) , software_element_id7 INTEGER REFERENCES software_element(id) ); 
        CREATE TABLE public.software_feature /* The CIM_SoftwareFeature class defines a particular function or capability of a product or application system. This class captures a level of granularity describing a unit of installation, rather than the units that reflect how the product is built or packaged. The latter detail is captured using a CIM_SoftwareElement class. When a SoftwareFeature can exist on multiple platforms or operating systems (for example, a client component of a three tiered client/server application that runs on Solaris, Windows NT, and Windows 95), the Feature is a collection of all the SoftwareElements for these different platforms. In this case, the users of the model must be aware of this situation since typically they will be interested in a sub-collection of the SoftwareElements required for a particular platform. SoftwareFeatures are always defined in the context of a CIM_Product, using the CIM_ProductSoftwareFeature association. Features are delivered through Products. Optionally, SoftwareFeatures from one or more Products can be organized into ApplicationSystems using the CIM_ApplicationSystemSoftwareFeature association. */ ( id SERIAL PRIMARY KEY , identifying_number text[] , product_name text[] , vendor text[] , version text[] , name text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.software_feature_component /* The SoftwareFeatureComponent aggregation models a set of subordinate or independent Software Features of a Product. These are aggregated together to form a higher-level or large grain Feature under the same Product. */ ( id SERIAL PRIMARY KEY , software_feature_id6 INTEGER REFERENCES software_feature(id) , software_feature_id7 INTEGER REFERENCES software_feature(id) ); 
        CREATE TABLE public.software_feature_software_elements /* SoftwareFeatureSoftwareElements identifies the Software Elements that make up a particular SoftwareFeature. */ ( id SERIAL PRIMARY KEY , software_feature_id6 INTEGER REFERENCES software_feature(id) , software_element_id7 INTEGER REFERENCES software_element(id) ); 
        CREATE TABLE public.video_bioselement /* VideoBIOSElement represents the low-level software that is loaded into non-volatile storage and used to bring up, configure and access a ComputerSystem's VideoController
        AND Display. */ ( id SERIAL PRIMARY KEY , version text[] , manufacturer text[] , is_shadowed text[] , release_date text[] , name text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , other_target_os text[] , build_number text[] , serial_number text[] , code_set text[] , identification_code text[] , language_edition text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.video_biosfeature /* VideoBIOSFeature represents the capabilities of the low-level software that is used to bring up, configure
        AND use a ComputerSystem's VideoController and Display. */ ( id SERIAL PRIMARY KEY , identifying_number text[] , product_name text[] , vendor text[] , version text[] , name text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.video_biosfeature_video_bioselements /* A link between VideoBIOSFeature and its aggregated VideoBIOSElements. */ ( id SERIAL PRIMARY KEY , video_biosfeature_id6 INTEGER REFERENCES video_biosfeature(id) , video_bioselement_id7 INTEGER REFERENCES video_bioselement(id) ); 
        CREATE TABLE public.abstract_based_on /* Abstract BasedOn is an association describing how StorageExtents (or views of StorageExtents) can be assembled from lower level Extents (or views of extents). */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.abstract_element_allocated_from_pool /* AbstractElementAllocatedFromPool associates an instance of CIM_ManagedElement representing an allocated Resource with the CIM_ManagedElement from which it was allocated */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.acts_as_spare /* The ActsAsSpare association indicates which elements can spare or replace the other aggregated elements. The fact that a spare can operate in "hot standby" mode is specified on an element by element basis. The use of this class is being deprecated in lieu of using the IsSpare relationship. */ ( id SERIAL PRIMARY KEY , spare_group_id6 INTEGER REFERENCES spare_group(id) , managed_system_element_id7 INTEGER REFERENCES managed_system_element(id) , hot_standby text[] ); 
        CREATE TABLE public.allocation_capabilities /* CIM_AllocationCapabilities extends the CIM_Capabilities class for the purposes of expressing the resource allocation capabilities of the associated managed element for the allocation of a specific Resource Type. This class describes the supported types of allocations allowed, specific or general, the sharing modes supported for the device, dedicated and or shared and the system states where the addition or removal of the Resource Type is allowed. */ ( id SERIAL PRIMARY KEY , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , request_types_supported text[] , sharing_mode text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.collected_collections /* CIM_CollectedCollections is an aggregation association representing that a CollectionOfMSEs can itself be contained in a CollectionOfMSEs. */ ( id SERIAL PRIMARY KEY , collection_of_mses_id6 INTEGER REFERENCES collection_of_mses(id) , collection_of_mses_id7 INTEGER REFERENCES collection_of_mses(id) ); 
        CREATE TABLE public.collected_mses /* CIM_CollectedMSEs is a generic association used to establish the members of the grouping object, CollectionOf MSEs. */ ( id SERIAL PRIMARY KEY , collection_of_mses_id6 INTEGER REFERENCES collection_of_mses(id) , managed_system_element_id7 INTEGER REFERENCES managed_system_element(id) ); 
        CREATE TABLE public.collection_configuration /* Note: The Configuration class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of instances of Setting or SettingData. This relationship allows the reuse of the collection-to-Setting and element-to-SettingData associations instead of defining peer associations specifically for Configurations. Deprecated description: This association relates a Configuration object to one or more CollectionOfMSEs objects. The Configuration object represents a certain behavior or a desired functional state for the associated Collection. */ ( id SERIAL PRIMARY KEY , collection_of_mses_id6 INTEGER REFERENCES collection_of_mses(id) , configuration_id7 INTEGER REFERENCES configuration(id) ); 
        CREATE TABLE public.collection_setting /* CollectionSetting represents the association between a CollectionOfMSEs class and the Setting classes that are defined for it. */ ( id SERIAL PRIMARY KEY , collection_of_mses_id5 INTEGER REFERENCES collection_of_mses(id) , setting_id6 INTEGER REFERENCES setting(id) ); 
        CREATE TABLE public.concrete_dependency /* CIM_ConcreteDependency is a generic association used to establish dependency relationships between ManagedElements. It is defined as a concrete subclass of the abstract CIM_Dependency class, to be used in place of many specific subclasses of Dependency that add no semantics, that is subclasses that do not clarify the type of dependency, update cardinalities, or add or remove qualifiers. Note that when you define additional semantics for Dependency, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Dependency. ConcreteDependency is limited in its use as a concrete form of a general dependency. It was deemed more prudent to create this concrete subclass than to change Dependency from an abstract to a concrete class. Dependency already had multiple abstract subclasses in the CIM Schema, and wider industry usage and impact could not be anticipated. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.concrete_identity /* CIM_ConcreteIdentity associates two elements that represent different aspects of the same underlying entity. It is defined as a concrete subclass of the abstract CIM_LogicalIdentity class, to be used in place of many specific subclasses of LogicalIdentity that add no semantics, that is, subclasses that do not clarify the type of identity, update cardinalities, or add or remove qualifiers. Note that when you define additional semantics for LogicalIdentity, this class should not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_LogicalIdentity. ConcreteIdentity is limited in its use as a concrete form of a general identity relationship. It was deemed more prudent to create this concrete subclass than to change LogicalIdentity from an abstract to a concrete class. LogicalIdentity already had multiple abstract subclasses in the CIM Schema, and wider industry usage and impact could not be anticipated. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.contained_location /* ContainedLocation defines one location in the context of another. For example, a campus might 'contain' a building, which in turn 'contains' a floor. */ ( id SERIAL PRIMARY KEY , location_id7 INTEGER REFERENCES location(id) , location_id8 INTEGER REFERENCES location(id) ); 
        CREATE TABLE public.element_allocated_from_pool /* ElementAllocatedFromPool associates an instance of CIM_LogicalElement representing an allocated Resource with the CIM_ResourcePool from which it was allocated. */ ( id SERIAL PRIMARY KEY , resource_pool_id5 INTEGER REFERENCES resource_pool(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) ); 
        CREATE TABLE public.element_location /* ElementLocation associates a ManagedElement with a location for positioning, inventory, maintenance and similar purposes. PhysicalElements can certainly have locations. They are explicitly defined in a subclass, PhysicalElement Location. However, other ManagedElements can also be associated with locations. For example, Organizations can be 'in' one or more locations, or Services can be restricted to a location. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , location_id6 INTEGER REFERENCES location(id) ); 
        CREATE TABLE public.element_profile /* Note: The Profile class is being deprecated in lieu of using a ConcreteComponent relationship to indicate a hierarchy of Setting or SettingData instances. This relationship allows the reuse of the element to Setting or SettingData associations instead of defining a peer association specifically for Profiles. Deprecated description: ElementProfile represents the association between ManagedElements and the Profiles (collection of settings) that are defined for them. This association indicates that the settings that are collected by the Profile apply to the associated ManagedElement. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , profile_id7 INTEGER REFERENCES profile(id) ); 
        CREATE TABLE public.element_setting /* ElementSetting represents the association between ManagedSystemElements and the Setting classes defined for them. */ ( id SERIAL PRIMARY KEY , managed_system_element_id5 INTEGER REFERENCES managed_system_element(id) , setting_id6 INTEGER REFERENCES setting(id) ); 
        CREATE TABLE public.element_software_identity /* ElementSoftwareIdentity allows a Managed Element to report its software related asset information (firmware, drivers, configuration software, and etc.) */ ( id SERIAL PRIMARY KEY , software_identity_id5 INTEGER REFERENCES software_identity(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , upgrade_condition text[] , other_upgrade_condition text[] ); 
        CREATE TABLE public.ethernet_port_allocation_setting_data /* The EthernetPortAllocationSettingData class represents settings specifically related to the allocation of an EthernetPort that are outside the scope of the EthernetPort CIM class itself. These settings are used to provide information specific to the resource itself. */ ( id SERIAL PRIMARY KEY , desired_vlanendpoint_mode text[] , other_endpoint_mode text[] , default_port_vid text[] , default_priority text[] , group_id text[] , manager_id text[] , network_port_profile_id text[] , network_port_profile_idtype text[] , other_network_port_profile_idtype_info text[] , port_correlation_id text[] , port_vid text[] , promiscuous text[] , receive_bandwidth_limit text[] , receive_bandwidth_reservation text[] , source_macfiltering_enabled text[] , vsi_type_id text[] , vsi_type_idversion text[] , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , pool_id text[] , consumer_visibility text[] , allocation_units text[] , virtual_quantity text[] , reservation text[] , limit_ text[] , weight text[] , automatic_allocation text[] , automatic_deallocation text[] , parent text[] , address text[] , mapping_behavior text[] , address_on_parent text[] , virtual_quantity_units text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.extra_capacity_group /* A class derived from RedundancyGroup indicating that the aggregated elements have more capacity or capability than is needed. An example of this type of redundancy is the installation of N+1 power supplies or fans in a system. The use of this class is being deprecated in lieu of using RedundancySet. */ ( id SERIAL PRIMARY KEY , min_number_needed text[] , load_balanced_group text[] , creation_class_name text[] , name text[] , redundancy_status text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.job /* A Job is a LogicalElement that represents an executing unit of work, such as a script or a print job. A Job is distinct from a Process in that a Job can be scheduled or queued, and its execution is not limited to a single system. */ ( id SERIAL PRIMARY KEY , job_status text[] , time_submitted text[] , scheduled_start_time text[] , start_time text[] , elapsed_time text[] , job_run_times text[] , run_month text[] , run_day text[] , run_day_of_week text[] , run_start_interval text[] , local_or_utc_time text[] , until_time text[] , notify text[] , owner text[] , priority text[] , percent_complete text[] , delete_on_completion text[] , error_code text[] , error_description text[] , recovery_action text[] , other_recovery_action text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.physical_element_location /* PhysicalElementLocation associates a PhysicalElement with a Location object for inventory or replacement purposes. */ ( id SERIAL PRIMARY KEY , physical_element_id5 INTEGER REFERENCES physical_element(id) , location_id6 INTEGER REFERENCES location(id) ); 
        CREATE TABLE public.processor_allocation_setting_data /* The ProcessorAllocationSettingData class represents resource allocation settings specifically related to the allocation of a processor (CPU). */ ( id SERIAL PRIMARY KEY , processor_architecture text[] , instruction_set text[] , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , pool_id text[] , consumer_visibility text[] , allocation_units text[] , virtual_quantity text[] , reservation text[] , limit_ text[] , weight text[] , automatic_allocation text[] , automatic_deallocation text[] , parent text[] , address text[] , mapping_behavior text[] , address_on_parent text[] , virtual_quantity_units text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.product_software_component /* Indicates that the referenced SoftwareIdentity is acquired as part of a Product. This class is maintained for compatibility with existing implementations, but may be deprecated in favor of ProductElementComponent in the future. */ ( id SERIAL PRIMARY KEY , software_identity_id7 INTEGER REFERENCES software_identity(id) , product_id8 INTEGER REFERENCES product(id) ); 
        CREATE TABLE public.redundancy_component /* A RedundancyGroup aggregates Managed System Elements and indicates that these elements, taken together, provide redundancy. All elements aggregated in a RedundancyGroup should be instantiations of the same object class. The use of this class is being depreacted in lieu of using MemberOfCollection in conjunction with RedundancySet. */ ( id SERIAL PRIMARY KEY , redundancy_group_id7 INTEGER REFERENCES redundancy_group(id) , managed_system_element_id8 INTEGER REFERENCES managed_system_element(id) ); 
        CREATE TABLE public.redundancy_set /* A class derived from SystemSpecificCollection that is a special collection of ManagedElements. This collection indicates that the aggregated elements together provide redundancy, or that redundancy is provided via sparing. All elements collected in a RedundancySet SHOULD be instantiations of the same object class. */ ( id SERIAL PRIMARY KEY , redundancy_status text[] , min_number_needed text[] , max_number_supported text[] , vendor_identifying_info text[] , load_balance_algorithm text[] , other_load_balance_algorithm text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scoped_setting /* ScopedSetting defines a setting in the context of the ManagedElement in which it is located. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , scoped_setting_data_id6 INTEGER REFERENCES scoped_setting_data(id) ); 
        CREATE TABLE public.statistics_collection /* A subclass of SystemSpecificCollection which collects together statistics for a system. This class forms an 'anchor point' from which all the statistics kept for the system can be found (via the MemberOfCollection associations). */ ( id SERIAL PRIMARY KEY , sample_interval text[] , time_last_sampled text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_redundancy_set /* A class derived from RedundancySet describing storage-related redundancy information. StorageRedundancySets are used to protect user data. They aggregate one or more underlying StorageExtents, associated via MemberOfCollection, and produce one or more higher-level Extents. The Extents are related to each other via a BasedOn association. And, the higher level Extent is related to the StorageRedundancy Set via the LogicalIdentity association. Note that StorageRedundancySets may overlap in their aggregation of members. If this occurs, the overlapping Extents SHOULD NOT contain any check data. */ ( id SERIAL PRIMARY KEY , type_of_algorithm text[] , other_algorithm text[] , redundancy_status text[] , min_number_needed text[] , max_number_supported text[] , vendor_identifying_info text[] , load_balance_algorithm text[] , other_load_balance_algorithm text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.allocated_from_storage_pool_view /* The CIM_AllocatedFromStoragePoolView instance is a view that is derived from the CIM_AllocatedFromStoragePool association between the StorageVolume or LogicalDisk (of the CIM_VolumeView) and the StoragePool from which the StorageVolume (or LogicalDisk is allocated. Note that if the StorageVolume (or LogicalDisk) is allocated from multiple StoragePools there will be multiple AllocatedFromStoragePoolView instances for the StorageVolume (or LogicalDisk). This association is between a view class and a normalized class. It can go in either direction (e.g., VolumeView dependent on a StoragePool or a StorageVolume dependent on a StoragePoolView). */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , afsp_space_consumed text[] ); 
        CREATE TABLE public.allocated_from_storage_pool_view_view /* The CIM_AllocatedFromStoragePoolView instance is a view that is derived from the CIM_AllocatedFromStoragePool association between a VolumeView or StoragePoolView and the parent StoragePool from which the VolumeView or StoragePoolView is allocated. */ ( id SERIAL PRIMARY KEY , storage_pool_view_id5 INTEGER REFERENCES storage_pool_view(id) , view_id6 INTEGER REFERENCES view(id) , afsp_space_consumed text[] ); 
        CREATE TABLE public.associated_block_statistics_manifest_collection /* Instances of this class associate a BlockStatisticsManifestCollection to the StatisticsCollection to which is is applied. The ManifestCollection contains the Manifests that are used to filter requests for the retrieval of statistics. */ ( id SERIAL PRIMARY KEY , statistics_collection_id5 INTEGER REFERENCES statistics_collection(id) , block_statistics_manifest_collection_id6 INTEGER REFERENCES block_statistics_manifest_collection(id) ); 
        CREATE TABLE public.associated_element_tier /* Define the association between an element and one or more storage tiers. */ ( id SERIAL PRIMARY KEY , storage_tier_id6 INTEGER REFERENCES storage_tier(id) , logical_element_id7 INTEGER REFERENCES logical_element(id) , allocated text[] ); 
        CREATE TABLE public.asymmetric_accessibility /* This association indicates the accessibility of StorageVolumes in the StorageResourceLoadGroup through ports in the associated TargetPortGroup. */ ( id SERIAL PRIMARY KEY , target_port_group_id5 INTEGER REFERENCES target_port_group(id) , storage_resource_load_group_id6 INTEGER REFERENCES storage_resource_load_group(id) , current_access_state text[] , normal_access_state text[] ); 
        CREATE TABLE public.based_on_view /* The CIM_BasedOnView instance is a view that is derived from CIM_BasedOn between the CIM_StorageExtent (or StorageVolume or LogicalDisk) instance and another CIM_StorageExtent where one or both of the references are to a View Class (e.g.,, VolumeView Dependent or DiskDriveView Antecedent). */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , bo_ending_address text[] , bo_order_index text[] , bo_starting_address text[] , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.block_statistics_capabilities /* A specialization of the StatisticsCapabilities class that describes the capabilities of a BlockStatisticsService, which provides statistical data for instances of BlockStatisticalData. */ ( id SERIAL PRIMARY KEY , clock_tick_interval text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.device_masking_group /* Device (aka StorageVolumes) Masking Group. */ ( id SERIAL PRIMARY KEY , element_name text[] , delete_on_empty text[] , delete_when_becomes_unassociated text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fc_port_capabilities /* FibreChannel port control and configuration capabilities. */ ( id SERIAL PRIMARY KEY , max_npivlogins text[] , npiv_supported text[] , speed_configurable text[] , network_ids_configurable text[] , network_ids_format text[] , auto_sense_speed_configurable text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.group_in_disk_group /* CIM_GroupInDiskGroup describes that a DiskGroup can be divided into smaller named Collections. */ ( id SERIAL PRIMARY KEY , disk_group_id6 INTEGER REFERENCES disk_group(id) , disk_group_id7 INTEGER REFERENCES disk_group(id) ); 
        CREATE TABLE public.group_masking_mapping_capabilities /* A subclass of CIM_ProtocolControllerMaskingCapabilities that defines the group masking-related capabilities of a ProtocolController. */ ( id SERIAL PRIMARY KEY , ports_per_view text[] , client_selectable_device_numbers text[] , attach_device_supported text[] , one_hardware_idper_view text[] , unique_unit_numbers_per_port text[] , privilege_denied_supported text[] , protocol_controller_requires_authorized_identity text[] , protocol_controller_supports_collections text[] , expose_paths_supported text[] , create_protocol_controller_supported text[] , maximum_map_count text[] , spc_allows_no_lus text[] , spc_allows_no_targets text[] , spc_allows_no_initiators text[] , spc_supports_default_views text[] , expose_paths_with_name_and_host_type_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.initiator_masking_group /* Initiator Port Masking Group (StorageHardwareIDs). */ ( id SERIAL PRIMARY KEY , element_name text[] , consistent_logical_unit_number text[] , delete_on_empty text[] , delete_when_becomes_unassociated text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.operational_power_statistics_capabilities /* A specialization of the StatisticsCapabilities class that describes the capabilities of a OperationalPowerStatisticsService, which provides statistical data for instances of OperationalPowerStatisticalData. */ ( id SERIAL PRIMARY KEY , clock_tick_interval text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.print_input_tray /* This class represents the PrintInputTray component of a Printer (print device). It contains properties that describe a device capable of providing media for input to the printing process. Note: A PrintInputTray shall be associated with exactly one Printer via an instance of the PrinterComponent class. See: Model in section 2 of Printer MIB (RFC 3805). */ ( id SERIAL PRIMARY KEY , element_name text[] , is_default text[] , localized_description text[] , type text[] , other_type_description text[] , capacity_unit text[] , other_capacity_unit text[] , max_capacity_basis text[] , max_capacity text[] , current_level_basis text[] , current_level text[] , availability_status text[] , other_availability_status text[] , non_critical_alerts_present text[] , critical_alerts_present text[] , media_size_name text[] , media_name text[] , media_weight_basis text[] , media_weight text[] , media_type text[] , media_color text[] , instance_id text[] , snmp_row_id text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.print_interpreter /* This class represents the PrintInterpreter component of a Printer (print device). It contains properties that describe the PrintInterpreter, including language type, language level, maximum resolution, default input character set, and status. Note: A PrintInterpreter shall be associated with exactly one Printer via an instance of the PrinterComponent class. A PrintInterpreter may be associated with a PrintChannel (for Job Control Language or Page Description Language defaults) via an instance of AssociatedPrintInterpreter. See: Model in section 2 of Printer MIB (RFC 3805). */ ( id SERIAL PRIMARY KEY , localized_description text[] , lang_type text[] , other_lang_type_description text[] , lang_level text[] , addressability_basis text[] , feed_addressability text[] , x_feed_addressability text[] , default_char_set_in text[] , availability_status text[] , other_availability_status text[] , non_critical_alerts_present text[] , critical_alerts_present text[] , instance_id text[] , snmp_row_id text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.print_job /* Description of a print request that is either waiting on a Queue for a Printer to become available or in the process of being output on a Printer, or that has previously been printed on a Printer. PrintJobs are weak to their current Queue, or to the last Queue that held them. The ABNF for CIM references to PWG Standards and MIBs is in the directory 'ftp://ftp.pwg.org/pub/pwg/general/process' in the file 'pwg-cim-references-format-20060309.txt'. An example for a MappingStrings reference to a PWG Standard is 'PWG5101-1.PWG|Section 4 Media Color Names'. An example for a MappingStrings reference to a PWG MIB is 'MIB.PWG|PWG-IMAGING-COUNTER-MIB.icMonitorCompletedJobs'. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , queue_creation_class_name text[] , queue_name text[] , job_status text[] , job_id text[] , scheduling_information text[] , job_size text[] , language text[] , required_paper_type text[] , copies text[] , horizontal_resolution text[] , vertical_resolution text[] , char_set text[] , natural_language text[] , number_up text[] , print_job_status text[] , time_completed text[] , job_origination text[] , elapsed_time text[] , element_name text[] , start_time text[] , time_submitted text[] , scheduled_start_time text[] , job_run_times text[] , run_month text[] , run_day text[] , run_day_of_week text[] , run_start_interval text[] , local_or_utc_time text[] , until_time text[] , notify text[] , owner text[] , priority text[] , percent_complete text[] , delete_on_completion text[] , error_code text[] , error_description text[] , recovery_action text[] , other_recovery_action text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.print_marker /* This class represents the PrintMarker component of a Printer (print device). It contains properties that describe the PrintMarker technology, capabilities, counters, and status. Note: A PrintMarker shall be associated with exactly one Printer via an instance of the PrinterComponent class. See: Model in section 2 of Printer MIB (RFC 3805). */ ( id SERIAL PRIMARY KEY , is_default text[] , mark_tech text[] , other_mark_tech_description text[] , counter_unit text[] , other_counter_unit text[] , life_count text[] , power_on_count text[] , process_colorants text[] , spot_colorants text[] , availability_status text[] , other_availability_status text[] , non_critical_alerts_present text[] , critical_alerts_present text[] , addressability_basis text[] , feed_addressability text[] , x_feed_addressability text[] , instance_id text[] , snmp_row_id text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.print_supply /* This class represents a PrintSupply for a PrintMarker or PrintFinisher component of a Printer (print device). It contains a property that specifies if this instance represents a PrintSupply represents a container (for a supply that is consumed) or a receptacle (for waste that is produced). It also contains properties that describe the PrintSupply type, capacity, and remaining capacity. For PrintMarker colorants, it also contains properties that describe colorant role (spot or process), name, and tonality. Note: A PrintSupply shall be associated with exactly one Printer via an instance of the ConcreteComponent class. A PrintSupply shall be associated with exactly one PrintMarker or PrintFinisher via an instance of AssociatedPrintSupply class. See: Model in section 2 of Printer MIB (RFC 3805) and section 3 of Finisher MIB (RFC 3806). */ ( id SERIAL PRIMARY KEY , localized_description text[] , classification text[] , other_classification text[] , type text[] , other_type_description text[] , supply_unit text[] , other_supply_unit text[] , max_capacity_basis text[] , max_capacity text[] , remaining_capacity_basis text[] , remaining_capacity text[] , colorant_role text[] , other_colorant_role text[] , colorant_name text[] , other_colorant_name text[] , colorant_tonality text[] , instance_id text[] , snmp_row_id text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.query_statistics_collection /* A subclass of SystemSpecificCollection which collects together statistics and gathers them into an efficient representation. This enables very large numbers of statistics to be efficiently gathered via CIM Indications or Operations. */ ( id SERIAL PRIMARY KEY , query text[] , query_language text[] , selected_encoding text[] , selected_names text[] , selected_types text[] , selected_values text[] , selected_rate_names text[] , selected_rate_types text[] , selected_rate_values text[] , sample_interval text[] , time_last_sampled text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.remote_replication_collection /* A RemoteReplicationCollection collects all paths (for example, ProtocolEndpoints) that provide access to a remote system for replication operations. */ ( id SERIAL PRIMARY KEY , element_name text[] , active text[] , delete_on_unassociated text[] , hardware_compression_enabled text[] , software_compression_enabled text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_pool_diagnostic_service_capabilities /* This class defines the permissible settings that can be used for storage pool diagnostic tests. */ ( id SERIAL PRIMARY KEY , supported_test_warnings text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.storage_settings_associated_to_capabilities /* This association define StorageSettings that reflect the capabilities of the associated StorageCapabilities. The associated StorageSetting may not define the operational characteristics (through settings properties) of any storage element. Certain StorageSetting instances can be defined as "Fixed = Not Changeable" by using the "ChangeableType" attribute. "Fixed" settings have this special association. This association should be defined between "Fixed - Not Changeable" instances of StorageSetting with the StorageCapabilities instances that are associated with the StoragePools which support the storage characteristics described by the StorageSetting instance. Fixed settings may be associated to many StorageCapabilities. */ ( id SERIAL PRIMARY KEY , storage_capabilities_id5 INTEGER REFERENCES storage_capabilities(id) , storage_setting_id6 INTEGER REFERENCES storage_setting(id) , default_setting text[] ); 
        CREATE TABLE public.storage_settings_generated_from_capabilities /* This association define StorageSettings that reflect the capabilities of the associated StorageCapabilities. The associated StorageSetting may not define the operational characteristics (through settings properties) of any storage element. StorageSettingsGeneratedFromCapabilities is the association between instances of StorageCapabilities and those instances of StorageSetting that have been created from the StorageCapabilities instance using the StorageCapabilities "CreateSetting" method. These settings have a StorageSetting.ChangeableType of "Changeable - Transient" or "Changeable - Persistent" The settings associated by this class reflect the capabilities from which they are generated. These setting SHALL be associated with one StorageCapabilities. A generated setting can be deleted by the implementation at any time if it is a a StorageSetting of "Changed - Transient" ChangeableType. A client should not use this association to find transient Settings to subsequently modify and/or use because that would increase the likelihood of setting contention across clients. Instead the implementation uses this association to define transient settings, which can be located through any means, that have special temporal based life cycle. DefaultSetting is meaningless in this class. */ ( id SERIAL PRIMARY KEY , storage_capabilities_id5 INTEGER REFERENCES storage_capabilities(id) , storage_setting_id6 INTEGER REFERENCES storage_setting(id) , default_setting text[] ); 
        CREATE TABLE public.zone /* A Zone is a group of Ports, Endpoints, Nodes, Zones, and NamedAddressCollections that are managed collectively by the same domain. The managing domain is indicated by the HostedCollection association. For Fibre Channel, a Zone indicates a set of members that are participating together in the fabric. */ ( id SERIAL PRIMARY KEY , element_name text[] , active text[] , zone_type text[] , other_zone_type_description text[] , zone_sub_type text[] , other_zone_sub_type_description text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.zone_set /* A ZoneSet is a group of zones that are managed collectively by the same domain. The managing domain is indicated by the HostedCollection association. For example, for Fibre Channel, this property would indicate a set of zones that are part of a fabric. The zones are under enforcement by the fabric, only if the Zoneset is set to active. */ ( id SERIAL PRIMARY KEY , element_name text[] , active text[] , connectivity_status text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.class_creation /* CIM_ClassCreation notifies when a new class is defined in the schema. */ ( id SERIAL PRIMARY KEY , class_definition text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.class_deletion /* CIM_ClassDeletion notifies when a class is deleted from the schema. */ ( id SERIAL PRIMARY KEY , class_definition text[] , indication_identifier text[] , indication_time text[] , perceived_severity text[] , other_severity text[] , indication_filter_name text[] , sequence_context text[] , sequence_number text[] ); 
        CREATE TABLE public.formatted_indication_subscription /* A subclass of IndicationSubscription that defines the text formatting of Indication information. The TextFormatOwningEntity, TextFormatID, TextFormat, and TextFormatParameters properties are used to describe a human-readable representation of the Indication as defined by the referenced CIM_IndicationFilter. This representation MAY be used by the CIM_ListenerDestination when the intended consumer of the Indication is human. For example, this format could be used when writing the Indication to a system log or sending an e-mail notification to a system administrator. */ ( id SERIAL PRIMARY KEY , indication_filter_id5 INTEGER REFERENCES indication_filter(id) , listener_destination_id6 INTEGER REFERENCES listener_destination(id) , text_format_owning_entity text[] , text_format_id text[] , text_format text[] , on_fatal_error_policy text[] , other_on_fatal_error_policy text[] , failure_trigger_time_interval text[] , subscription_state text[] , other_subscription_state text[] , time_of_last_state_change text[] , subscription_duration text[] , subscription_start_time text[] , subscription_time_remaining text[] , repeat_notification_policy text[] , other_repeat_notification_policy text[] , repeat_notification_interval text[] , repeat_notification_gap text[] , repeat_notification_count text[] , subscription_info text[] , alert_on_state_change text[] , last_indication_identifier text[] , last_indication_production_date_time text[] ); 
        CREATE TABLE public.contained_proposal /* ContainedProposal holds an ordered list of SAProposals that make up an SANegotiationAction. If the referenced NegotiationAction is an IKEAction, then the SAProposal objects MUST be IKEProposals. If the referenced NegotiationAction object is an IPsecTransport/TunnelAction, then the referenced SAProposal objects MUST be IPsecProposals. */ ( id SERIAL PRIMARY KEY , sa_negotiation_action_id7 INTEGER REFERENCES sa_negotiation_action(id) , sa_proposal_id8 INTEGER REFERENCES sa_proposal(id) , sequence_number text[] ); 
        CREATE TABLE public.ike_action /* IKEAction specifies the parameters to use for an IPsec IKE phase 1 negotiation. */ ( id SERIAL PRIMARY KEY , exchange_mode text[] , use_ikeidentity_type text[] , vendor_id text[] , aggressive_mode_group_id text[] , min_lifetime_seconds text[] , idle_duration_seconds text[] , min_lifetime_kilobytes text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ike_proposal /* IKEProposal contains the parameters necessary to drive the phase 1 IKE negotiation. */ ( id SERIAL PRIMARY KEY , max_lifetime_seconds text[] , max_lifetime_kilobytes text[] , cipher_algorithm text[] , other_cipher_algorithm text[] , hash_algorithm text[] , other_hash_algorithm text[] , authentication_method text[] , other_authentication_method text[] , group_id text[] , vendor_id text[] , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.i_psec_action /* IPsecAction specifies the parameters to use for an IPsec phase 2 negotiation. */ ( id SERIAL PRIMARY KEY , use_pfs text[] , use_phase1_group text[] , group_id text[] , vendor_id text[] , granularity text[] , other_granularity text[] , min_lifetime_seconds text[] , idle_duration_seconds text[] , min_lifetime_kilobytes text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_psec_proposal /* The class IPsecProposal adds no new properties, but inherits proposal properties from SAProposal as well as associating the security association transforms necessary for building an IPsec proposal (see the class ContainedTransform). */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.i_psec_transport_action /* IPsecTransportAction is used to specify that a transport-mode SA should be negotiated. */ ( id SERIAL PRIMARY KEY , use_pfs text[] , use_phase1_group text[] , group_id text[] , vendor_id text[] , granularity text[] , other_granularity text[] , min_lifetime_seconds text[] , idle_duration_seconds text[] , min_lifetime_kilobytes text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_psec_tunnel_action /* IPsecTunnelAction is used to specify that a tunnel-mode SA should be negotiated. */ ( id SERIAL PRIMARY KEY , df_handling text[] , use_pfs text[] , use_phase1_group text[] , group_id text[] , vendor_id text[] , granularity text[] , other_granularity text[] , min_lifetime_seconds text[] , idle_duration_seconds text[] , min_lifetime_kilobytes text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.preconfigured_saaction /* Subclasses of PreconfiguredSAAction are used to create SAs using preconfigured, hard-wired algorithms and keys. No negotiation is necessary. Note that this class is defined as concrete, since its superclass is also concrete. However, it should not be directly instantiated, but one of its subclasses used instead. Also note that: - The SPI for a preconfigured SA action is contained in the association, TransformOfPreconfiguredAction. - The session key (if applicable) is contained in an instance of SharedSecret. For an instance of the SharedSecret class: The session key is stored in the Secret property; the property protocol contains one of the values, "ESP-encrypt", "ESP-auth" or "AH"; and, the class' property algorithm contains the algorithm used to protect the secret. (The latter can be "PLAINTEXT" if the IPsec entity has no secret storage.) The value of the class' RemoteID property is the concatenation of the remote IPsec peer IP address in dotted decimal, of the character "/", of "IN" (or respectively "OUT") for inbound/outbound SAs, of the character "/" and of the hexadecimal representation of the SPI. */ ( id SERIAL PRIMARY KEY , lifetime_kilobytes text[] , lifetime_seconds text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.preconfigured_transport_action /* PreconfiguredTransportAction is used to create transport-mode SAs using preconfigured, hard-wired algorithms and keys. Note that the SPI for a preconfigured SA action is contained in the association, TransformOfPreconfiguredAction. */ ( id SERIAL PRIMARY KEY , lifetime_kilobytes text[] , lifetime_seconds text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.preconfigured_tunnel_action /* PreconfiguredTunnelAction is used to create tunnel-mode SAs using preconfigured, hard-wired algorithms and keys. Note that the SPI for a preconfigured SA action is contained in the association, TransformOfPreconfiguredAction. */ ( id SERIAL PRIMARY KEY , df_handling text[] , lifetime_kilobytes text[] , lifetime_seconds text[] , do_packet_logging text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_action_name text[] , do_action_logging text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.sa_rule /* SARule is a base class for defining IKE and IPsec Rules. Although concrete (because it subclasses from a concrete class), it is not intended to be instantiated. It defines a common connection point for associating conditions and actions for both types of rules. Note that each valid PolicyGroup containing SARules MUST use a unique priority number for the Rule in the aggregation, PolicySetComponent.Priority. */ ( id SERIAL PRIMARY KEY , limit_negotiation text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , policy_rule_name text[] , condition_list_type text[] , rule_usage text[] , priority text[] , mandatory text[] , sequenced_actions text[] , execution_strategy text[] , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.transform_of_preconfigured_action /* TransformOfPreconfiguredAction defines the transforms used by a preconfigured IPsec action. Two, four or six SATransforms can be associated to a PreconfiguredSAAction (applied to the inbound and outbound traffic, as indicated by the Direction property of this association). The order of application of the SATransforms is implicitly defined in RFC2401. */ ( id SERIAL PRIMARY KEY , sa_transform_id6 INTEGER REFERENCES sa_transform(id) , preconfigured_saaction_id7 INTEGER REFERENCES preconfigured_saaction(id) , spi text[] , inbound_direction text[] ); 
        CREATE TABLE public.element_conforms_to_profile /* The CIM_ElementConformsToProfile association defines the RegisteredProfiles to which the referenced ManagedElement is conformant. Note: This association may apply to any Managed Element. Typical usage will apply it to a higher level instance, such as a System, NameSpace, or Service. When applied to a higher level instance, all constituent parts MUST behave appropriately in support of the ManagedElement's conformance to the named RegisteredProfile. */ ( id SERIAL PRIMARY KEY , registered_profile_id5 INTEGER REFERENCES registered_profile(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.referenced_profile /* A profile that is referenced by another RegisteredProfile. */ ( id SERIAL PRIMARY KEY , registered_profile_id5 INTEGER REFERENCES registered_profile(id) , registered_profile_id6 INTEGER REFERENCES registered_profile(id) ); 
        CREATE TABLE public.sub_profile_requires_profile /* A subprofile requires another RegisteredProfile for context. This association mandates the scoping relationship
    BETWEEN a subprofile
        AND its scoping profile. */ ( id SERIAL PRIMARY KEY , registered_profile_id6 INTEGER REFERENCES registered_profile(id) , registered_sub_profile_id7 INTEGER REFERENCES registered_sub_profile(id) ); 
        CREATE TABLE public.wbem_protocol_service_capabilities /* CIM_WBEMProtocolServiceCapabilities defines the capabilities for a WBEM Protocol. */ ( id SERIAL PRIMARY KEY , generic_operation_capabilities text[] , max_connections text[] , max_listening_ports text[] , listening_port_management_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.ws_management_capabilities /* WS-Management Capabiltiies. For more information see the WS-Management specification, DSP0226. */ ( id SERIAL PRIMARY KEY , x_path_features text[] , generic_operation_capabilities text[] , max_connections text[] , max_listening_ports text[] , listening_port_management_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.logical_element_unit_of_work_def /* This association links a LogicalElement to the UnitsOfWork that it can perform. For example, a Printer Device may have associated UnitOfWorkDefinitions representing PrintJobs. This is a Dependency relationship since the Definitions are given context by the LogicalElement. */ ( id SERIAL PRIMARY KEY , logical_element_id5 INTEGER REFERENCES logical_element(id) , unit_of_work_definition_id6 INTEGER REFERENCES unit_of_work_definition(id) ); 
        CREATE TABLE public.started_uo_w /* This association links a UnitOfWork (which is a 'started' transaction) to its Definition. */ ( id SERIAL PRIMARY KEY , unit_of_work_definition_id5 INTEGER REFERENCES unit_of_work_definition(id) , unit_of_work_id6 INTEGER REFERENCES unit_of_work(id) ); 
        CREATE TABLE public.sub_uo_wdef /* This association defines the sub-UnitsOfWork (the sub- transactions) for a particular UnitOfWorkDefinition. For example, an 'AddOrder' UnitOfWork could have sub-Units of 'ValidateCustomer', 'ValidatePartNumber', 'UpdateDatabase', etc. This is a Dependency relationship since the sub-UnitsOf Work are put IN context relative to the parent Unit. It is NOT an aggregation relationship - since (using another example) a 'DatabaseWrite' transaction is likely to be dependent upon a 'DiskWrite', but the two transactions are separate concepts
        AND one is NOT 'contained' by the other. */ ( id SERIAL PRIMARY KEY , unit_of_work_definition_id5 INTEGER REFERENCES unit_of_work_definition(id) , unit_of_work_definition_id6 INTEGER REFERENCES unit_of_work_definition(id) ); 
        CREATE TABLE public.ah_transform /* AHTransform defines the parameters used for a phase 2 AH (Authentication Header) Security Association. */ ( id SERIAL PRIMARY KEY , ah_transform_id text[] , other_ahtransform_id text[] , use_replay_prevention text[] , replay_prevention_window_size text[] , element_name text[] , max_lifetime_seconds text[] , max_lifetime_kilobytes text[] , vendor_id text[] , instance_id text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.bgp_peer_uses_route_map /* This association defines the RouteMaps that are aggregated
        AND used by a particular BGPPeerGroup object. Multiple instances of the same RouteMap may be aggregated into the same BGPPeerGroup. If this is desired, THEN
    the MapSequence attribute of the association can be used to disambiguate them. */ ( id SERIAL PRIMARY KEY , bgp_peer_group_id6 INTEGER REFERENCES bgp_peer_group(id) , bgp_route_map_id7 INTEGER REFERENCES bgp_route_map(id) , map_sequence text[] ); 
    CREATE TABLE public.bgp_route_maps_in_routing_policy /* This aggregation defines the BGPRouteMaps that are used by a particular RoutingPolicy object. Multiple instances of the same RouteMap may be used IN the same RoutingPolicy instance. If this is desired, THEN
    the Sequence attribute of this aggregation can be used to disambiguate them. */ ( id SERIAL PRIMARY KEY , routing_policy_id6 INTEGER REFERENCES routing_policy(id) , bgp_route_map_id7 INTEGER REFERENCES bgp_route_map(id) , map_sequence text[] ); 
    CREATE TABLE public.bounded_priority_scheduling_element /* This class is a subclass of the class PriorityScheduling Element, which is itself derived
FROM the abstract class SchedulingElement. AS is the
    CASE
WITH ALL subclasses of SchedulingElement, the input associated
WITH an instance of BoundedPrioritySchedulingElement is of one of two types: either a queue,
        OR another scheduler. BoundedPriority SchedulingElement adds an upper bound (BandwidthBound IN kilobits per second)
    ON how much traffic can be handled
FROM an input. This data is specific to that one input. It is needed
    WHEN bounded strict priority scheduling is performed. Note that this class inherits
FROM its superclass the restriction of the inherited boolean property WorkConserving to TRUE. */ ( id SERIAL PRIMARY KEY , work_conserving text[] , bandwidth_bound text[] , priority text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.clp_capabilities /* A subclass of ProtocolServiceCapabilities that defines the capabilities of a CLPService. An instance of CLPCapabilities is associated
WITH a ProtocolService
USING ElementCapabilities. */ ( id SERIAL PRIMARY KEY ,
         max_connections text[] ,
         max_listening_ports text[] ,
         listening_port_management_supported text[] ,
         element_name_edit_supported text[] ,
         max_element_name_len text[] ,
         element_name_mask text[] ,
         instance_id text[] ,
         element_name text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
CREATE TABLE public.esp_transform /* ESPTransform defines the parameters used for a phase 2 ESP (Encapsulating Security Protocol) Security Association. */ ( id SERIAL PRIMARY KEY ,
         integrity_transform_id text[] ,
         other_integrity_transform_id text[] ,
         cipher_transform_id text[] ,
         other_cipher_transform_id text[] ,
         cipher_key_length text[] ,
         cipher_key_rounds text[] ,
         use_replay_prevention text[] ,
         replay_prevention_window_size text[] ,
         element_name text[] ,
         max_lifetime_seconds text[] ,
         max_lifetime_kilobytes text[] ,
         vendor_id text[] ,
         instance_id text[] ,
         changeable_type text[] ,
         configuration_name text[] ,
         so_id text[] ,
         so_org_id text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.entries_in_filter_list /* This is a specialization of the CIM_Component aggregation which is used to define a SET of filter entries (subclasses of FilterEntryBase) that are aggregated by a particular FilterList. */ ( id SERIAL PRIMARY KEY ,
         filter_list_id6 INTEGER REFERENCES filter_list(id) ,
         filter_entry_base_id7 INTEGER REFERENCES filter_entry_base(id) ,
         entry_sequence text[] ); 
         CREATE TABLE public.filter_entry /* A FilterEntry is used by network devices to identify traffic
        AND either forward it (with possibly further processing) to its destination,
        OR to deny its forwarding. It is one of the building block of FilterLists. This class is oriented towards packet filtering. Other subclasses of FilterEntryBase can be defined to do other types of filtering. A FilterEntry is weak to the network device (i.e.,
         the ComputerSystem) that contains it. Hence,
         the ComputerSystem keys are propagated to this class. */ ( id SERIAL PRIMARY KEY ,
         traffic_type text[] ,
         other_traffic_type text[] ,
         match_condition_type text[] ,
         other_match_condition_type text[] ,
         match_condition_value text[] ,
         action text[] ,
         default_filter text[] ,
         traffic_class text[] ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         name text[] ,
         is_negated text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.filtered_bgpattributes /* This is a specialization of the Component aggregation,
         which is used to define the SET of BGP Attributes that are used by a particular Routing Policy. */ ( id SERIAL PRIMARY KEY ,
         routing_policy_id6 INTEGER REFERENCES routing_policy(id) ,
         bgp_attributes_id7 INTEGER REFERENCES bgp_attributes(id) ); 
         CREATE TABLE public.ipcomp_transform /* The IPCOMPTransform specifies the IP compression algorithm to use for payload of the Security Association. */ ( id SERIAL PRIMARY KEY ,
         algorithm text[] ,
         other_algorithm text[] ,
         private_algorithm text[] ,
         dictionary_size text[] ,
         element_name text[] ,
         max_lifetime_seconds text[] ,
         max_lifetime_kilobytes text[] ,
         vendor_id text[] ,
         instance_id text[] ,
         changeable_type text[] ,
         configuration_name text[] ,
         so_id text[] ,
         so_org_id text[] ,
         caption text[] ,
         description text[] ,
         generation text[] ); 
         CREATE TABLE public.ip_route /* An IPRoute relates a destination address to the address
        OR interface through which the remote address may be reached. The destination address may be a specific IP endpoint
        OR a subnet, dependent
    ON the mask. An instance of this class represents either static
        OR dynamic routing. Static routes are distinguished by setting the IsStatic boolean property to TRUE. Since many routes
    BETWEEN endpoints can be defined (using different route calculation algorithms), the CIM_IPRoute class is defined AS Abstract. This forces subclassing (for example, see CIM_BGPIPRoute)
        AND allows the instances of its subclasses to be distinguished based
    ON their CreationClassName key property. IPRoute is deprecated IN lieu of the more general, concrete NextHopIPRoute class. NextHopIPRoute allows the definition of BOTH a next hop address
        AND an interface for transmission of the traffic. Also, it does NOT mandate the instantiation of a ForwardingService class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , ip_destination_address text[] , ip_destination_mask text[] , address_type text[] , destination_address text[] , destination_mask text[] , next_hop text[] , is_static text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ip_subnet /* An IPSubnet represents a group of related IPProtocolEndpoints that can communicate
WITH each other directly
USING IP. It is used for describing the characteristics of the grouping. Since this class' superclass (LogicalNetwork) has been deprecated (in order to define more consistent 'collection' semantics), this class is also deprecated. */ ( id SERIAL PRIMARY KEY , subnet_number text[] , subnet_mask text[] , prefix_length text[] , address_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , network_type text[] , other_type_description text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ipx_network /* A network or subnet that uses the IPX protocol. Since this class' superclass (LogicalNetwork) has been deprecated (in order to define more consistent 'collection' semantics), this class is also deprecated. */ ( id SERIAL PRIMARY KEY , network_number text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , network_type text[] , other_type_description text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.lan_segment /* A collection of LAN Endpoints of a particular type that are able to intercommunicate directly without the assistance of bridging
        OR routing services. Since this class' superclass (LogicalNetwork) has been deprecated (in order to define more consistent 'collection' semantics), this class is also deprecated. */ ( id SERIAL PRIMARY KEY , lanid text[] , lan_type text[] , other_lantype text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , network_type text[] , other_type_description text[] , collection_id text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.lists_in_routing_policy /* This is a specialization of the CIM_Component aggregation which is used to define a set of FilterLists that are aggregated by a particular RoutingPolicy. */ ( id SERIAL PRIMARY KEY , routing_policy_id6 INTEGER REFERENCES routing_policy(id) , filter_list_id7 INTEGER REFERENCES filter_list(id) , list_sequence text[] ); 
        CREATE TABLE public.media_redirection_capabilities /* MediaRedirectionCapabilities describes the capabilities of the Media Redirection Service. */ ( id SERIAL PRIMARY KEY , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.vrf_route /* CIM_VRFRoute associates a next hop route to a Virtual Routing and Forwarding context. */ ( id SERIAL PRIMARY KEY , virtual_routing_and_forwarding_table_id5 INTEGER REFERENCES virtual_routing_and_forwarding_table(id) , next_hop_route_id6 INTEGER REFERENCES next_hop_route(id) ); 
        CREATE TABLE public.card_in_slot /* Slots are special types of Connectors into which adapter Cards are inserted. This relationship of a Card in a Slot is made explicit using the CardInSlot association. */ ( id SERIAL PRIMARY KEY , slot_id6 INTEGER REFERENCES slot(id) , card_id7 INTEGER REFERENCES card(id) ); 
        CREATE TABLE public.card_on_card /* Cards may be plugged into Motherboards/baseboards, are daughtercards of an adapter, or support special Card-like modules. These relationships are described by the CardOnCard association. */ ( id SERIAL PRIMARY KEY , card_id6 INTEGER REFERENCES card(id) , card_id7 INTEGER REFERENCES card(id) , mount_or_slot_description text[] , location_within_container text[] ); 
        CREATE TABLE public.chassis /* The Chassis class represents the PhysicalElements that enclose other Elements and provide definable functionality, such as a desktop, processing node, UPS, disk or tape storage, or a combination of these. */ ( id SERIAL PRIMARY KEY , number_of_power_cords text[] , current_required_or_produced text[] , heat_generation text[] , chassis_package_type text[] , chassis_type_description text[] , multiple_system_support text[] , rack_mountable text[] , input_current_type text[] , input_voltage text[] , other_input_current_type text[] , cable_management_strategy text[] , lock_present text[] , audible_alarm text[] , visible_alarm text[] , security_breach text[] , breach_description text[] , is_locked text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.chassis_in_rack /* Racks, as simple enclosures, contain Chassis that provide the physical componentry realizing processing nodes, storage devices, UPSs, etc. The ChassisInRack association makes explicit the 'containing' relationship between the Rack and the Chassis. */ ( id SERIAL PRIMARY KEY , rack_id6 INTEGER REFERENCES rack(id) , chassis_id7 INTEGER REFERENCES chassis(id) , bottom_u text[] , location_within_container text[] ); 
        CREATE TABLE public.connector_on_package /* PhysicalPackages contain Connectors as well as other PhysicalElements. The ConnectorOnPackage association makes explicit the containment relationship between Connectors and Packages. */ ( id SERIAL PRIMARY KEY , physical_package_id6 INTEGER REFERENCES physical_package(id) , physical_connector_id7 INTEGER REFERENCES physical_connector(id) , location_within_container text[] ); 
        CREATE TABLE public.docked /* A laptop, a type of Chassis, may be docked in another type of Chassis, a Docking Station. This is the relationship represented by the Docked association. Because this is such a typical relationship, it is explicitly described. */ ( id SERIAL PRIMARY KEY , chassis_id6 INTEGER REFERENCES chassis(id) , chassis_id7 INTEGER REFERENCES chassis(id) ); 
        CREATE TABLE public.home_for_media /* In a StorageLibrary or repository for PhysicalMedia, it is reasonable that a specific Media always be placed in a specific Location (rather than anywhere in the repository/ Library). The default location for a PhysicalMedia is called its 'home'. This information is expressed by the HomeForMedia dependency association. (Note that a PhysicalMedia can have at most one 'home', and a StorageMediaLocation can be 'home' to at most one Media.) */ ( id SERIAL PRIMARY KEY , storage_media_location_id5 INTEGER REFERENCES storage_media_location(id) , physical_media_id6 INTEGER REFERENCES physical_media(id) ); 
        CREATE TABLE public.magazine /* StorageMediaLocations are typically slots or spaces where removable media are located. However, a specific kind of MediaLocation is a Magazine. This entity represents a single physical container with multiple StorageMediaLocations in it. All the MediaLocations within the Magazine are added/removed together. Often, this container has a Barcode or other label for identification. This is the unique data captured in the CIM_Magazine class. Magazine's label properties are defined exactly AS are labels for PhysicalMedia. */ ( id SERIAL PRIMARY KEY , location_type text[] , media_capacity text[] , location_coordinates text[] , removal_conditions text[] , removable text[] , replaceable text[] , hot_swappable text[] , height text[] , depth text[] , width text[] , weight text[] , package_type text[] , other_package_type text[] , tag text[] , description text[] , creation_class_name text[] , element_name text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , other_identifying_info text[] , powered_on text[] , manufacture_date text[] , vendor_equipment_type text[] , user_tracking text[] , can_be_frued text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.memory_on_card /* PhysicalMemory can be located
    ON HostingBoards, adapter Cards, etc. This association explicitly defines this relationship of Memory to Cards. */ ( id SERIAL PRIMARY KEY , card_id6 INTEGER REFERENCES card(id) , physical_memory_id7 INTEGER REFERENCES physical_memory(id) , location_within_container text[] ); 
    CREATE TABLE public.memory_with_media /* MemoryWithMedia indicates that Memory is associated
WITH a PhysicalMedia
        AND its cartridge. The Memory provides media identification
        AND also stores user-specific data. */ ( id SERIAL PRIMARY KEY , physical_memory_id5 INTEGER REFERENCES physical_memory(id) , physical_media_id6 INTEGER REFERENCES physical_media(id) ); 
        CREATE TABLE public.package_in_chassis /* A Chassis can contain other Packages, such AS other Chassis
        AND Cards. The PackageInChassis association makes explicit this relationship. */ ( id SERIAL PRIMARY KEY , chassis_id6 INTEGER REFERENCES chassis(id) , physical_package_id7 INTEGER REFERENCES physical_package(id) , location_within_container text[] ); 
        CREATE TABLE public.participates_in_set /* ParticipatesInSet indicates which PhysicalElements should be replaced together. */ ( id SERIAL PRIMARY KEY , replacement_set_id6 INTEGER REFERENCES replacement_set(id) , physical_element_id7 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.physical_media_in_location /* Within a StorageLibrary, ALL Media should be accounted for,
        AND be present IN some Storage Location. This relationship is made explicit by the PhysicalMediaInLocation association. IN addition, one can determine if a Location is empty
        OR full based
    ON whether this association EXISTS for the StorageMediaLocation. */ ( id SERIAL PRIMARY KEY , storage_media_location_id5 INTEGER REFERENCES storage_media_location(id) , physical_media_id6 INTEGER REFERENCES physical_media(id) , orientation text[] , time_of_last_placement text[] ); 
    CREATE TABLE public.account_authentication /* A class describing a company's and/or administrator's credential requirements that should be authenticated IN order to establish/trust a CIM_Identity. This class defines a specific identity whose account credentials should be authenticated. */ ( id SERIAL PRIMARY KEY , account_id text[] , account_context text[] , system_creation_class_name text[] , system_name text[] , policy_rule_creation_class_name text[] , policy_rule_name text[] , creation_class_name text[] , policy_condition_name text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.authentication_rule /* A class representing a company's and/or administrator's authentication requirements for a CIM_Identity. The PolicyConditions collected by an instance of AuthenticationRule describe the various requirements under which a CIM_Identity's CurrentlyAuthenticated Boolean is set to TRUE. Note that the CIM_Identities which are authenticated are tied to the Rule by the association, PolicySet AppliesToElement. At this time, there are no actions associated with this PolicyRule. This is because the actions are implicit. When the conditions of the rule are met, then the CurrentlyAuthenticated Boolean properties of the associated instances of CIM_Identity are set to TRUE. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , policy_rule_name text[] , condition_list_type text[] , rule_usage text[] , priority text[] , mandatory text[] , sequenced_actions text[] , execution_strategy text[] , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.element_in_policy_role_collection /* An ElementInPolicyRoleCollection aggregates zero or more ManagedElement subclass instances into a PolicyRoleCollection object, representing a role played by these ManagedElements. This Collection indicates that the aggregated PolicySets (aggregated by CIM_PolicySetInRoleCollection) MAY BE applied to the referenced elements. To indicate that the PolicySets ARE being enforced for the element, use the PolicySetAppliesToElement association. */ ( id SERIAL PRIMARY KEY , policy_role_collection_id6 INTEGER REFERENCES policy_role_collection(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
    CREATE TABLE public.filter_of_packet_condition /* FilterOfPacketCondition associates a network traffic specification (i.e., a FilterList) with a PolicyRule's PacketFilterCondition. */ ( id SERIAL PRIMARY KEY , filter_list_id6 INTEGER REFERENCES filter_list(id) , packet_filter_condition_id7 INTEGER REFERENCES packet_filter_condition(id) ); 
    CREATE TABLE public.policy_action_structure /* PolicyActions may be aggregated into rules
        AND into compound actions. PolicyActionStructure is the abstract aggregation class for the structuring of policy actions. */ ( id SERIAL PRIMARY KEY , policy_id7 INTEGER REFERENCES policy(id) , policy_action_id8 INTEGER REFERENCES policy_action(id) , action_order text[] ); 
        CREATE TABLE public.policy_condition_in_policy_condition /* A CompoundPolicyCondition aggregates zero
        OR more instances of the PolicyCondition class, via the PolicyConditionInPolicyCondition association. A CompoundPolicyCondition that aggregates zero Conditions is NOT valid; it may, however, be IN the process of being defined. Note that a CompoundPolicyCondition should have no effect until it is valid. */ ( id SERIAL PRIMARY KEY , compound_policy_condition_id6 INTEGER REFERENCES compound_policy_condition(id) , policy_condition_id7 INTEGER REFERENCES policy_condition(id) , group_number text[] , condition_negated text[] ); 
        CREATE TABLE public.policy_condition_in_policy_rule /* A PolicyRule aggregates zero
        OR more instances of the PolicyCondition class, via the PolicyConditionInPolicyRule association. A Rule that aggregates zero Conditions is NOT valid; it may, however, be IN the process of being defined. Note that a PolicyRule should have no effect until it is valid. */ ( id SERIAL PRIMARY KEY , policy_rule_id6 INTEGER REFERENCES policy_rule(id) , policy_condition_id7 INTEGER REFERENCES policy_condition(id) , group_number text[] , condition_negated text[] ); 
        CREATE TABLE public.prs__activity_contact /* Associates PRS_Activity
WITH PRS_Contact. */ ( id SERIAL PRIMARY KEY , prs__activity_id5 INTEGER REFERENCES prs__activity(id) , prs__contact_id6 INTEGER REFERENCES prs__contact(id) ); 
CREATE TABLE public.prs__admin_association /* Associates PRS_Administrative data
WITH any object derived
FROM PRS_ExchangeElement. */ ( id SERIAL PRIMARY KEY , prs__exchange_element_id5 INTEGER REFERENCES prs__exchange_element(id) , prs__administrative_id6 INTEGER REFERENCES prs__administrative(id) ); 
CREATE TABLE public.prs__administrative_contact /* Associates PRS_Administrative
        AND PRS_Contact. */ ( id SERIAL PRIMARY KEY , prs__administrative_id6 INTEGER REFERENCES prs__administrative(id) , prs__contact_id7 INTEGER REFERENCES prs__contact(id) ); 
        CREATE TABLE public.prs__attached /* Associates PRS_Attachment
WITH PRS_ExchangeElement. */ ( id SERIAL PRIMARY KEY , prs__attachment_id5 INTEGER REFERENCES prs__attachment(id) , prs__exchange_element_id6 INTEGER REFERENCES prs__exchange_element(id) ); 
CREATE TABLE public.prs__categorization /* PRS_Categorization associates PRS_Reference, PRS_Problem
        OR PRS_Resolution
WITH a PRS_Category for classification purposes. For example, a Category named 'Printing Issues' can be defined for a Problem
USING the Categorization association
    BETWEEN a PRS_Problem
        AND a PRS_Category. */ ( id SERIAL PRIMARY KEY , prs__category_id5 INTEGER REFERENCES prs__category(id) , prs__solution_element_id6 INTEGER REFERENCES prs__solution_element(id) ); 
        CREATE TABLE public.prs__contact_contact_item /* Abstract root class to associate PRS_Person
        OR PRS_Organization
        AND PRS_Contact. */ ( id SERIAL PRIMARY KEY , prs__contact_id6 INTEGER REFERENCES prs__contact(id) , prs__contact_item_id7 INTEGER REFERENCES prs__contact_item(id) ); 
        CREATE TABLE public.prs__contact_organization /* Associates PRS_Contact
        AND PRS_Organization. */ ( id SERIAL PRIMARY KEY , prs__contact_id5 INTEGER REFERENCES prs__contact(id) , prs__organization_id6 INTEGER REFERENCES prs__organization(id) ); 
        CREATE TABLE public.prs__contact_person /* Associates PRS_Contact
        AND PRS_Person. */ ( id SERIAL PRIMARY KEY , prs__contact_id5 INTEGER REFERENCES prs__contact(id) , prs__person_id6 INTEGER REFERENCES prs__person(id) ); 
        CREATE TABLE public.affected_job_element /* AffectedJobElement represents an association
    BETWEEN a Job
        AND the ManagedElement(s) that may be affected by its execution. It may NOT be feasible for the Job to describe ALL of the affected elements. The main purpose of this association is to provide information
    WHEN a Job requires exclusive use of the 'affected' ManagedElment(s)
        OR
    WHEN describing that side effects may result. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , job_id6 INTEGER REFERENCES job(id) ); 
    CREATE TABLE public.associated_file_system_statistics_manifest_collection /* Instances of this class associate a CIM_FileSystemStatisticsManifestCollection to the StatisticsCollection to which it applies. The ManifestCollection contains the Manifests that are used to filter requests for the retrieval of statistics. */ ( id SERIAL PRIMARY KEY , statistics_collection_id5 INTEGER REFERENCES statistics_collection(id) , file_system_statistics_manifest_collection_id6 INTEGER REFERENCES file_system_statistics_manifest_collection(id) ); 
    CREATE TABLE public.corresponding_setting_data_record /* CorrespondingSettingDataRecord is used to tie a log record to its corresponding setting data record. */ ( id SERIAL PRIMARY KEY , diagnostic_record_id5 INTEGER REFERENCES diagnostic_record(id) , diagnostic_setting_data_record_id6 INTEGER REFERENCES diagnostic_setting_data_record(id) ); 
    CREATE TABLE public.corresponding_settings_record /* CorrespondingSettingsRecord is used to tie a log record to its corresponding setting data record. */ ( id SERIAL PRIMARY KEY , diagnostic_record_id5 INTEGER REFERENCES diagnostic_record(id) , diagnostic_setting_record_id6 INTEGER REFERENCES diagnostic_setting_record(id) ); 
    CREATE TABLE public.data_file /* DataFile is a type of LogicalFile that is a named collection of data
        OR executable code. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.device_file /* DeviceFile is a special type of LogicalFile that represents a Device. This convention is useful for some operating systems that manage devices
USING a byte stream I/O model. The Logical Device that is associated
WITH this file is specified
USING the DeviceAccessedByFile relationship. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.diagnostic_completion_record /*
    WHEN a DiagnosticService has completed, results generated by the service will be recorded IN a DiagnosticCompletionRecord object. This class is used
    WHEN a DiagnosticRecord.RecordType value = "Results", to contain completion information. */ ( id SERIAL PRIMARY KEY , completion_state text[] , other_completion_state_description text[] , loops_failed text[] , loops_passed text[] , instance_id text[] , service_name text[] , managed_element_name text[] , expiration_date text[] , record_type text[] , other_record_type_description text[] , creation_time_stamp text[] , record_format text[] , record_data text[] , locale text[] , perceived_severity text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.directory /* Directory is a type of File that logically groups Files 'contained' IN it,
        AND provides path information for the grouped Files. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.directory_contains_file /* Specifies the hierarchical arrangement of LogicalFiles IN a Directory. */ ( id SERIAL PRIMARY KEY , directory_id7 INTEGER REFERENCES directory(id) , logical_file_id8 INTEGER REFERENCES logical_file(id) ); 
        CREATE TABLE public.fifo_pipe_file /* FIFOPipeFile is a special type of LogicalFile that represents an interprocess FIFO (sometimes referred to AS a "named pipe"). Operating systems use this convention to manage interprocess communication through processes reading
        AND writing the FIFO. The FIFO can be accessed by unrelated processes, IN contrast to the more well-known command line redirection mechanism (e.g. UNIX's 'ps -eaf | grep foo', also known as an "unnamed pipe"). An exemplary operating system implementation (using the FIFO concept) is the UNIX S_IFIFO file type. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.fs_quota_applies_to_tree /* An association between a quota config entry and a filesystem directory. */ ( id SERIAL PRIMARY KEY , logical_file_id5 INTEGER REFERENCES logical_file(id) , fs_quota_config_entry_id6 INTEGER REFERENCES fs_quota_config_entry(id) ); 
        CREATE TABLE public.file_identity /* CIM_FileIdentity indicates that a UnixFile describes Unix- specific aspects of the various subclasses of LogicalFile. The association exists since it forces UnixFile to be weak to (scoped by) the LogicalFile. This is not true in the association's superclass, LogicalIdentity. */ ( id SERIAL PRIMARY KEY , logical_file_id5 INTEGER REFERENCES logical_file(id) , unix_file_id6 INTEGER REFERENCES unix_file(id) ); 
        CREATE TABLE public.owning_job_element /* OwningJobElement represents an association
    BETWEEN a Job
        AND the ManagedElement responsible for the creation of the Job. This association may NOT be possible, given that the execution of jobs can move
    BETWEEN systems
        AND that the lifecycle of the creating entity may NOT persist for the total duration of the job. However, this can be very useful information
    WHEN available. This association defines a more specific 'owner' than is provided by the CIM_Job.Owner string. */ ( id SERIAL PRIMARY KEY , managed_element_id6 INTEGER REFERENCES managed_element(id) , job_id7 INTEGER REFERENCES job(id) ); 
    CREATE TABLE public.unix_device_file /* DeviceFile is a special type of LogicalFile that represents a Device. This class is a specialization of DeviceFile for a Unix environment. */ ( id SERIAL PRIMARY KEY , device_file_type text[] , other_type_description text[] , device_id text[] , device_description text[] , device_major text[] , device_minor text[] , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.unix_directory /* UnixDirectory is a type of File that logically groups UnixFiles 'contained' IN it. */ ( id SERIAL PRIMARY KEY , file_size_bits text[] , cs_creation_class_name text[] , cs_name text[] , fs_creation_class_name text[] , fs_name text[] , creation_class_name text[] , name text[] , file_size text[] , creation_date text[] , last_modified text[] , last_accessed text[] , readable text[] , writeable text[] , executable text[] , compression_method text[] , encryption_method text[] , in_use_count text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.certificate_management_capabilities /* CIM_CertificateManagementCapabilities describes the capabilities of the associated CIM_CertificateManagementService instance(s). */ ( id SERIAL PRIMARY KEY , asymmetric_key_generation text[] , cumulative_privilege_methodology text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.more_org_unit_info /* CIM_MoreOrgUnitInfo is an association used to extend the information IN an CIM_OrgUnit class instance. */ ( id SERIAL PRIMARY KEY , org_unit_id5 INTEGER REFERENCES org_unit(id) , other_org_unit_information_id6 INTEGER REFERENCES other_org_unit_information(id) ); 
    CREATE TABLE public.more_organization_info /* CIM_MoreOrganizationInfo is an association used to extend the information IN a CIM_Organization class instance. */ ( id SERIAL PRIMARY KEY , organization_id5 INTEGER REFERENCES organization(id) , other_organization_information_id6 INTEGER REFERENCES other_organization_information(id) ); 
    CREATE TABLE public.more_role_info /* CIM_MoreRoleInfo is an association used to extend the information IN a CIM_Role class instance. */ ( id SERIAL PRIMARY KEY , role_id5 INTEGER REFERENCES role(id) , other_role_information_id6 INTEGER REFERENCES other_role_information(id) ); 
    CREATE TABLE public.person /* The Person class is used to represent people,
        AND holds their white
        AND yellow pages data. The class is defined so AS to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information
FROM LDAP-accessible directories. This class's properties are a subset of a related class, OtherPersonInformation, which defines all the group properties and in array form for directory compatibility. */ ( id SERIAL PRIMARY KEY , business_category text[] , common_name text[] , employee_number text[] , employee_type text[] , facsimile_telephone_number text[] , home_phone text[] , jpeg_photo text[] , manager text[] , mobile text[] , ou text[] , pager text[] , preferred_language text[] , secretary text[] , title text[] , creation_class_name text[] , name text[] , given_name text[] , surname text[] , mail text[] , user_id text[] , locality_name text[] , state_or_province text[] , postal_code text[] , telephone_number text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.public_private_key_pair /* This relationship associates a PublicKeyCertificate with the Principal who has the PrivateKey used with the PublicKey. The PrivateKey is not modeled, since it is not a data element that ever SHOULD be accessible via management applications, other than key recovery services, which are outside our scope. Since the UsersAccess class and this association's superclass are deprecated, this association is also deprecated. There is no need to have a special subclass for public-private credentials. This is especially true since the properties of the association describe aspects of the certificate
        AND its handling. The latter is currently out of scope for the model. */ ( id SERIAL PRIMARY KEY , public_key_certificate_id6 INTEGER REFERENCES public_key_certificate(id) , users_access_id7 INTEGER REFERENCES users_access(id) , use text[] , non_repudiation text[] , backed_up text[] , repository text[] ); 
        CREATE TABLE public.agp_software_feature /* AGPSoftwareFeature adds two attributes to SoftwareFeature to represent the capabilities of an AGP device driver. An instance of this class would be associated
WITH the Driver's SoftwareElement using the SoftwareFeatureSoftware Elements relationship. The driver's SoftwareElement is associated
WITH the AGPVideoController via the Device Software relationship. */ ( id SERIAL PRIMARY KEY , identifying_number text[] , product_name text[] , vendor text[] , version text[] , name text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.bios_element /* BIOSElement represents the low-level software that is loaded into non-volatile storage
        AND used to bring up
        AND configure a ComputerSystem. */ ( id SERIAL PRIMARY KEY , version text[] , manufacturer text[] , primary_bios text[] , current_language text[] , loaded_starting_address text[] , loaded_ending_address text[] , load_utility_information text[] , release_date text[] , name text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , other_target_os text[] , build_number text[] , serial_number text[] , code_set text[] , identification_code text[] , language_edition text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bios_feature /* BIOSFeature represents the capabilities of the low-level software that is used to bring up
        AND configure a Computer System. */ ( id SERIAL PRIMARY KEY , identifying_number text[] , product_name text[] , vendor text[] , version text[] , name text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bios_feature_bioselements /* A link
    BETWEEN BIOSFeature
        AND its aggregated BIOSElements. */ ( id SERIAL PRIMARY KEY , bios_feature_id6 INTEGER REFERENCES bios_feature(id) , bios_element_id7 INTEGER REFERENCES bios_element(id) ); 
        CREATE TABLE public.collected_software_elements /* CollectedSoftwareElements defines the SoftwareElements that are collected by InstalledProduct (ie, the installed image of a Product). */ ( id SERIAL PRIMARY KEY , installed_product_id6 INTEGER REFERENCES installed_product(id) , software_element_id7 INTEGER REFERENCES software_element(id) ); 
        CREATE TABLE public.collected_software_features /* CollectedSoftwareFeatures defines the SoftwareFeatures that are collected by InstalledProduct (ie, the installed image of a Product). */ ( id SERIAL PRIMARY KEY , installed_product_id6 INTEGER REFERENCES installed_product(id) , software_feature_id7 INTEGER REFERENCES software_feature(id) ); 
        CREATE TABLE public.fru_includes_software_feature /* The FRUIncludesSoftwareFeature association identifies the SoftwareFeature(s) packaged
WITH a particular FRU. A common usage is to determine whether the FRU is compatible
WITH a hardware/software platform. IN order to determine this, the following conditions need to be verified: (1) Is the physical package of the FRU compatible
WITH the slots
        OR equivalent packaging of the hardware? (2) Are there any physical constraints (such AS power consumption) that prevent the FRU
FROM being installed? (3) Are the SoftwareFeatures packaged
WITH the FRU compatiable
WITH the underlying operating system
        AND other software already installed/to be installed
    ON the platform? This latter question can be answered by first checking if an instance of FRUIncludesSoftwareFeature exists. If it does, THEN
    the compatibility of each SoftwareFeature can be determined by evaluating the Check classes for the Software Elements that are part of the Feature (found by traversing the association, SoftwareFeatureSoftwareElements). For example, there might be a SoftwareElementVersionCheck that declares that a SoftwareElement (of the FRU's Software Feature) is not compatible with current software. */ ( id SERIAL PRIMARY KEY , fru_id6 INTEGER REFERENCES fru(id) , software_feature_id7 INTEGER REFERENCES software_feature(id) ); 
    CREATE TABLE public.j2ee_connection_pool_stats /* The J2eeConnectionPoolStats class defines the performance statistics that are provided by a connection pool. JCA and JDBC connection pool statistics are represented by this class. The semantics are determined by the class to which the ConnectionStats instance is associated via the CIM_ElementStatisticalData association. */ ( id SERIAL PRIMARY KEY , close_count text[] , create_count text[] , free_pool_size text[] , free_pool_size_upper_bound text[] , free_pool_size_lower_bound text[] , free_pool_size_low_water_mark text[] , free_pool_size_high_water_mark text[] , pool_size text[] , pool_size_upper_bound text[] , pool_size_lower_bound text[] , pool_size_low_water_mark text[] , pool_size_high_water_mark text[] , waiting_thread_count text[] , waiting_thread_count_upper_bound text[] , waiting_thread_count_lower_bound text[] , waiting_thread_count_low_water_mark text[] , waiting_thread_count_high_water_mark text[] , wait_time text[] , wait_time_max_time text[] , wait_time_min_time text[] , wait_time_total_time text[] , use_time text[] , use_time_max_time text[] , use_time_min_time text[] , use_time_total_time text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jcaconnection_pools /* CIM_J2eeJCAConnectionPools provides the list of statistics about the connections pools that are associated with the referencing JCA resource statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jcastats_id5 INTEGER REFERENCES j2ee_jcastats(id) , j2ee_connection_pool_stats_id6 INTEGER REFERENCES j2ee_connection_pool_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jcanonpooled_connections /* CIM_J2eeJCANonpooledConnections provides the list of statistics for the non-connections pools that are associated with the referencing JCA resource statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jcastats_id5 INTEGER REFERENCES j2ee_jcastats(id) , j2ee_connection_stats_id6 INTEGER REFERENCES j2ee_connection_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jdbcconnection_pools /* CIM_J2eeJDBCConnectionPools provides the list of statistics about the connections pools that are associated with the referencing JDBC resource statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jdbcstats_id5 INTEGER REFERENCES j2ee_jdbcstats(id) , j2ee_connection_pool_stats_id6 INTEGER REFERENCES j2ee_connection_pool_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jdbcnonpooled_connections /* CIM_J2eeJDBCNonpooledConnections provides the list of statistics for the non-connections pools that are associated with the referencing JDBC resource statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jdbcstats_id5 INTEGER REFERENCES j2ee_jdbcstats(id) , j2ee_connection_stats_id6 INTEGER REFERENCES j2ee_connection_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jmsconnection_sessions /* CIM_J2eeJMSConnectionSessions identifies the JMS session statistics that are associated with the referencing JMS connection statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jmsconnection_stats_id5 INTEGER REFERENCES j2ee_jmsconnection_stats(id) , j2ee_jmssession_stats_id6 INTEGER REFERENCES j2ee_jmssession_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jmsconsumer_stats /* The CIM_J2eeJMSConsumerStats class defines the performance statistics that are provided by a JMS message consumer. */ ( id SERIAL PRIMARY KEY , origin text[] , expired_message_count text[] , message_count text[] , message_wait_time text[] , message_wait_time_max_time text[] , message_wait_time_min_time text[] , message_wait_time_total_time text[] , pending_message_count text[] , instance_id text[] , element_name text[] , start_statistic_time text[] , statistic_time text[] , sample_interval text[] , rate_interval_end_time text[] , rate_interval_start_time text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jmssession_consumers /* CIM_J2eeJMSSessionConsumers identifies the JMS consumer statistics that are associated with the referencing JMS session statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jmssession_stats_id5 INTEGER REFERENCES j2ee_jmssession_stats(id) , j2ee_jmsconsumer_stats_id6 INTEGER REFERENCES j2ee_jmsconsumer_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jmssession_producers /* CIM_J2eeJMSSessionProducers identifies the JMS producer statistics that are associated with the referencing JMS session statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jmssession_stats_id5 INTEGER REFERENCES j2ee_jmssession_stats(id) , j2ee_jmsproducer_stats_id6 INTEGER REFERENCES j2ee_jmsproducer_stats(id) , description text[] ); 
    CREATE TABLE public.j2ee_jmsstat_connections /* CIM_J2eeJMSStatConnections provides the list of JMS connection statistics that are associated with the referencing JMS resource statistics. */ ( id SERIAL PRIMARY KEY , j2ee_jmsstats_id5 INTEGER REFERENCES j2ee_jmsstats(id) , j2ee_jmsconnection_stats_id6 INTEGER REFERENCES j2ee_jmsconnection_stats(id) , description text[] ); 
    CREATE TABLE public.product_software_features /* The ProductSoftwareFeatures association identifies the SoftwareFeatures for a particular Product. */ ( id SERIAL PRIMARY KEY , product_id6 INTEGER REFERENCES product(id) , software_feature_id7 INTEGER REFERENCES software_feature(id) ); 
    CREATE TABLE public.concrete_job /* A concrete version of Job. This class represents a generic and instantiable unit of work, such as a batch or a print job. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , job_state text[] , time_of_last_state_change text[] , time_before_removal text[] , job_in_parameters text[] , job_out_parameters text[] , job_status text[] , time_submitted text[] , scheduled_start_time text[] , start_time text[] , elapsed_time text[] , job_run_times text[] , run_month text[] , run_day text[] , run_day_of_week text[] , run_start_interval text[] , local_or_utc_time text[] , until_time text[] , notify text[] , owner text[] , priority text[] , percent_complete text[] , delete_on_completion text[] , error_code text[] , error_description text[] , recovery_action text[] , other_recovery_action text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.default_setting /* DefaultSetting represents the association between a ManagedSystemElement and the single Setting class that is defined to be the default setting for this Element. */ ( id SERIAL PRIMARY KEY , setting_id5 INTEGER REFERENCES setting(id) , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) ); 
    CREATE TABLE public.enabled_logical_element /* This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a ServiceAccessPoint. */ ( id SERIAL PRIMARY KEY , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.is_spare /* The IsSpare association indicates an element that can spare or replace any of the elements in the referenced RedundancySet. If the 'spare' is itself a Collection, this indicates that each of the 'spare' members can replace any of the elements in the RedundancySet. In the case of a collection all of the values in the properties of this association MUST apply to all members of the Collection. If this is not true, then the Collection SHOULD be broken down into smaller sets (and the IsSpare association defined for each of these smaller sets), such that the properties of this association apply to all collected members. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , redundancy_set_id6 INTEGER REFERENCES redundancy_set(id) , spare_status text[] , failover_supported text[] ); 
    CREATE TABLE public.physical_computer_system_view /* This class defines a view class for a physical computer system. */ ( id SERIAL PRIMARY KEY , instance_id text[] , enabled_state text[] , requested_state text[] , health_state text[] , fru_info_supported text[] , tag text[] , manufacturer text[] , model text[] , sku text[] , serial_number text[] , version text[] , part_number text[] , power_utilization_mode text[] , power_allocation_limit text[] , one_time_boot_source text[] , number_of_processors text[] , number_of_processor_cores text[] , number_of_processor_threads text[] , processor_family text[] , processor_max_clock_speed text[] , memory_block_size text[] , memory_number_of_blocks text[] , memory_consumable_blocks text[] , current_biosmajor_version text[] , current_biosminor_version text[] , current_biosrevision_number text[] , current_biosbuild_number text[] , current_management_firmware_major_version text[] , current_management_firmware_minor_version text[] , current_management_firmware_revision_number text[] , current_management_firmware_build_number text[] , current_management_firmware_element_name text[] , current_management_firmware_version_string text[] , os_type text[] , os_version text[] , os_enabled_state text[] , current_biosversion_string text[] , processor_current_clock_speed text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.service /* A Service is a LogicalElement that represents the availability of functionality that can be managed. This functionality may be provided by a seperately modeled entity such as a LogicalDevice or a SoftwareFeature, or both. The modeled Service typically provides only functionality required for management of itself or the elements it affects. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.service_access_point /* CIM_ServiceAccessPoint represents the ability to utilize or invoke a Service. Access points represent that a Service is made available for other entities to use. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.service_access_uri /* CIM_ServiceAccessURI represents the ability to utilize or invoke a Service using a uniform resource identifier (URI). RFC 1738 describes the Uniform Resource Locator, which is a more specific form of a URI, and RFC 2396 describes the broader, inclusive URI. The following explanation is from the RFC: "A Uniform Resource Identifier (URI) is a compact string of characters for identifying an abstract or physical resource." In the context of a ServiceAccessPoint, a URI contains the information necessary to access an associated service (associated through ServiceAccessBySAP), using a syntax that is specific to that service. */ ( id SERIAL PRIMARY KEY , labeled_uri text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.service_affects_element /* ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. Instantiating this association indicates that running the service may change, manage, provide functionality for,or pose some burden on the ManagedElement. This burden might affect performance, throughput, availability, and so on. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , service_id6 INTEGER REFERENCES service(id) , assigned_sequence text[] ); 
    CREATE TABLE public.service_affects_element_with_quota /* ServiceAffectsElementWithQuota represents an extension of ServiceAffectsElement to include a quota imposed on the AffectedElement by the Service. The quota governs the amount of a resource controlled by the Service that can be allocated by the AffectedElement in one or more allocations. */ ( id SERIAL PRIMARY KEY , managed_element_id5 INTEGER REFERENCES managed_element(id) , service_id6 INTEGER REFERENCES service(id) , quota text[] , quota_used text[] , quota_units text[] , assigned_sequence text[] ); 
    CREATE TABLE public.service_available_to_element /* CIM_ServiceAvailableToElement conveys the semantics of a Service that is available for the use of a ManagedElement. An example of an available Service is that a Processor and an enclosure (a PhysicalElement) can use AlertOnLAN Services to signal an incomplete or erroneous boot. In reality, AlertOnLAN is simply a HostedService on a computer system that is generally available for use and is not a dependency of the processor or enclosure. To describe that the use of this service might be restricted or have limited availability or applicability, the CIM_ServiceAvailableToElement association would be instantiated between the Service and specific CIM_Processors and CIM_Chassis. */ ( id SERIAL PRIMARY KEY , service_id5 INTEGER REFERENCES service(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
    CREATE TABLE public.service_component /* The ServiceComponent aggregation models a set of subordinate Services that are aggregated together to form a higher-level service. */ ( id SERIAL PRIMARY KEY , service_id6 INTEGER REFERENCES service(id) , service_id7 INTEGER REFERENCES service(id) ); 
    CREATE TABLE public.service_sapdependency /* CIM_ServiceSAPDependency is an association between a Service and a ServiceAccessPoint that indicates that the referenced SAP is utilized by the Service to provide its functionality. For example, Boot Services can invoke BIOS Disk Services (interrupts) in order to function. */ ( id SERIAL PRIMARY KEY , service_access_point_id5 INTEGER REFERENCES service_access_point(id) , service_id6 INTEGER REFERENCES service(id) ); 
    CREATE TABLE public.service_statistics /* ServiceStatistics relates the ServiceStatisticalInformation class to the Service to which it applies. */ ( id SERIAL PRIMARY KEY , service_statistical_information_id5 INTEGER REFERENCES service_statistical_information(id) , service_id6 INTEGER REFERENCES service(id) ); 
    CREATE TABLE public.software_installation_service /* A subclass of service which provides methods to install (or update) Software Identities in ManagedElements. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.time_service /* The TimeService manages time (retrieves or sets time) for one or more elements in a system. All elements to which the Service applies are associated using ServiceAffectsElement. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.common_database /* A database is a collection of interrelated data, treated as a unit, which is organized into one or more schemas. The CIM_CommonDatabase class defines the properties that are common across database model and vendor implementations for the database entity that is represented by the unit of interrelated data. Databases are manipulated through one or more database services. More detailed information on database services is provided in the description of the CIM_DatabaseService class. */ ( id SERIAL PRIMARY KEY , instance_id text[] , database_version text[] , last_backup text[] , size_allocated text[] , size_units text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.database_administrator /* The DatabaseAdministrator association identifies a UserEntity as a database administrator of a CommonDatabase. The current version of CIM includes a UserContact class that is concrete and extends from UserEntity. UserContact contains the information that is needed to contact a database administrator. The DatabaseAdministrator association should be implemented through the UserContact class in favor of creating a vendor-specific concrete class to define database administrator contact information for the database administrator. */ ( id SERIAL PRIMARY KEY , common_database_id5 INTEGER REFERENCES common_database(id) , user_entity_id6 INTEGER REFERENCES user_entity(id) ); 
    CREATE TABLE public.database_control_file /* CIM_DatabaseControlFile is a specialization of the CIM_Dependency association that identifies the LogicalFiles that provide control information for a Database. As an example, some implementations of CommonDatabase assign particular significance to a small number of files that contain database state and configuration information. This association is intended to provide an efficient means of identifying these files. */ ( id SERIAL PRIMARY KEY , common_database_id5 INTEGER REFERENCES common_database(id) , logical_file_id6 INTEGER REFERENCES logical_file(id) ); 
    CREATE TABLE public.database_file /* DatabaseFile captures the relationship between a database and the supporting files that make up the database as well as the purpose served by the files within the context of the database. */ ( id SERIAL PRIMARY KEY , common_database_id6 INTEGER REFERENCES common_database(id) , logical_file_id7 INTEGER REFERENCES logical_file(id) ); 
    CREATE TABLE public.database_service /* Database services perform tasks for a database. Examples of tasks that are performed by a database service include providing user access to the database, performing data and metadata manipulation, database administration, and maintenance operations. One or more database services can perform tasks for a database. The database services can be located on the same computer system as the database or on different computer systems. Database services can be implemented as one or more processes. */ ( id SERIAL PRIMARY KEY , startup_time text[] , last_status_change_time text[] , time_of_last_state_change text[] , connection_limit text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.service_available_to_database /* The CIM_ServiceAvailableToDatabase association relates databases to the database services that are available for database use. */ ( id SERIAL PRIMARY KEY , database_service_id5 INTEGER REFERENCES database_service(id) , common_database_id6 INTEGER REFERENCES common_database(id) , available_state text[] , other_available_state text[] , active_time text[] ); 
    CREATE TABLE public.configuration_reporting_service /* Service to provide reports on current configuration and potential for growth. The service may be used in several circumstances: - To report growth potential (how many can I have) - To report information on objects not directly modeled for performance or other reasons. It can also report counts of 'things' or counts of 'units'. For example, the number of disk drives could be reported or the capacity that they would provide. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.fibre_protocol_service /* FibreProtocolService abstracts and allows the management of the Alias, Management, Time, Security, Directory (Naming), and other services and functions that are available in a Fibre Channel network. This class will be further defined in a later release of CIM. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.file_system_replication_service_capabilities /* A subclass of Capabilities that defines the Capabilities of a ReplicationService. An instance of FileSystemReplicationServiceCapabilities is associated with a ReplicationService using ElementCapabilities. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.hardware_thread /* The CIM_HardwareThread class inherits from CIM_EnabledLogicalElement and represents a specific processor hardware thread. CIM_HardwareThread instances are related to the CIM_ProcessorCore instance they are based on. */ ( id SERIAL PRIMARY KEY , instance_id text[] , load_percentage text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.ib_subnet_manager /* An Infiniband Subnet Manager (SM) is an entity responsible for configuring and managing an IB subnet. It uses Subnet Management Agents (SMA) to access and manage individual nodes. The SM is hosted in the context of a specific computer system (i.e., hosted by an instance of UnitaryComputerSystem), as described by the HostedService association. Note that there may be multiple SMs operating in a subnet, but only the elected master is allowed to perform configuration functions. */ ( id SERIAL PRIMARY KEY , priority text[] , state text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.power_utilization_management_service /* PowerUtilizationManagementService represents the ability of a platform or component to perform autonomic management of its power utilization. */ ( id SERIAL PRIMARY KEY , power_utilization_mode text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.print_job_file /* This association indicates which files are associated with a PrintJob. */ ( id SERIAL PRIMARY KEY , print_job_id6 INTEGER REFERENCES print_job(id) , data_file_id7 INTEGER REFERENCES data_file(id) ); 
    CREATE TABLE public.print_sap /* The ServiceAccessPoint for a printing Service. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.print_service /* The Service that provides support for printing. The basic assumption of the Printing Model is that a PrintService accepts a PrintJob for processing, using its PrintSAP. The Job is then placed on a PrintQueue (that is indicated by the QueueForPrintService association). Printers take Jobs from Queues (indicated by the PrinterServicingQueue association). The ABNF for CIM references to PWG Standards and MIBs is in the directory 'ftp://ftp.pwg.org/pub/pwg/general/process' in the file 'pwg-cim-references-format-20060309.txt'. An example for a MappingStrings reference to a PWG Standard is 'PWG5101-1.PWG|Section 4 Media Color Names'. An example for a MappingStrings reference to a PWG MIB is 'MIB.PWG|PWG-IMAGING-COUNTER-MIB.icMonitorCompletedJobs'. */ ( id SERIAL PRIMARY KEY , description text[] , element_name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
    CREATE TABLE public.processor_core /* The CIM_ProcessorCore class inherits from CIM_EnabledLogicalElement and describes a specific processor core. CIM_ProcessorCore instances are related to the instance of CIM_Processor that represents the processor they are contained in. */ ( id SERIAL PRIMARY KEY , instance_id text[] , core_enabled_state text[] , load_percentage text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.replication_entity /* This class represents a replication entity, such as an entity known by its World Wide Name (WWN). */ ( id SERIAL PRIMARY KEY , instance_id text[] , type text[] , entity_id text[] , other_type_description text[] , persistent text[] , element text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.statistics_service /* This is a Service that provides methods for statistics retrieval and BlockStatisticsManifest manipulation. The methods of the service that are supported by the provider can be determined from the SynchronousMethodsSupported and AsynchronousMethodsSupported properties of the StatisticsCapabilities associated to the service. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.zone_service /* The ZoneService if responsible for managing the Zone enforcement for the fabric. The ZoneService is hosted on an AdminDomain. This relationship is depicted by the HostedService association. */ ( id SERIAL PRIMARY KEY , session_state text[] , requested_session_state text[] , default_zoning_state text[] , configuration_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.indication_service /* An IndicationService is a Service of the CIM Object Manager that is responsible for delivering indications to Indication Handlers. */ ( id SERIAL PRIMARY KEY , filter_creation_enabled text[] , delivery_retry_attempts text[] , delivery_retry_interval text[] , subscription_removal_action text[] , subscription_removal_time_interval text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.contained_transform /* ContainedTransform associates a proposal with a list of transforms. If multiple transforms of a given type are included in a proposal, these transforms are interpreted as alternatives -- i.e., logically ORed with each other. The order of preference is dictated by the SequenceNumber property. Sets of transforms of different types are logically ANDed. For example, a proposal based on two AH transforms and three ESP transforms means one of the AH AND one of the ESP transforms MUST be chosen. Note that at least 1 transform MUST be aggregated into the proposal. */ ( id SERIAL PRIMARY KEY , i_psec_proposal_id7 INTEGER REFERENCES i_psec_proposal(id) , sa_transform_id8 INTEGER REFERENCES sa_transform(id) , sequence_number text[] ); 
    CREATE TABLE public.ike_rule /* IKERule contains the Conditions and Actions for IKE phase 1 negotiations or to specify static actions such as Discard. */ ( id SERIAL PRIMARY KEY , limit_negotiation text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , policy_rule_name text[] , condition_list_type text[] , rule_usage text[] , priority text[] , mandatory text[] , sequenced_actions text[] , execution_strategy text[] , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.i_psec_rule /* IPsecRule contains the Conditions and Actions for phase 2 negotiations or to specify static actions such as Discard. */ ( id SERIAL PRIMARY KEY , limit_negotiation text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , policy_rule_name text[] , condition_list_type text[] , rule_usage text[] , priority text[] , mandatory text[] , sequenced_actions text[] , execution_strategy text[] , policy_decision_strategy text[] , enabled text[] , common_name text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.packet_condition_in_sarule /* PacketConditionInSARule aggregates an SARule with at least one instance of PacketFilterCondition. This is a specialization of the PolicyConditionInPolicyRule association. */ ( id SERIAL PRIMARY KEY , sa_rule_id7 INTEGER REFERENCES sa_rule(id) , packet_filter_condition_id8 INTEGER REFERENCES packet_filter_condition(id) , group_number text[] , condition_negated text[] ); 
    CREATE TABLE public.cimxml_capabilities /* The capabilities for the CIM-XML protocol. For more information, see DSP0200, DSP0201 and DSP0203. */ ( id SERIAL PRIMARY KEY , multiple_operations_supported text[] , validated text[] , generic_operation_capabilities text[] , max_connections text[] , max_listening_ports text[] , listening_port_management_supported text[] , element_name_edit_supported text[] , max_element_name_len text[] , element_name_mask text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.object_manager_communication_mechanism /* ObjectManagerCommunicationMechanism is deprecated. This class combined the concept of capabilities and accesspoint, but did not model the types of access properly. The new model uses CIM_ProtocolService, CIM_ServiceAccessPoint and Capabilities to describe the information. The class, ObjectManagerCommunicationMechanism, describes access to an ObjectManager. It describes a protocol and data encoding that can be used for communication. When all instances of this class are enumerated for an ObjectManager (using the CommMechanismForManager association), all possible protocol and encoding schemes will be known. Also, specific capabilities (for example, basic read or query) that are supported in the protocol/encoding are described - using the ProfilesSupported property. */ ( id SERIAL PRIMARY KEY , communication_mechanism text[] , other_communication_mechanism_description text[] , multiple_operations_supported text[] , version text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.wbem_server /* CIM_WBEMServer represents a WBEMServer and serves as an aggregation point for the WBEM Server settings, capabilities, services, protocols, etc. */ ( id SERIAL PRIMARY KEY , description text[] , element_name text[] , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
    CREATE TABLE public.wbem_service /* An abstract class for WBEM services such as the ObjectManager (CIM Server), Providers, protocol adapters, or other pluggable components. A type of CIM_Service that provides associated capabilities and details about the communication capabilities, namespaces, etc. for a specific WBEMService. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.metric_service /* CIM_MetricService provides the ability to manage metrics. For each metric that the service manages, there shall be an instance of CIM_ServiceAffectsElement that associates the CIM_MetricService to the instance of CIM_BaseMetricDefinition that defines the metric, where the value of the CIM_ServiceAffectsElement.ElementAffects property is 5 "Manages". The capabilities of the CIM_MetricService instance are advertised through an instance of CIM_MetricServiceCapabilities associated with the CIM_MetricService instance through CIM_ElementCapabilities. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.bgpip_route /* BGPIPRoute describes a BGP routing entry that connects two peer routers that are running BGP. The source and destination addresses may be either specific IP endpoints or IP subnets. Examining the BGPIPRoute class definition, note that its superclass IPRoute is deprecated. Unfortunately, IPRoute cannot be removed from the object hierarchy without a major Schema release. When/if this occurs, the IPRoute superclass will be removed, and BGPIPRoute will subclass from CIM_NextHopRouting directly. */ ( id SERIAL PRIMARY KEY , is_back_door_route text[] , uses_loopback_peering text[] , system_creation_class_name text[] , system_name text[] , service_creation_class_name text[] , service_name text[] , creation_class_name text[] , ip_destination_address text[] , ip_destination_mask text[] , address_type text[] , destination_address text[] , destination_mask text[] , next_hop text[] , is_static text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.conditioning_service /* ConditioningService represents the ability to define how traffic is conditioned in the data-forwarding path of a device. The subclasses of ConditioningService define the particular types of conditioning that are done. These are the services performed by a classifier, a meter, a marker, a dropper, a queue, and a scheduler. Other, more sophisticated types of conditioning may be defined in the future. ConditioningService is a concrete class because its superclass (ForwardingService) is concrete. While this class can be instantiated, an instance of it does not accomplish anything, because the nature of the conditioning, and the parameters that control it, are specified only in the subclasses of ConditioningService. Two associations in which ConditioningService participates are critical to its usage in QoS - QoSConditioningSubService and NextService. QoSConditioningSubService aggregates ConditioningServices into a particular QoS service (such as AF), to describe the specific conditioning functionality that underlies that QoSService in a particular device. NextService indicates the subsequent conditioning service(s) for different traffic streams. */ ( id SERIAL PRIMARY KEY , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.drop_threshold_calculation_service /* This class calculates an average depth for a queue, based on a smoothing weight and a sampling time interval. The latter are properties of this Service, describing how it operates and its necessary parameters. The Service does the calculation on behalf of a RED dropper (as indicated by the association, CalculationServiceForDroppper). A DropThresholdCalculationService is always associated to the single queue that it examines via the Calculation BasedOnQueue relationship. */ ( id SERIAL PRIMARY KEY , smoothing_weight text[] , time_interval text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.dropper_service /* DropperService represents the ability to selectively drop network traffic, and/or to invoke another ConditioningService (indicated using the NextService association) for further processing of traffic that is not dropped. It is the base class for different types of droppers. Droppers are distinguished by the algorithm that they use to drop traffic. The NextService association has special semantics for droppers, in addition to conveying the general information of 'what happens next' (that apply to all Conditioning Services). The queue(s) from which a particular dropper drops packets are identified by following chain(s) of NextService associations 'rightwards' from the dropper, until they reach a queue. */ ( id SERIAL PRIMARY KEY , dropper_type text[] , other_dropper_type text[] , always_drop text[] , drop_from text[] , drop_start_metric text[] , drop_maintain_metric text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.head_tail_dropper /* HeadTailDropper describes the threshold information of a head or tail dropper. The inherited property DropFrom indicates whether a particular instance of this class is a head dropper or a tail dropper. A head dropper always examines the same queue from which it drops packets, and this queue is always related to the dropper as the following service in the NextService association. */ ( id SERIAL PRIMARY KEY , queue_threshold text[] , dropper_type text[] , other_dropper_type text[] , always_drop text[] , drop_from text[] , drop_start_metric text[] , drop_maintain_metric text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.ip_network_connection /* "CIM_IPNetworkConnection class represents service access point for the IP interface configuration in the system, Eg. "IP stack configuration on a Local Area Connection","IP stack configuration on a ethernet interface". An IP network connection is an aggregation point of different types of settings that can be applied to an IP interface to represent protocol end points". */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.kvm_redirection_sap /* A class derived from Service Access Point, that describes an access point to start the KVM redirection. One access point represents access to a single KVM redirection stream. */ ( id SERIAL PRIMARY KEY , kvm_protocol text[] , other_kvmprotocol text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.marker_service /* MarkerService represents the general process of marking a selected field in a network packet with a specified value. Packets are marked in order to control the conditioning that they will subsequently receive. Subclasses of MarkerService identify the specific fields to be marked, and introduce properties to represent the values used in marking these fields. Markers are usually invoked as a result of a preceding classifier match. MarkerService is a concrete class because its superclass (ConditioningService) is concrete. While this class can be instantiated, an instance of it does not accomplish anything, because both the field to be marked and the value used to mark it are defined in subclasses. MarkerService is modeled as a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService association). This association indicates that the MarkerService's functionality underlies the QoSService. MarkerService also participates IN the NextService association to identify the subsequent ConditioningService(s) that act
    ON packets after they have been marked. */ ( id SERIAL PRIMARY KEY , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.media_redirection_sap /* MediaRedirectionSAP is a logical representation of a Media redirection session. One access point represents access to a single Media redirection session. */ ( id SERIAL PRIMARY KEY , connection_mode text[] , command_timeout text[] , reset_timeout text[] , session_timeout text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.meter_service /* This class represents the metering of network traffic. Metering is the function of monitoring the arrival times of packets of a traffic stream
        AND determining the level of conformance of each packet
WITH respect to a pre- established traffic profile. A meter has the ability to invoke different ConditioningServices for conforming
        AND non-conforming traffic. Traffic leaving a meter may be further conditioned (e.g., dropped
        OR queued) by routing the packet to another conditioning element. This class is modeled AS a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService association), to indicate that its functionality underlies that QoS service. MeterService also participates IN a subclass of the NextService association, to identify the subsequent ConditioningServices for conforming
        AND non-conforming traffic. */ ( id SERIAL PRIMARY KEY , meter_type text[] , other_meter_type text[] , conformance_levels text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.network_pipe /* NetworkPipe is a subclass of EnabledLogicalElement, representing the state
        AND management of a connection
        OR trail
    BETWEEN endpoints. This object is different than the association
    BETWEEN the endpoints (CIM_ActiveConnection) since the emphasis is NOT
    ON the endpoints but
    ON the management of the pipe itself - its state, configuration, etc. NetworkPipes are defined IN the context of a CIM_Network
        AND represent the 'transfer of information . . . between . . . endpoints'. These concepts are aligned
WITH the definition of the Pipe object IN ITU's M.3100 specification. */ ( id SERIAL PRIMARY KEY , instance_id text[] , directionality text[] , aggregation_behavior text[] , enabled_state text[] , requested_state text[] , other_enabled_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.network_pipe_composition /* NetworkPipeComposition describes the makeup a pipe, based on lower-level ones. If the pipe is not composed of lower-level entities (i.e., its AggregationBehavior property is set to 2), then no instances of this association should be defined where the pipe has the role of GroupComponent. In the context of M.3100, this semantic is modeled as a Trail that is made up of one or more Connections. Both Trails and Connections are subclasses of M.3100's Pipe. Because of the flexibility of the NetworkPipeComposition association, there is no need to subclass NetworkPipe, AS was done IN M.3100, but merely to instantiate this association to describe the bundling of the lower-level pipes (connections),
        OR the sequencing of them. How the lower-level pipes are aggregated is described by the property, AggregationBehavior, of NetworkPipe. If the pipes are combined IN a sequence, the ordering is conveyed via the property, AggregationSequence,
    ON this association. */ ( id SERIAL PRIMARY KEY , network_pipe_id8 INTEGER REFERENCES network_pipe(id) , network_pipe_id9 INTEGER REFERENCES network_pipe(id) , aggregation_sequence text[] ); 
    CREATE TABLE public.network_service /* This is an abstract base class, derived
FROM the Service class. It is deprecated IN Version 2.7
WITH the recommendation that the Service class be subclassed instead. Distinguishing
    BETWEEN services that modify traffic versus supporting basic communication has NOT proved useful. */ ( id SERIAL PRIMARY KEY , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.next_service /* NextService establishes a predecessor-successor relationship
    BETWEEN two ConditioningService objects. This association is used to indicate the sequence of ConditioningServices required to process a particular type of traffic. Instances describe the various relationships
    BETWEEN different ConditioningServices (such AS classifiers, meters, droppers, etc.) that are used collectively to condition traffic. Both one-to-one
        AND more complicated fan-in and/or fan-out relationships can be described. The Conditioning Services may feed one another directly,
        OR they may be mapped to multiple 'next' Services based
    ON the characteristics of the packet. */ ( id SERIAL PRIMARY KEY , conditioning_service_id5 INTEGER REFERENCES conditioning_service(id) , conditioning_service_id6 INTEGER REFERENCES conditioning_service(id) ); 
    CREATE TABLE public.next_service_after_meter /* This association describes a predecessor-successor relationship
    BETWEEN a MeterService
        AND one
        OR more ConditioningService objects that process traffic
FROM the meter. For example, for devices that implement preamble marking, the FollowingService reference (after the meter) is a PreambleMarkerService - to record the results of the metering IN the preamble. It might be expected that the NextServiceAfterMeter association would subclass
FROM NextService. However, meters are 1:n fan-out elements,
        AND require a mechanism to distinguish
    BETWEEN the different results/outputs of the meter. Therefore, this association defines a new key property, MeterResult, which is used to record the result
        AND identify the output through which this traffic left the meter. */ ( id SERIAL PRIMARY KEY , meter_service_id5 INTEGER REFERENCES meter_service(id) , conditioning_service_id6 INTEGER REFERENCES conditioning_service(id) , meter_result text[] ); 
        CREATE TABLE public.packet_scheduling_service /* This class represents the scheduling service, which is a process that determines whether a queued packet should be removed
FROM a queue
        AND sent to an output interface. Note that output interfaces can be physical network interfaces
        OR interfaces to components internal to systems, such AS crossbars
        OR backplanes. IN either case, if multiple queues are involved, schedulers are used to provide access to the interface. Each instance of a PacketSchedulingService describes a scheduler
FROM the perspective of the queues that the scheduler is servicing. One can describe that different schedulers support different queues,
        OR that a scheduler supports several queues. PacketSchedulingService is modeled AS a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService association) to indicate that its functionality underlies that QoS service. It participates IN the NextService association to identify a subsequent ConditioningService, if any, that acts
    ON traffic after it has been processed by the scheduler. */ ( id SERIAL PRIMARY KEY , scheduler_type text[] , other_scheduler_type text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.preamble_marker_service /* PreambleMarkerService models the storing of traffic- conditioning results IN a packet preamble. An instance appends a two-part string of the form '<type>,<value>' to the packet preamble. The concept of 'type's is discussed more fully IN the Description of the class' FilterItemList property. */ ( id SERIAL PRIMARY KEY , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.priority8021_qmarker_service /* Priority8021QMarkerService marks the Priority field in an 802.1Q- compliant frame, with a specified value. Frames are marked in order to control the conditioning that they will subsequently receive. Following common practice, the value to be written into the field is represented as an unsigned 8-bit integer. */ ( id SERIAL PRIMARY KEY , priority_value text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.qo_sservice /* This is a concrete class that represents the ability to conceptualize a QoS service as a set of coordinated sub-services. This enables the network administrator to map business rules to the network, and the network designer to engineer the network such that it can provide different functions for different traffic streams. This class has two main purposes. First, it serves as a common base class for defining various sub-services that are needed to build higher-level QoS services. Second, it serves as a way to consolidate relationships between different types of QoS services and different types of ConditioningServices. For example, Gold Service may be defined as a QoSService which aggregates two other QoSServices together. Each of these 'other' QoSServices could be DiffServServices - one representing the servicing of very high demand packets (instantiated as a DiffServService directly), and one representing the service given to most of the packets (instantiated as an AFService). The high demand DiffServService instance would use QoSConditioning SubService to aggregate together the necessary classifiers to indicate which traffic it applies to, the appropriate meters for contract limits, the marker to mark the EF PHB in the packets, and the queuing-related services. The AFService instance would similarly use QoSConditioning SubService to aggregate its classifiers, meters, the several markers used to mark the different AF PHBs in the packets, and the queuing-related services needed to deliver the packet treatment. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.qo_ssub_service /* The associations - QoSSubService and QoSConditioningSub Service - operate in conjunction. High level QoS definitions, such as 'John gets Gold Service', map to lower level, more concrete QoSServices (the subclasses of QoSService). This is described by the QoSSubService association. In turn, each of the SubServices may require their own conditioning. This is modeled using the QoSConditioningSubService aggregation. Note that a more concrete QoSService may only be aggregated into one higher level Service, using this association. The cardinality on the GroupComponent reference is Max (1). */ ( id SERIAL PRIMARY KEY , qo_sservice_id7 INTEGER REFERENCES qo_sservice(id) , qo_sservice_id8 INTEGER REFERENCES qo_sservice(id) ); 
    CREATE TABLE public.queuing_service /* QueuingService represents the ability to queue network traffic, and to specify the characteristics for determining long-term congestion. It is modeled as a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService association). This indicates that its functionality underlies the QoSService. */ ( id SERIAL PRIMARY KEY , current_queue_depth text[] , depth_units text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.red_dropper_service /* REDDropperService represents the ability to drop network traffic using a Random Early Detection (RED) algorithm. The purpose of a RED algorithm is to avoid congestion (as opposed to managing congestion). Instead of waiting for the queues to fill up, and then dropping large numbers of packets, RED works by monitoring average queue depth. When the queue depth exceeds a minimum threshold, packets are randomly discarded. These discards cause TCP to slow its transmission rate for those connections that experienced the packet discards. Other connections are not affected by these discards. A RED dropper always drops packets from a single queue, which is related to the dropper as the following Service in the NextService association. The queue(s) examined by the drop algorithm are found by following the CalculationServiceForDropper association(s) to determine the dropper's DropThresholdCalculationService(s),
        AND THEN
    following the CalculationBasedOnQueue association to find the queue being watched by each CalculationService. */ ( id SERIAL PRIMARY KEY , min_queue_threshold text[] , max_queue_threshold text[] , start_probability text[] , stop_probability text[] , threshold_units text[] , dropper_type text[] , other_dropper_type text[] , always_drop text[] , drop_from text[] , drop_start_metric text[] , drop_maintain_metric text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.redirection_service /* RedirectionService provides the capability to manage redirection services. Examples of this include any video stream directed to a Network Port (by the operating system)
    ON a Computer System redirected out to a remote administrator's console. Similarly this can include input redirected into the same Network Port. Other examples include the redirection of IO from a logical element to a remote or local destination. Each redirection stream is accessible via a SAP. This service can support multiple redirection types via multiple associated SAPs. */ ( id SERIAL PRIMARY KEY , other_redirection_service_type text[] , max_current_enabled_saps text[] , sharing_mode text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.route_calculation_service /* This is an abstract base class, derived from Service, that represents the route calculation aspects of a system. This class also addresses functions performed by the system when it exchanges routing information. Examining the RouteCalculationService class definition, note that its superclass NetworkService is deprecated. Therefore, NetworkService's properties need NOT be implemented IN an instance of RouteCalculationService. Unfortunately, NetworkService cannot be removed
FROM the object hierarchy without a major Schema release. When/if this occurs, the NetworkService superclass will be removed,
        AND RouteCalculationService will subclass
FROM CIM_Service directly. Also note that there are a large number of additional routing protocols that are NOT currently modeled. These will be added
    OVER time. */ ( id SERIAL PRIMARY KEY , router_id text[] , algorithm_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.snmp_community_string /* SNMPCommunityString is an access point for an SNMPService. Each instance stores a community string that can be used for making SNMP requests. */ ( id SERIAL PRIMARY KEY , community_string text[] , type_of_access text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.snmp_service /* SNMPService represents an SNMP agent running
    ON a hosting system. The UDP port to use to contact the agent is an instance of UDPProtocolEndpoint. The endpoint is associated
WITH the SNMPService via a Dependency relationship. The community string(s) to use
    WHEN contacting the SNMP agent reside IN instances of SNMPCommunityString, that are associated
WITH the SNMPService via the ServiceAccessBySAP relationship. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.scheduling_service_to_schedule /* This is a top-level association, representing the relationship
    BETWEEN a scheduler (PacketSchedulingService)
        AND a SchedulingElement, IN a configuration involving cascaded schedulers. The SchedulingElement, IN turn, represents the information IN a packet scheduling service that is specific to this scheduler, such AS relative priority
        OR allocated bandwidth. Although it cannot be expressed formally
WITH the association cardinalities, there is an additional constraint
    ON participation IN this association. A particular instance of (a subclass of) SchedulingElement always participates either IN exactly one instance of this association,
        OR IN exactly one instance of the association QueueToSchedule. */ ( id SERIAL PRIMARY KEY , packet_scheduling_service_id5 INTEGER REFERENCES packet_scheduling_service(id) , scheduling_element_id6 INTEGER REFERENCES scheduling_element(id) ); 
        CREATE TABLE public.text_redirection_sap /* TextRedirectionSAP describes an access point to start the text redirection. One access point represents access to a single text redirection stream. */ ( id SERIAL PRIMARY KEY , session_terminate_sequence text[] , text_flow_type text[] , other_text_flow_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.text_redirection_service /* TextRedirectionService provides the capability to redirect a text console output to the remote console. For example, any text stream directed to a Serial COM Port (by the operating system)
    ON a Computer System can be redirected out to a remote administrator's console. Similarly the text input keystrokes from the remote administrator's console can be redirected into the same COM Port. Each redirection stream is accessible via a TextRedirectionSAP. This service can support multiple redirection streams via multiple associated TextRedirectionSAPs. */ ( id SERIAL PRIMARY KEY, other_redirection_service_type text[] , max_current_enabled_saps text[] , sharing_mode text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.to_smarker_service /* ToSMarkerService marks the ToS (type of service) field IN the IPv4 packet header [R791]
WITH a specific value. Packets are marked IN order to control the conditioning that they will subsequently receive. Following common practice, the value to be written into the ToS field is represented AS an unsigned 8-bit integer. */ ( id SERIAL PRIMARY KEY , to_svalue text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.token_bucket_meter_service /* This is a concrete subclass of the MeterService class that represents the metering of network traffic
USING a token bucket meter. Two types of token bucket meters are defined
USING this class - a simple, two-parameter bucket meter,
        AND a multi-stage meter. A simple token bucket usually has two parameters, an average token rate
        AND a burst size,
        AND has two conformance levels: 'conforming'
        AND 'non-conforming'. This class also defines an excess burst size, which enables the meter to have three conformance levels ('conforming', 'partially conforming',
        AND 'non-conforming'). IN this case, packets that exceed the excess burst size are deemed non-conforming, while packets that exceed the smaller burst size but are less than the excess burst size are deemed partially conforming. */ ( id SERIAL PRIMARY KEY , average_rate text[] , peak_rate text[] , burst_size text[] , excess_burst_size text[] , meter_type text[] , other_meter_type text[] , conformance_levels text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_redirection_sap /* USBRedirectionSAP is a logical representation of a USB redirection session. One access point represents access to a single USB redirection session. */ ( id SERIAL PRIMARY KEY , connection_mode text[] , reset_timeout text[] , session_timeout text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.vlan /* An instance of VLAN represents a VLAN within a switch. IN a particular switch, there should be an instance of VLAN for every VLAN available. For example, IN a switch
WITH port-based VLANs, if there are 16 VLANs to which ports can be assigned (VLAN 1 through VLAN 16), there should be an instance of CIM_VLAN for each of VLAN 1 through VLAN 16. VLAN inherits Name
FROM ServiceAccessPoint. Use this for the textual name of the VLAN, if there is one. Otherwise, synthesize a textual name, e.g., VLAN 0003. (Consider leading zero fill, AS shown, to ensure that if the textual VLAN names are extracted
        AND presented by a management applictions, the VLAN names will sort IN the expected order.) The numeric part of the name should be at least four digits wide since 802.1Q specifies 4095 VLANs. It is intended that VLAN be subclassed only if necessary to add attributes. The type of the VLAN can be inferred
FROM the VLANService(s)
WITH which the VLAN is associated IN the VLANFor association. An instance of VLAN may be associated
WITH more than one VLANService. For example, there are switches that support both 802.1Q VLANs
        AND the vendor's proprietary VLANs. In some such switches, if a broadcast packet is received on a port in an 802.1Q VLAN (VLAN 5, for example), it may be be transmitted from a port in a 'proprietary' VLAN 5. In effect, there is only one VLAN 5, and the type of port only determines the packet format for tagged packets. In the case just described, only one instance of CIM_VLAN should be instantiated for VLAN 5, and it should be associated both with the 802.1Q VLANService and the proprietary VLANService. In typical VLAN-aware switches, packets can be assigned to a VLAN based on the port on which they are received (port-based VLANS), based on the source MAC address (MAC-based VLANs), or based on the value of a set of bits in the packet (protocol-based VLANs). If it is desirable to represent the VLAN assignment predicate for some MAC-based VLAN switch, it will be necessary to subclass VLAN. The list of MAC addresses associated with a VLAN might be an attribute of the subclass. If it is desirable to represent the VLAN assignment predicate in a protocol-based VLAN switch, it will also be necessary to subclass VLAN, InboundVLAN, or both. If the predicate applies to all ports in the switch, then only VLAN need be used/instantiated. If the predicate may vary based on the port, then InboundVLAN must be subclassed, and CIM_VLAN might have to be subclassed as well. */ ( id SERIAL PRIMARY KEY , vlan_number text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.vlan_service /* This class is deprecated following discussion as to the need of a modeling a VLAN as a service. It was determined that a VLAN service was not needed. VLANService represents the VLAN aspects of the function performed by a switch. Some VLAN-aware devices participate in protocols where VLAN information is propagated among switches, e.g., GVRP in 802.1Q switches and VTP in Cisco Catalyst switches. VLANService also represents the function performed by the switch as a participant in such a protocol. VLANService must be subclassed so that the type of instance can be distinguished by its class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.weighted_reddropper_service /* This class represents a logical entity that resides in the data forwarding path of a network device. It describes the ability to drop network traffic using a Weighted Random Early Detection (WRED) algorithm. Like RED, the purpose of WRED is to avoid congestion (as opposed to managing congestion). This modification of the basic RED algorithm enables packets belonging to different traffic classes to be dropped at different queue depths. This algorithm also enables discard to be done based on different information contained in the packet header, such as IP Precedence, RSVP session parameters, or even on other factors not directly encoded in the packet header, such as the queue depth. Implementation of this class has shown that weighting should not be a property of the class (but on an association to it), and that there is insufficient data to process the drop metric. The class is deprecated pending further definition by the DMTF. */ ( id SERIAL PRIMARY KEY , drop_metric text[] , other_drop_metric text[] , weight text[] , dropper_type text[] , other_dropper_type text[] , always_drop text[] , drop_from text[] , drop_start_metric text[] , drop_maintain_metric text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_scsiconnection /* This class contains the attributes of and negotiated values for, an iSCSI Connection which is modeled as a subclass of NetworkPipe. The original settings that are a starting point for negotiation are found in the class iSCSIConnectionSettings. */ ( id SERIAL PRIMARY KEY , connection_id text[] , max_receive_data_segment_length text[] , max_transmit_data_segment_length text[] , header_digest_method text[] , other_header_digest_method text[] , data_digest_method text[] , other_data_digest_method text[] , receiving_markers text[] , sending_markers text[] , activei_scsiversion text[] , authentication_method_used text[] , mutual_authentication text[] , instance_id text[] , directionality text[] , aggregation_behavior text[] , enabled_state text[] , requested_state text[] , other_enabled_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_scsisession /* iSCSISession is a network pipe between an initiator and target SCSIProtocolEndpoints. An iSCSISession is composed of one or more TCP connections which MUST be selected from a SystemSpecificCollection representing an iSCSI Portal Group. NetworkPipeComposition aggregates NetworkPipe instances representing iSCSI connections, which are associated to TCPProtocolEndpoints. Only an iSCSI initiator can create an iSCSI Session, an iSCSI Target MUST accept (or reject) a session request. EndOfNetworkPipe associates iSCSISession with SCSIProtocolEndpoint. */ ( id SERIAL PRIMARY KEY , directionality text[] , session_type text[] , tsih text[] , end_point_name text[] , current_connections text[] , initial_r2_t text[] , immediate_data text[] , max_outstanding_r2_t text[] , max_unsolicited_first_data_burst_length text[] , max_data_burst_length text[] , data_sequence_in_order text[] , data_pduin_order text[] , error_recovery_level text[] , max_connections_per_session text[] , default_time_to_wait text[] , default_time_to_retain text[] , instance_id text[] , aggregation_behavior text[] , enabled_state text[] , requested_state text[] , other_enabled_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_action_in_policy_action /* PolicyActionInPolicyAction is used to represent the compounding of policy actions into a higher-level policy action. */ ( id SERIAL PRIMARY KEY , compound_policy_action_id6 INTEGER REFERENCES compound_policy_action(id) , policy_action_id7 INTEGER REFERENCES policy_action(id) , action_order text[] ); 
        CREATE TABLE public.policy_action_in_policy_rule /* A PolicyRule aggregates zero or more instances of the PolicyAction class, via the PolicyActionInPolicyRule association. A Rule that aggregates zero Actions is not valid--it may, however, be in the process of being entered into a PolicyRepository or being defined for a System. Alternately, the actions of the policy may be explicit in the definition of the PolicyRule. Note that a PolicyRule should have no effect until it is valid. The Actions associated with a PolicyRule may be given a required order, a recommended order, or no order at all. For Actions represented as separate objects, the PolicyActionInPolicyRule aggregation can be used to express an order. This aggregation does not indicate whether a specified action order is required, recommended, or of no significance; the property SequencedActions in the aggregating instance of PolicyRule provides this indication. */ ( id SERIAL PRIMARY KEY , policy_rule_id6 INTEGER REFERENCES policy_rule(id) , policy_action_id7 INTEGER REFERENCES policy_action(id) , action_order text[] ); 
        CREATE TABLE public.prs__sisservice /* The PRS_SISService is used as a class factory for PRS_Transactions. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.associated_job_method_result /* AssociatedJobMethodResult represents an association between a ConcreteJob and the MethodResult expressing the parameters for the Job when the job was created by side-effect of the execution of an extrinsic method. */ ( id SERIAL PRIMARY KEY , concrete_job_id5 INTEGER REFERENCES concrete_job(id) , method_result_id6 INTEGER REFERENCES method_result(id) ); 
        CREATE TABLE public.bios_service /* A class derived from Service that provides the controls to manage the system BIOS configuration of a managed computer system or device. This service exposes functionality to retrieve BIOS configuration data or attributes, set BIOS attribute values, and restore a default configuration of attribute values for a given computer system. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.boot_config_setting /* A class derived from SettingData that provides the container to arrange all the BootSourceSetting instances in an ordered sequence. There can be one or more of the BootConfigSetting instances associated to a ComputerSystem. For example, one such BootConfigSetting could be a default boot configuration supplied by the manufacturer, a second one could be a configuration recommended by the IT Administrator. A third one could be the one actually to be used on next system boot. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , changeable_type text[] , configuration_name text[] , so_id text[] , so_org_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.boot_sap /* A representation of the access points of a BootService. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.clustering_sap /* A representation of the access points of a ClusteringService. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.diagnostic_service /* The CIM_DiagnosticService class provides the ability to start a service that functions to participate in a problem determination process. Specific diagnostic services SHOULD be defined by subclassing this class. Examples of a diagnostic service are tests, information retrievers, exercisers, and ports to external executives. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.diagnostic_test /* The CIM_DiagnosticTest class represents the framework for running diagnostic tests. Specific diagnostic tests may be defined by subclassing and/or instantiating this object. To provide more detail for a type of test(s) (i.e, additional properties and methods), subclassing is appropriate. When a DiagnosticTest can be simultaneously executed against several elements, then DiagnosticTest may launch a ConcreteJob to represent each execution. */ ( id SERIAL PRIMARY KEY , other_characteristic_description text[] , is_in_use text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.diagnostic_test_in_package /* This class is being deprecated. Tests should be grouped at the test level, not in the model. Therefore, the association is not appropriate. /n This is an association class that identifies a Diagnostic Test as made up of lower level Tests. In this case, the test identified as the GroupComponent reference (i.e, the higher level test) would have the "Is Package" enumerated value specified in DiagnosticTest. Characteristics. */ ( id SERIAL PRIMARY KEY , diagnostic_test_id7 INTEGER REFERENCES diagnostic_test(id) , diagnostic_test_id8 INTEGER REFERENCES diagnostic_test(id) ); 
        CREATE TABLE public.disk_drive_diagnostic_test /* This class specializes CIM_DiagnosticTest to define the tests specific to disk drives. */ ( id SERIAL PRIMARY KEY , disk_drive_test_type text[] , other_disk_drive_test_type text[] , other_characteristic_description text[] , is_in_use text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.exported_file_share_capabilities /* ExportedFileShareCapabilities specifies the combination of properties that a FileExportService can support when creating or maintaining FileShares. Each supported combination of properties is specified by a ExportedFileShareSetting that is associated with the ExportedFileShareCapabilities element via SettingAssociatedToCapabilities. An ExportedFileShareCapabilities element specifies the properties supported when using it. A CreateGoal method is provided that creates an ExportedFileShareSetting element to be used as a goal when creating or modifying a file share. */ ( id SERIAL PRIMARY KEY , file_sharing_protocol text[] , ca_supported text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.fchba_diagnostic_test /* The CIM_FCHBADiagnosticTest class represents the framework for running diagnostic tests. Specific diagnostic tests may be defined by subclassing and/or instantiating this object. To provide more detail for a type of test(s) (i.e, additional properties and methods), subclassing is appropriate. When a DiagnosticTest can be simultaneously executed against several elements, then DiagnosticTest may launch a ConcreteJob to represent each execution. */ ( id SERIAL PRIMARY KEY , fchba_test_type text[] , other_fchbatest_type_description text[] , other_characteristic_description text[] , is_in_use text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.file_system /* A file or dataset store local to a System (such as a ComputerSystem or an ApplicationSystem) or remotely mounted from a file server. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , root text[] , block_size text[] , file_system_size text[] , available_space text[] , read_only text[] , encryption_method text[] , compression_method text[] , case_sensitive text[] , case_preserved text[] , max_file_name_length text[] , cluster_size text[] , file_system_type text[] , persistence_type text[] , other_persistence_type text[] , number_of_files text[] , is_fixed_size text[] , resize_increment text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.file_system_capabilities /* FileSystemCapabilities specifies the combination of properties that a FileSystemService can support when creating or maintaining FileSystems. Each supported combination of properties is specified by a FileSystemSetting that is associated with the FileSystemCapabilities element via ElementSettingData. A FileSystemCapabilities element specifies the properties supported when using it. This class provides a CreateGoal method that can be used to create a FileSystemSetting element that can be used as a goal for creating or modifying a filesystem. This class also supports persistence and recoverability of a FileSystem and its contained elements as defined in CIM 2.8 for the use of DatabaseStorageArea. */ ( id SERIAL PRIMARY KEY , actual_file_system_type text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.file_system_statistics_service /* A subclass of StatisticsService that provides services for filtering and retrieving statistics from a StatisticsManifestCollection that contains instances of FileSystemStatisticalData. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.help_service /* HelpService provides the ability for a managed element to describe and provide access to its Help information. Support for various delivery mechanisms and data formats can be specified so that the most suitable data representation can be chosen. In adddition, a request can be made to launch a "Help" program, if available. */ ( id SERIAL PRIMARY KEY , other_delivery_option_description text[] , other_document_format_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.help_service_available_to_file /* CIM_HelpServiceAvailableToFile indicates that the service is available for accessing the help file. */ ( id SERIAL PRIMARY KEY , help_service_id5 INTEGER REFERENCES help_service(id) , logical_file_id6 INTEGER REFERENCES logical_file(id) , document_format text[] , other_document_format_description text[] ); 
        CREATE TABLE public.job_destination /* JobDestination is an EnabledLogicalElement representing where a Job is submitted for processing. It can refer to a queue that contains zero or more Jobs, such as a print queue containing print Jobs. JobDestinations are hosted on Systems, similar to the way that Services are hosted on Systems. Also, they may be enabled/disabled similar to Services. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.job_destination_jobs /* An association describing where a Job is submitted for processing, ie to which JobDestination. */ ( id SERIAL PRIMARY KEY , job_destination_id5 INTEGER REFERENCES job_destination(id) , job_id6 INTEGER REFERENCES job(id) ); 
        CREATE TABLE public.job_queue /* Status and configuration of a JobQueue. Jobs are held on a queue, and can move from queue to queue until being processed. */ ( id SERIAL PRIMARY KEY , queue_status text[] , queue_status_info text[] , default_job_priority text[] , max_time_on_queue text[] , max_jobs_on_queue text[] , max_job_cputime text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.local_file_system /* A class derived from FileSystem that represents the file store controlled by a ComputerSystem through local means (e.g., direct device driver access). In this case, the file store is managed directly by the ComputerSystem without the need for another computer to act as a file server. This definition does not breakdown in the case of a Clustered File System. In this scenario, the FileSystem is a LocalFileSystem, weak to the Cluster. */ ( id SERIAL PRIMARY KEY , directory_service_usage text[] , local_access_definition_required text[] , multiple_disks_supported text[] , path_name_separator_string text[] , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , root text[] , block_size text[] , file_system_size text[] , available_space text[] , read_only text[] , encryption_method text[] , compression_method text[] , case_sensitive text[] , case_preserved text[] , max_file_name_length text[] , cluster_size text[] , file_system_type text[] , persistence_type text[] , other_persistence_type text[] , number_of_files text[] , is_fixed_size text[] , resize_increment text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.log /* Log represents any type of event, error or informational register or chronicle. The object describes the existence of the log and its characteristics. Log does not dictate the form of the data represented or how records/messages are stored in the log and/or accessed. Subclasses will define the appropriate methods and behavior. */ ( id SERIAL PRIMARY KEY , max_number_of_records text[] , current_number_of_records text[] , overwrite_policy text[] , log_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.log_manages_record /* LogManagesRecord describes the aggregation or location of Records managed by a Log. */ ( id SERIAL PRIMARY KEY , log_id7 INTEGER REFERENCES log(id) , record_for_log_id8 INTEGER REFERENCES record_for_log(id) ); 
        CREATE TABLE public.message_log /* MessageLog represents any type of event, error or informational register or chronicle. The object describes the existence of the log and its characteristics. Several methods are defined for retrieving, writing and deleting log entries, and maintaining the log. This type of log uses iterators to access the log records, whereas its peer class, RecordLog, uses more abstracted access mechanisms. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , max_log_size text[] , size_of_header text[] , header_format text[] , max_record_size text[] , size_of_record_header text[] , record_header_format text[] , overwrite_policy text[] , other_policy_description text[] , time_when_outdated text[] , percentage_near_full text[] , last_change text[] , time_of_last_change text[] , record_last_changed text[] , is_frozen text[] , character_set text[] , max_number_of_records text[] , current_number_of_records text[] , log_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.mount /* An association between a FileSystem and a Directory which indicates that the Directory is being attached to the FileSystem. The semantics of this relationship require that the mounted Directory be contained by a FileSystem (via the FileStorage association) that is different from the FileSystem referenced as the Dependent. The Directory's containing FileSystem could be either local
        OR remote. For example, a LocalFileSystem
    ON a Solaris ComputerSystem can mount a Directory
FROM the FileSystem accessed via the machine's CDROM drive, i.e., another LocalFile System. On the other hand, in a 'remote' case, the Directory is first exported by its FileSystem, which is hosted on another ComputerSystem acting (for example) as a file server. In order to distinguish these two types of Mount, it is recommended that a CIM_Export association always be defined for the remotely accessed/mounted Directories. */ ( id SERIAL PRIMARY KEY , directory_id5 INTEGER REFERENCES directory(id) , file_system_id6 INTEGER REFERENCES file_system(id) ); 
CREATE TABLE public.oob_alert_service /* This Service is implemented by a LogicalDevice (e.g. a NetworkAdapter or Modem) that is capable of sending alert messages to a remote destination. The alert messages reflect the state of one or more ManagedSystemElements. The Elements for which alert messages are forwarded, are defined by enumerating the ProvidesServiceToElement association for the Service. Out of Band (OOB) refers to the mechanisms in use when normal OS-based management mechanisms are not possible. This occurs when the OS is down or not functioning properly. */ ( id SERIAL PRIMARY KEY , destination_type text[] , other_destination_type_description text[] , destination_address text[] , message_format text[] , other_message_format_description text[] , only_sends_fixed_message text[] , fixed_part_of_message text[] , destination_is_ack_capable text[] , retry_count text[] , retry_interval text[] , presence_heartbeat_capable text[] , enable_presence_heartbeats text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.operating_system /* An OperatingSystem is software/firmware that makes a ComputerSystem's hardware usable,
        AND implements and/or manages the resources, file systems, processes, user interfaces, services, ... available
    ON the ComputerSystem. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , os_type text[] , other_type_description text[] , version text[] , last_boot_up_time text[] , local_date_time text[] , current_time_zone text[] , number_of_licensed_users text[] , number_of_users text[] , number_of_processes text[] , max_number_of_processes text[] , total_swap_space_size text[] , total_virtual_memory_size text[] , free_virtual_memory text[] , free_physical_memory text[] , total_visible_memory_size text[] , size_stored_in_paging_files text[] , free_space_in_paging_files text[] , max_process_memory_size text[] , distributed text[] , max_processes_per_user text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.platform_watchdog_service /* PlatformWatchdogService is class derived
FROM Service that provides the controls to manage the watchdog timer service of a managed element. A PlatformWatchdogService monitors the ability of a monitored entity to reset a countdown timer before it expires. If the timer expires, the service may take specific action upon expiration. The monitored entity may be the Operating System, BIOS,
        OR a software component that is installed
    ON the computer system. */ ( id SERIAL PRIMARY KEY , monitored_entity_type text[] , other_monitored_entity_type_description text[] , timeout_interval text[] , timer_expired text[] , timer_resolution text[] , current_timer_value text[] , time_of_last_expiration text[] , action_on_expiration text[] , other_action_on_expiration text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.process /* Each instance of the CIM_Process class represents a single instance of a running program. A user of the OperatingSystem will typically see a Process AS an application
        OR task. Within an OperatingSystem, a Process is defined by a workspace of memory resources
        AND environmental settings that are allocated to it.
    ON a multitasking System, this workspace prevents intrusion of resources by other Processes. Additionally, a Process can execute AS multiple Threads, ALL which run within the same workspace. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , os_creation_class_name text[] , os_name text[] , creation_class_name text[] , handle text[] , name text[] , priority text[] , execution_state text[] , other_execution_description text[] , creation_date text[] , termination_date text[] , kernel_mode_time text[] , user_mode_time text[] , working_set_size text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.process_executable /* A link
    BETWEEN a Process
        AND a DataFile indicating that the File participates IN the execution of the Process. */ ( id SERIAL PRIMARY KEY , data_file_id5 INTEGER REFERENCES data_file(id) , process_id6 INTEGER REFERENCES process(id) ); 
        CREATE TABLE public.process_of_job /* ProcessOfJob describes that the referenced Process is the result of the execution of the Job. A Job may cause multiple Processes to run, perhaps
    ON different operating systems. This is allowed by the '*' cardinality of the Process reference. Note that a Process can result
FROM only one Job - hence, the '0..1' cardinality
    ON Job. */ ( id SERIAL PRIMARY KEY , job_id7 INTEGER REFERENCES job(id) , process_id8 INTEGER REFERENCES process(id) ); 
    CREATE TABLE public.record_in_log /* RecordInLog describes the aggregation
        OR location of Log entries within a MessageLog. */ ( id SERIAL PRIMARY KEY , message_log_id7 INTEGER REFERENCES message_log(id) , log_record_id8 INTEGER REFERENCES log_record(id) ); 
        CREATE TABLE public.record_log /* RecordLog serves AS an aggregation point for LogRecord objects. This class presents a higher level view of a log than its peer class MessageLog (which uses iterators)
        AND introduces a new key structure. Access to records IN this log is achieved through the use of the standard CIM Operations defined AS part of WBEM. */ ( id SERIAL PRIMARY KEY , instance_id text[] , max_number_of_records text[] , current_number_of_records text[] , overwrite_policy text[] , log_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.remote_file_system /* A class derived
FROM FileSystem that represents access of the FileSystem via a network-related service. IN this case, the file store is hosted by a computer, acting AS a file server. For example, the file store for an NFS FileSystem is typically NOT
    ON a ComputerSystem's locally controlled media, nor is it directly accessed through a device driver. Subclasses of RemoteFileSystem contain client-side configuration information related to the access of the FileSystem. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , root text[] , block_size text[] , file_system_size text[] , available_space text[] , read_only text[] , encryption_method text[] , compression_method text[] , case_sensitive text[] , case_preserved text[] , max_file_name_length text[] , cluster_size text[] , file_system_type text[] , persistence_type text[] , other_persistence_type text[] , number_of_files text[] , is_fixed_size text[] , resize_increment text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.service_process /* CIM_ServiceProcess is an association used to establish relationships between Services and Processes. It is used to indicate if a Service is running in a particular Process. It is also used to indicate, via the ExecutionType property, if the Service started and is wholly responsible for the Process, or if the Service is running in an existing Process, perhaps with other unrelated Services, which is owned or started by a different entity. */ ( id SERIAL PRIMARY KEY , service_id5 INTEGER REFERENCES service(id) , process_id6 INTEGER REFERENCES process(id) , execution_type text[] ); 
    CREATE TABLE public.share /* A Share is representative of an object presented for use (or shared) across systems. Instances of CIM_Share are associated with the shared object on the 'server'-side via the CIM_SharedElement association. Shares are mounted on the 'client'-side (usually into another namespace) via the CIM_Import Share association. CIM_Share is Abstract to force subclassing to define the semantics of sharing. */ ( id SERIAL PRIMARY KEY , instance_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.shared_element /* SharedElement associates the Share to a LogicalElement that is being exported. */ ( id SERIAL PRIMARY KEY , logical_element_id5 INTEGER REFERENCES logical_element(id) , share_id6 INTEGER REFERENCES share(id) ); 
    CREATE TABLE public.system_resource /* An entity managed by BIOS, an OperatingSystem or other software, which is available for use by application software and/or LogicalDevices. Resources are individually identified and allocated entities, that are assignable, reservable, counted/ tracked, releasable, reset-able, etc. Examples of software Resources are message queues, shared memory segments (identified by a key value), and named pipes, while examples of hardware Resources (in an x86 environment) are IRQs, DMA channels and memory mapped I/O. */ ( id SERIAL PRIMARY KEY , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.thread /* Threads represent the ability to execute units of a Process or task in parallel. A Process can have many Threads, each of which is weak to the Process. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , os_creation_class_name text[] , os_name text[] , process_creation_class_name text[] , process_handle text[] , creation_class_name text[] , handle text[] , priority text[] , execution_state text[] , kernel_mode_time text[] , user_mode_time text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.unix_local_file_system /* A class derived from LocalFileSystem that represents the Unix environment view of a file store controlled by a ComputerSystem through local means (e.g., direct device driver access). In this case, the file store is managed directly by the ComputerSystem without the need for another computer to act as a file server. This definition does not breakdown in the case of a Clustered File System. In this scenario, the FileSystem is a LocalFileSystem, weak to the Cluster. */ ( id SERIAL PRIMARY KEY , free_inodes text[] , total_inodes text[] , fs_reserved_capacity text[] , directory_service_usage text[] , local_access_definition_required text[] , multiple_disks_supported text[] , path_name_separator_string text[] , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , root text[] , block_size text[] , file_system_size text[] , available_space text[] , read_only text[] , encryption_method text[] , compression_method text[] , case_sensitive text[] , case_preserved text[] , max_file_name_length text[] , cluster_size text[] , file_system_type text[] , persistence_type text[] , other_persistence_type text[] , number_of_files text[] , is_fixed_size text[] , resize_increment text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.unix_process /* Each instance of the CIM_UnixProcess class represents a single instance of a running program. A user of the Operating System will typically see a Process as an application or task. Within an OperatingSystem, a Process is defined by a workspace of memory resources and environmental settings that are allocated to it. On a multitasking System, this workspace prevents intrusion of resources by other Processes. Additionally, a Process can execute as multiple Threads, all which run within the same workspace. */ ( id SERIAL PRIMARY KEY , parent_process_id text[] , real_user_id text[] , process_group_id text[] , process_session_id text[] , process_tty text[] , module_path text[] , process_nice_value text[] , process_waiting_for_event text[] , cs_creation_class_name text[] , cs_name text[] , os_creation_class_name text[] , os_name text[] , creation_class_name text[] , handle text[] , name text[] , priority text[] , execution_state text[] , other_execution_description text[] , creation_date text[] , termination_date text[] , kernel_mode_time text[] , user_mode_time text[] , working_set_size text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.unix_process_statistics /* CIM_UnixProcessStatistics is an association that relates a CIM_UnixProcess to its StatisticalInformation. */ ( id SERIAL PRIMARY KEY , unix_process_id5 INTEGER REFERENCES unix_process(id) , unix_process_statistical_information_id6 INTEGER REFERENCES unix_process_statistical_information(id) ); 
    CREATE TABLE public.unix_thread /* Threads represent the ability to execute units of a Process or task in parallel. A UnixThread inherits from the superclass, CIM_Thread, which is weak to the Process. The values used are defined in sched.h and psched.h. */ ( id SERIAL PRIMARY KEY , sched_policy text[] , other_sched_policy text[] , guard_size text[] , detach_state text[] , inherit_sched text[] , contention_scope text[] , stack_size text[] , concurrency_level text[] , cancel_state text[] , cancel_type text[] , cs_creation_class_name text[] , cs_name text[] , os_creation_class_name text[] , os_name text[] , process_creation_class_name text[] , process_handle text[] , creation_class_name text[] , handle text[] , priority text[] , execution_state text[] , kernel_mode_time text[] , user_mode_time text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.use_of_log /* ManagedSystemElements may record their event, error or informational data within Logs. The use of a Log to hold a ManagedSystemElement's data is described by this association. The type of Element data captured by the Log can be specified
USING the RecordedData string property. */ ( id SERIAL PRIMARY KEY , log_id5 INTEGER REFERENCES log(id) , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) , recorded_data text[] ); 
CREATE TABLE public.use_of_message_log /* ManagedSystemElements may record their event, error
        OR informational data within MessageLogs. The use of a Log to hold a ManagedSystemElement's data is described by this association. UseOfMessageLog has the same semantics as UseOfLog. Users SHOULD reference UseOfLog in lieu of this association. */ ( id SERIAL PRIMARY KEY , message_log_id5 INTEGER REFERENCES message_log(id) , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) , recorded_data text[] ); 
        CREATE TABLE public.wake_up_service /* WakeUpService allows a UnitaryComputerSystem to be woken up from a low power sleep state. This Service is implemented by a LogicalDevice (e.g. NetworkAdapter or Modem) that is capable of receiving wakeup messages, and notifying the System. */ ( id SERIAL PRIMARY KEY , wake_up_type text[] , other_wake_up_type_description text[] , filter_type text[] , other_filter_type_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.account /* CIM_Account is the information held by a SecurityService to track identity and privileges managed by that service. Common examples of an Account are the entries in a UNIX /etc/passwd file. Several kinds of security services use various information from those entries - the /bin/login program uses the account name ('root') and hashed password to authenticate users, and the file service, for instance, uses the UserID field ('0') and GroupID field ('0') to record ownership and determine access control privileges on files in the file system. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. The semantics of Account overlap with that of the class, CIM_Identity. However, aspects of Account - such as its specific tie to a System - are valuable and have been widely implemented. For this reason, the Account and Identity classes are associated using a subclass of LogicalIdentity (AccountIdentity), instead of deprecating the Account class in the CIM Schema. When an Account has been authenticated, the corresponding Identity's TrustEstablished Boolean would be SET to TRUE. Then,
         the Identity class can be used AS defined for authorization purposes. */ ( id SERIAL PRIMARY KEY ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         name text[] ,
         user_id text[] ,
         user_password_encryption_algorithm text[] ,
         other_user_password_encryption_algorithm text[] ,
         inactivity_timeout text[] ,
         last_login text[] ,
         maximum_successive_login_failures text[] ,
         password_expiration text[] ,
         password_history_depth text[] ,
         user_password_encoding text[] ,
         enabled_state text[] ,
         other_enabled_state text[] ,
         requested_state text[] ,
         enabled_default text[] ,
         time_of_last_state_change text[] ,
         transitioning_to_state text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.account_identity /* CIM_AccountIdentity relates a system Account
WITH the Identity that is established. Since Account also carries Identity semantics, the LogicalIdentity association is defined AS the superclass of this association. This association does NOT add any constraints
        OR semantics to ConcreteIdentity. AS a result, it is deprecated. */ ( id SERIAL PRIMARY KEY , account_id6 INTEGER REFERENCES account(id) , identity_id7 INTEGER REFERENCES identity(id) ); 
        CREATE TABLE public.account_maps_to_account /* This relationship may be used to associate an Account used by an AuthenticationService to an Account used for Authorization. For instance, this mapping occurs naturally IN the UNIX /etc/passwd file,
WHERE the AuthenticationService Account ('root') is mapped to the AuthorizationService Account ('0'). The two are separate accounts, AS evidenced by the ability to have another AuthenticationService Account which ALSO maps to the AuthorizationService Account ('0') without ambiguity. This association may be used for other account mappings AS well such AS for coordinating single signon for multiple accounts for the same user. */ ( id SERIAL PRIMARY KEY , account_id5 INTEGER REFERENCES account(id) , account_id6 INTEGER REFERENCES account(id) ); 
CREATE TABLE public.credential_management_sap /* CIM_CredentialManagementSAP represents the ability to utilize
        OR invoke a CredentialManagementService. */ ( id SERIAL PRIMARY KEY , url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.more_person_info /* CIM_MorePersonInfo is an association used to extend the information IN a CIM_Person class instance. */ ( id SERIAL PRIMARY KEY , person_id5 INTEGER REFERENCES person(id) , other_person_information_id6 INTEGER REFERENCES other_person_information(id) ); 
        CREATE TABLE public.security_service /* A service providing security functionaity. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.security_service_uses_account /* This relationship associates SecurityService instances to the Accounts they use IN the course of their work. */ ( id SERIAL PRIMARY KEY , account_id5 INTEGER REFERENCES account(id) , security_service_id6 INTEGER REFERENCES security_service(id) ); 
        CREATE TABLE public.users_account /* This relationship associates UsersAccess
WITH the Accounts
WITH which they're able to interact. This association is deprecated in lieu of AccountIdentity, which defines similar semantics. This was done since the UsersAccess reference in UsersAccount has been deprecated and replaced by the more specific semantics of CIM_Identity. */ ( id SERIAL PRIMARY KEY , account_id6 INTEGER REFERENCES account(id) , users_access_id7 INTEGER REFERENCES users_access(id) ); 
CREATE TABLE public.diagnostic_test_software /* This class is being deprecated to promote its usage to the DiagnosticService level. This is an association class relating DiagnosticTest to the SoftwareElements that provide this test. SoftwareElement describes vendor/version information and other deployment data. */ ( id SERIAL PRIMARY KEY , software_element_id6 INTEGER REFERENCES software_element(id) , diagnostic_test_id7 INTEGER REFERENCES diagnostic_test(id) ); 
CREATE TABLE public.j2ee_deployed_object /* The CIM_J2eeDeployedObject class is an abstract class that is used to define CIM_J2eeModule objects that are deployed in the CIM_J2eeServer. The Deployed Objects are hosted by a J2ee Server and should hence be associated to a J2eeServer instance through the CIM_HostedService association. The scoping keys in the instance are provided by the J2eeServer hosting the deployed object. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_ejb /* The CIM_J2eeEJB class is base class that represents different types of deployed Enterprise JavaBean components. The EJB is hosted by a J2ee Server and should hence be associated to a J2eeServer instance through the CIM_HostedService association. The scoping keys in the instance are provided by the J2eeServer hosting the EJB. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_entity_bean /* Identifies a deployed entity bean within an EJB module. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_jcaconnection_factory /* The CIM_J2eeJCAConnectionFactory class identifies individual JCA connection factories. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_jcamanaged_connection_factory /* This class identifies JCA managed connection factories. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_jdbcdata_source /* The CIM_J2eeJDBCDataSource class contains instances that identify physical JDBC data sources. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_jdbcdriver /* The CIM_J2eeJDBCDriver class identifies individual JDBC drivers. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_jvm /* The CIM_J2eeJVM class identifies a Java VM that is utilized by a J2EE server. For each Java VM that is running threads associated with the J2EE server, its containers or resources, there must be an instance in this class. The instance must be removed when the Java VM is no longer running. The reason this class subclasses from a class as high up in the hierarchy as CIM_EnabledLogicalElement is the absence of a class that models Interpreters, Emulators and the like. The JVM is not an OS, but then neither is it just a process. In v2.9, we hope to plug this hole by introducing a class that will model interpreters and emulators. At this point, the JVM class can be pushed down in the hierarchy. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , java_version text[] , java_vendor text[] , node text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_managed_object /* CIM_J2eeManagedObject is a class for defining operations that may supported by all J2EE managed objects. It contains the attributes and methods that are common to all J2EE managed objects. The J2EE Managed objects - for eg. J2eeServer should participate in instances of the CIM_LogicalIdentity association with the corresponding instance of the J2eeManagedObject class. The start and stop methods of JSR77's J2eeManagedObject find an equivalent IN the RequestStateChange method inherited
FROM EnabledLogicalElement.
USING Enabled/Disabled AS inputs to RequestStateChange, one can effect start
        AND stop. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , start_time text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.j2ee_message_driven_bean /* Identifies a deployed message driven bean within an EJB module. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_module /* The CIM_J2eeModule class is an abstract class
FROM which ALL J2EE module type classes extend. These represent EAR, JAR, WAR,
        AND RAR files that have been deployed. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_module_uses_jvm /* The CIM_J2eeModuleUsesJVM association identifies the JVM that a specific Module runs in. */ ( id SERIAL PRIMARY KEY , j2ee_module_id5 INTEGER REFERENCES j2ee_module(id) , j2ee_jvm_id6 INTEGER REFERENCES j2ee_jvm(id) ); 
        CREATE TABLE public.j2ee_resource /* The J2eeResource class is a base class for ALL managed object types that represent J2EE resources. J2EE resources are resources that are utilized by the J2EE server to provide the J2EE standard services required by the J2EE platform architecture. The J2EEResource class has several subclasses that do NOT add any new properties. The option of
USING a type property to identify the different resource types while doing away
WITH the numerous empty subclasses was NOT chosen because the subclasses,
    WHEN enhanced by vendor specific extensions are significantly different
FROM each other. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.j2ee_resource_adapter /* Identifies a deployed Resource Adapter within a Resource Adapter Module. The resource adapter is hosted by a J2ee Server
        AND should hence be associated to a J2eeServer instance through the CIM_HostedService association. The scoping keys IN the instance are provided by the J2eeServer hosting the resource adapter. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_resource_adapter_module /* CIM_J2eeResourceAdapterModule identifies a deployed Resource Adapter Module
        AND is a container for resource adapters. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_servlet /* Identifies a deployed servlet component. The Servlet is hosted by a J2ee Server
        AND should hence be associated to a J2eeServer instance through the CIM_HostedService association. The scoping keys IN the instance are provided by the J2eeServer hosting the servlet. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_session_bean /* The CIM_J2eeSessionBean class is a base class that represents specific types of deployed Session beans. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_stateful_session_bean /* Identifies a deployed stateful session bean within an EJB module. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_stateless_session_bean /* Identifies a deployed stateless session bean within an EJB module. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_urlresource /* CIM_J2eeURLResource identifies a URL resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_web_module /* CIM_J2eeWebModule identifies a deployed WAR module
        AND is a container for Servlets. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.operating_system_software_feature /* Indicates the SoftwareFeatures that make up the Operating System. The SoftwareFeatures can be part of different Products. */ ( id SERIAL PRIMARY KEY , operating_system_id6 INTEGER REFERENCES operating_system(id) , software_feature_id7 INTEGER REFERENCES software_feature(id) ); 
        CREATE TABLE public.software_element_sapimplementation /* An association
    BETWEEN a ServiceAccessPoint
        AND how it is implemented by one
        OR more executable SoftwareElements. Note that this association is restricted to 'executable' Elements. IN earlier phases of deployment, the Software FeatureSAPImplementation association is adequate
        AND recommended. The relationship
    BETWEEN this association
        AND Software FeatureSAPImplementation is more fully described here. SoftwareElementSAPImplementation allows the description of greater granularity than SoftwareFeatureSAPImplementation,
    WHEN a SoftwareFeature is fully deployed
        AND results IN several executable Elements. These Elements may implement several different ServiceAccessPoints. Since SoftwareFeatures decompose into SoftwareElements, it is possible to describe how software implements a SAP by
USING either this association
        OR the SoftwareFeatureSAP Implementation relationship. One
        OR the other should be chosen. Both associations should NOT be used for a particular AccessPoint, since their information is redundant. This relationship is especially important
    WHEN the SoftwareFeature
        AND Product aspects are NOT described for a SoftwareElement (ie,
    WHEN the acquisition
        AND deployment of the software is NOT detailed). IN this case, the Software ElementSAPImplementation association is the only one available to describe how an AccessPoint is implemented IN software. Since SoftwareFeatures are NOT instantiated, it is NOT possible to use the SoftwareFeatureSAP Implementation association. The cardinality of this association is many-to-many. A ServiceAccessPoint may be provided by more than one Software Element. (If this is true, it is assumed that the Software Elements operate IN conjunction.) And, any SoftwareElement may provide more than one SAP. */ ( id SERIAL PRIMARY KEY , software_element_id5 INTEGER REFERENCES software_element(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
        CREATE TABLE public.software_element_service_implementation /* An association
    BETWEEN a Service
        AND how it is implemented by one
        OR more executable SoftwareElements. Note that this association is restricted to 'executable' Elements. IN earlier phases of deployment, the SoftwareFeatureService Implementation association is adequate
        AND recommended. The relationship
    BETWEEN this association
        AND Software FeatureServiceImplementation is more fully described here. SoftwareElementServiceImplementation allows the description of greater granularity than SoftwareFeatureService Implementation,
    WHEN a SoftwareFeature is fully deployed
        AND results IN several executable Elements. These Elements may implement several different Services. Since SoftwareFeatures decompose into SoftwareElements, it is possible to describe how software implements a Service by
USING either this association
        OR the SoftwareFeature ServiceImplementation relationship. One
        OR the other should be chosen. Both associations should NOT be used for a single Service instance, since their information is redundant. This relationship is especially important
    WHEN the SoftwareFeature
        AND Product aspects are NOT described for a SoftwareElement (ie,
    WHEN the acquisition
        AND deployment of the software is NOT detailed). IN this case, the Software ElementServiceImplementation association is the only one available to describe how a Service is implemented IN software. Since SoftwareFeatures are NOT instantiated, it is NOT possible to use the SoftwareFeatureService Implementation association. The cardinality of this association is many-to-many. A Service may be provided by more than one SoftwareElement. If this is true, it is assumed that the SoftwareElements operate IN conjunction. And, any SoftwareElement may provide more than one Service. */ ( id SERIAL PRIMARY KEY , software_element_id5 INTEGER REFERENCES software_element(id) , service_id6 INTEGER REFERENCES service(id) ); 
        CREATE TABLE public.software_feature_sapimplementation /* An association
    BETWEEN a ServiceAccessPoint
        AND how it is implemented IN software. The cardinality of this association is many-to-many. A SAP may be provided by more than one SoftwareFeature.
    WHEN multiple SoftwareFeatures are associated
WITH a single SAP, it is assumed that these elements operate IN conjunction to provide the AccessPoint. Note that any SoftwareFeature may provide more than one ServiceAccessPoint. If different implementations of a SAP exist, each of these implementations would result IN individual instantiations of the ServiceAccessPoint object. These individual instantiations would THEN
    have their own associations to the unique implementations. */ ( id SERIAL PRIMARY KEY , software_feature_id5 INTEGER REFERENCES software_feature(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
    CREATE TABLE public.software_feature_service_implementation /* An association
    BETWEEN a Service
        AND how it is implemented IN software. The cardinality of this association is many-to -many. A Service may be provided by more than one SoftwareFeature.
    WHEN multiple SoftwareFeatures are associated
WITH a single Service, it is assumed that these elements operate IN conjunction to provide the Service. Note that any SoftwareFeature may provide more than one Service. If different implementations of a Service exist, each of these implementations would result IN individual instantiations of the Service object. These individual instantiations would THEN
    have their own associations to the unique implementations. */ ( id SERIAL PRIMARY KEY , software_feature_id5 INTEGER REFERENCES software_feature(id) , service_id6 INTEGER REFERENCES service(id) ); 
    CREATE TABLE public.allocated_logical_element /* CIM_AllocatedLogicalElement is the base class that models things that are allocated. Allocated things have an allocation state. */ ( id SERIAL PRIMARY KEY , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.logical_device /* An abstraction
        OR emulation of a hardware entity, that might
        OR might NOT be Realized IN physical hardware. Any characteristics of a LogicalDevice that are used to manage its operation
        OR configuration are contained in,
        OR associated with, the LogicalDevice object. Examples of the operational properties of a Printer would be paper sizes supported
        OR detected errors. Examples of the configuration properties of a Sensor Device would be threshold settings. Various configurations could exist for a LogicalDevice. These configurations could be contained IN Setting objects
        AND associated
WITH the LogicalDevice. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.power_management_service /* A class derived
FROM Service that describes power management functionality, hosted
    ON a System. Whether this service might be used to affect the power state of a particular element is defined by the CIM_ServiceAvailable ToElement association. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.product_service_component /* Indicates that the referenced Service is acquired AS part of a Product. Examples of Services that may be acquired are outsourced storage
        AND networking services,
        OR support
        AND warranty services. Expanding
    ON the examples, Services represent generic functionality - so, it is possible to model the existence of storage volume management
        OR warranty services AS individual instances of subclasses of CIM_Service. These 'Services' may be enabled/disabled, started/stopped, signal an error, etc. (They behave AS standard ManagedSystemElements.) Specific requests against the Services - for example, a request for warranty service
        OR increased storage space - are NOT new instances of Service, but may be requested via the methods of the Service subclass,
        OR be instantiated AS specific subclasses of ManagedElement. */ ( id SERIAL PRIMARY KEY , product_id7 INTEGER REFERENCES product(id) , service_id8 INTEGER REFERENCES service(id) ); 
        CREATE TABLE public.protocol_endpoint /* A communication point
FROM which data can be sent
        OR received. ProtocolEndpoints link system
        OR computer interfaces to LogicalNetworks. */ ( id SERIAL PRIMARY KEY , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.provides_service_to_element /* Note: The use of the CIM_ProvidesServiceToElement class has been deprecated. Instead, ServiceAvailableToElement conveys the semantics of use, while the subclasses of ProvidesServiceToElement (or the ConcreteDependency association) describe dependency relationships. CIM_ProvidesServiceToElement was meant to generalize the ServiceServiceDependency association. This method indicates that ManagedElements can use the functionality provided by one
        OR more Services. An example of the association is that a Processor
        AND an enclosure (a PhysicalElement) can use AlertOnLAN Services to signal an incomplete
        OR erroneous boot. IN reality, AlertOnLAN is simply a HostedService
    ON a computer system that is generally available for use
        AND is NOT a dependency of the processor
        OR enclosure. To describe that the use of the service might be restricted
        OR have limited availability
        OR applicability, the CIM_ServiceAvailableToElement association would be instantiated. */ ( id SERIAL PRIMARY KEY , service_id6 INTEGER REFERENCES service(id) , managed_element_id7 INTEGER REFERENCES managed_element(id) ); 
        CREATE TABLE public.realizes /* CIM_Realizes is the association that defines the mapping
    BETWEEN LogicalDevices
        AND the PhysicalElements that implement them. */ ( id SERIAL PRIMARY KEY , physical_element_id5 INTEGER REFERENCES physical_element(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.remote_service_access_point /* RemoteServiceAccessPoint describes access
        OR addressing information
        OR a combination of this information for a remote connection that is known to a local network element. This information is scoped
        OR contained by the local network element, because this is the context IN which the connection is remote. The relevance of the remote access point
        AND information
    ON its use are described by subclassing RemoteServiceAccessPoint
        OR by associating to it. */ ( id SERIAL PRIMARY KEY , access_info text[] , info_format text[] , other_info_format_description text[] , access_context text[] , other_access_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.resource_pool_configuration_service /* This service provides for active management of Resource Pools. It allows jobs to be started for the creation
        AND deletion of ResourcePools AS well AS addition
        AND subtraction of host resources
FROM ResourcePools */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.sap_available_for_element /* CIM_SAPAvailableForElement conveys the semantics of a Service Access Point that is available for a ManagedElement.
    WHEN CIM_SAPAvailableForElement is NOT instantiated, THEN
    the SAP is assumed to be generally available. If instantiated, the SAP is available only for the associated ManagedElements. For example, a device might provide management access through a URL. This association allows the URL to be advertised for the device. */ ( id SERIAL PRIMARY KEY , service_access_point_id5 INTEGER REFERENCES service_access_point(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) ); 
    CREATE TABLE public.sapsap_dependency /* CIM_SAPSAPDependency is an association
    BETWEEN one ServiceAccessPoint
        AND another ServiceAccessPoint that indicates that the latter is required for the former to utilize
        OR connect
WITH its Service. For example, to print to a network printer, local Print Access Points must utilize underlying network-related SAPs,
        OR ProtocolEndpoints, to send the print request. */ ( id SERIAL PRIMARY KEY , service_access_point_id5 INTEGER REFERENCES service_access_point(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
        CREATE TABLE public.sap_statistics /* SAPStatistics relates the SAPStatisticalInformation class to the ServiceAccessPoint to which it applies. */ ( id SERIAL PRIMARY KEY , sap_statistical_information_id5 INTEGER REFERENCES sap_statistical_information(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
        CREATE TABLE public.service_access_by_sap /* CIM_ServiceAccessBySAP is an association that identifies the access points for a Service. For example, a printer might be accessed by NetWare, MacIntosh
        OR Windows ServiceAccessPoints, which might ALL be hosted
    ON different Systems. */ ( id SERIAL PRIMARY KEY , service_id5 INTEGER REFERENCES service(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
    CREATE TABLE public.service_service_dependency /* CIM_ServiceServiceDependency is an association
    BETWEEN a Service
        AND another Service, which indicates that the latter cooperates
WITH the former, is required to be present, required to have completed,
        OR must be absent for the former Service to provide its functionality. For example, Boot Services might be dependent upon underlying system initialization Services. IN the
    CASE of the initialization Services, the Boot Service might be dependent
    ON the completion of the init Services.
    WHEN examining the ServiceServiceDependency class definition, note that its superclass ProvidesServiceToElement is deprecated. Unfortunately, ProvidesServiceToElement cannot be removed
FROM the object hierarchy without a major Schema release. When
        OR if a major release occurs, the ProvidesServiceToElement superclass will be removed,
        AND ServiceServiceDependency will subclass
FROM CIM_Dependency directly. */ ( id SERIAL PRIMARY KEY , service_id5 INTEGER REFERENCES service(id) , service_id6 INTEGER REFERENCES service(id) , type_of_dependency text[] , restart_service text[] ); 
CREATE TABLE public.storage_extent /* StorageExtent describes the capabilities
        AND management of the various media that exist to store data
        AND allow data retrieval. This superclass could be used to represent the various components of RAID (Hardware
        OR Software)
        OR AS a raw logical extent
    ON top of physical media. */ ( id SERIAL PRIMARY KEY , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.system /* CIM_System represents an entity made up of component parts (defined by the SystemComponent relationship), that operates AS a 'functional whole'. Systems are top-level objects IN the CIM hierarchy, requiring no scoping
        OR weak relationships IN order to exist
        AND have context. It should be reasonable to uniquely name
        AND manage a System at an enterprise level. For example, a ComputerSystem is a kind of System that can be uniquely named
        AND independently managed IN an enterprise. However, these qualities are NOT true for the power supply (or the power supply sub-'system') within the computer. Although a System can be viewed AS a Collection, this view is NOT the correct model. A Collection is simply a 'bag' that 'holds' its members. A System is a higher-level abstraction, built out of its individual components. It is more than the sum of its parts. Note that System is a subclass of EnabledLogicalElement which allows the entire abstraction to be functionally enabled
        OR disabled at a higher level than enabling
        OR disabling its component parts. */ ( id SERIAL PRIMARY KEY , creation_class_name text[] , name text[] , name_format text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.system_component /* CIM_SystemComponent is a specialization of the CIM_Component association that establishes 'part of' relationships
    BETWEEN a System
        AND any ManagedSystemElements of which it is composed. Use this association
WITH caution when
USING it instead of a subclass such AS SystemDevice
        OR a peer association such AS HostedService. This class is very broadly defined, which can lead to erroneous use. For example, Access Points that are dependent
    ON (and hosted on) a System are NOT Components of the System. The System is NOT made up of any AccessPoint 'parts', which is why a Dependency association, HostedAccessPoint, was defined. Similarly, a PhysicalPackage is NOT a 'part' of a System, because the physical element EXISTS independently of any internal components, software,
        AND so on. IN fact, again, a Dependency relationship is true
WHERE a ComputerSystem is Dependent
    ON its packaging, AS described by the ComputerSystemPackage association. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , managed_system_element_id7 INTEGER REFERENCES managed_system_element(id) ); 
    CREATE TABLE public.system_device /* LogicalDevices can be aggregated by a System. This relationship is made explicit by the SystemDevice association. */ ( id SERIAL PRIMARY KEY , system_id7 INTEGER REFERENCES system(id) , logical_device_id8 INTEGER REFERENCES logical_device(id) ); 
    CREATE TABLE public.system_packaging /* Similar to the way that LogicalDevices are 'Realized' by PhysicalElements, Systems can be associated
WITH specific packaging
        OR PhysicalElements. This association explicitly defines the relationship
    BETWEEN a System
        AND its packaging. */ ( id SERIAL PRIMARY KEY , physical_element_id5 INTEGER REFERENCES physical_element(id) , system_id6 INTEGER REFERENCES system(id) ); 
        CREATE TABLE public.system_statistics /* SystemStatistics relates the SystemStatisticalInformation class to the System to which it applies. */ ( id SERIAL PRIMARY KEY , system_statistical_information_id5 INTEGER REFERENCES system_statistical_information(id) , system_id6 INTEGER REFERENCES system(id) ); 
        CREATE TABLE public.view_on_system /* CIM_ViewOnSystem constrains a CIM_AbstractComponent to associate a CIM_System to a CIM_View. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , view_id7 INTEGER REFERENCES view(id) ); 
        CREATE TABLE public.database_segment /* A database segment is a logical storage entity that is composed of one
        OR more storage extents, each of which can have one
        OR more database blocks. Database segments have various types depending
    ON their purpose. Note that the order of extents within a DatabaseSegment should be represented IN the BasedOn dependency of CIM_StorageExtent
USING the BasedOn.OrderIndex attribute. */ ( id SERIAL PRIMARY KEY , purpose text[] , other_purpose text[] , data_organization text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.database_storage_area /* Databases AS modeled by instances of the CommonDatabase class are comprised of a collection of logical storage areas that are represented by instances of the DatabaseStorageArea class. Database storage areas allow the administrator to logically organize the content of the database. This class extends
FROM FileSystem
        AND uses the inherited associations to represent the internal structure of the database. */ ( id SERIAL PRIMARY KEY , is_system_area text[] , last_backup text[] , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , root text[] , block_size text[] , file_system_size text[] , available_space text[] , read_only text[] , encryption_method text[] , compression_method text[] , case_sensitive text[] , case_preserved text[] , max_file_name_length text[] , cluster_size text[] , file_system_type text[] , persistence_type text[] , other_persistence_type text[] , number_of_files text[] , is_fixed_size text[] , resize_increment text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.aggregate_pextent /* This class is deprecated IN lieu of the generic StorageExtent object
        AND the ProtectedExtentBasedOn association. An AggregatePExtent is used to model an SCC RAID implementation. AggregatePExtents provide summary information about the addressable logical blocks which are IN the same StorageRedundancyGroup
        AND reside
    ON the same storage device. This is an alternative grouping for PhysicalExtents,
    WHEN only summary information is needed
        OR
    WHEN automatic configuration is used. */ ( id SERIAL PRIMARY KEY , number_of_blocks text[] , blocks_of_check_data text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.aggregate_psextent /* Similar to AggregatePExtent, this class is deprecated IN lieu of the generic StorageExtent object
        AND the ProtectedExtentBasedOn association. An AggregatePSExtent is used to model an SCC RAID implementation. AggregatePSExtents define the number of addressable logical blocks
    ON a single storage device, excluding any logical blocks mapped AS check data. This is an alternative grouping for ProtectedSpace Extents,
    WHEN only summary information is needed
        OR
    WHEN automatic configuration is used. */ ( id SERIAL PRIMARY KEY , number_of_blocks text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.alarm_device /* An AlarmDevice is a type of Device that emits audible
        OR visible indications related to a problem situation. */ ( id SERIAL PRIMARY KEY , audible_alarm text[] , visible_alarm text[] , motion_alarm text[] , urgency text[] , alarm_state text[] , audio_indicator_is_disabled text[] , visual_indicator_is_disabled text[] , motion_indicator_is_disabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.associated_alarm /* LogicalDevices may have one
        OR more AlarmDevices associated
WITH them, IN order to indicate problem situations. This relationship is indicated by the AssociatedAlarm dependency. */ ( id SERIAL PRIMARY KEY , alarm_device_id5 INTEGER REFERENCES alarm_device(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
CREATE TABLE public.associated_resource_pool /* Associates a ResourcePool, such AS a StoragePool, to an object inherited
FROM System, for example an AdminDomain. This association identifies the ResourcePools that the System depends on. */ ( id SERIAL PRIMARY KEY , resource_pool_id5 INTEGER REFERENCES resource_pool(id) , system_id6 INTEGER REFERENCES system(id) ); 
CREATE TABLE public.battery /* Capabilities
        AND management of the Battery. This class applies to both batteries IN Laptop Systems
        AND other internal
        OR external batteries, such AS an uninterruptible power supply (UPS). */ ( id SERIAL PRIMARY KEY , battery_status text[] , time_on_battery text[] , estimated_run_time text[] , estimated_charge_remaining text[] , chemistry text[] , design_capacity text[] , full_charge_capacity text[] , design_voltage text[] , smart_battery_version text[] , time_to_full_charge text[] , expected_life text[] , max_recharge_time text[] , recharge_count text[] , max_recharge_count text[] , remaining_capacity text[] , remaining_capacity_max_error text[] , other_chemistry_description text[] , charging_status text[] , health_percent text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.block_statistics_service /* A subclass of StatisticsService that provides services for filtering
        AND retrieving statistics
FROM a StatisticsManifestCollection that contains instances of BlockStatisticalData. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.composite_extent /* A CompositeExtent is used to model the distribution of user data across one
        OR more underlying StorageExtents, which may
        OR NOT be protected by some redundancy mechanism. CompositeExtents represent a contiguous range of logical blocks. CompositeExtents may overlap, however, the underlying StorageExtents within the overlap shall NOT contain any check data. Distribution of check data may be specified
USING the CompositeExtentBasedOn association. */ ( id SERIAL PRIMARY KEY , is_composite text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.controller /* Controller is a superclass for grouping the miscellaneous control-related Devices that provide a classic bus master interface. Examples of Controllers are USBControllers, SerialControllers,
        AND so on. The Controller class is an abstraction for Devices
WITH a single protocol stack, which exist to control communications (data, control,
        AND reset) to downstream devices. Note that a new abstract class (ProtocolController) has been created to model more complex interface controllers such AS SCSI. */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.cooling_device /* Capabilities
        AND management of CoolingDevices. */ ( id SERIAL PRIMARY KEY , active_cooling text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.device_connection /* The DeviceConnection relationship indicates that two
        OR more Devices are connected together. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , negotiated_speed text[] , negotiated_data_width text[] ); 
        CREATE TABLE public.device_identity /* CIM_DeviceIdentity indicates that two LogicalDevices represent different aspects of the same underlying entity. This association refines the CIM_LogicalIdentity superclass by restricting it to the Device level
        AND defining its use IN well understood scenarios. One of these scenarios is to represent that a Device is both a 'bus' entity
        AND a 'functional' entity. For example, a Device could be both a PCI Device (or a USB Device), AS well AS a CIM_Keyboard. The other scenario is
WHERE a Device plays multiple functional roles that can NOT be distinguished by their hardware realization alone. For example, a Fibre Channel adapter might have aspects of both a NetworkAdapter
        AND a SCSIController. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.device_software /* The DeviceSoftware relationship identifies any software that is associated
WITH a Device such AS drivers, configuration,
        OR application software,
        OR firmware. */ ( id SERIAL PRIMARY KEY , software_element_id5 INTEGER REFERENCES software_element(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , purpose text[] , purpose_description text[] , loaded_on_device text[] , upgradeable_on_device text[] ); 
        CREATE TABLE public.display_controller /* Capabilities
        AND management of the DisplayController. */ ( id SERIAL PRIMARY KEY , description text[] , video_processor text[] , video_memory_type text[] , other_video_memory_type text[] , number_of_video_pages text[] , max_memory_supported text[] , other_video_architecture text[] , video_architecture text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.door /* A Door is the abstraction of hardware providing access to the internal componentry of a System.
    WHEN a Door is 'opened', typically ALL accessible, moving components are stopped
        OR suspended to prevent physical harm. */ ( id SERIAL PRIMARY KEY , open text[] , locked text[] , timeout text[] , last_opened text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.door_access_to_device /* Doors provide access to PhysicalElements for hot swap, repair
        AND similar activities. IN turn, PhysicalElements 'Realize' LogicalDevices. Since it may NOT be possible to define ALL the PhysicalElements that exist,
        AND optimizing the retrieval of Devices 'behind' the Door may be desirable, the DoorAccessTo Device association provides a shortcut mechanism for defining the LogicalDevices ('hardware') accessed through a Door. */ ( id SERIAL PRIMARY KEY , door_id5 INTEGER REFERENCES door(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.door_access_to_physical_element /* Doors provide access to PhysicalElements for hot swap, repair
        AND similar activities. The entities accessed through a Door are indicated IN this relationship. */ ( id SERIAL PRIMARY KEY , door_id5 INTEGER REFERENCES door(id) , physical_element_id6 INTEGER REFERENCES physical_element(id) ); 
        CREATE TABLE public.escon_controller /* Capabilities
        AND management of an ESCONController. */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.error_counters_for_device /* ErrorCountersForDevice relates the DeviceErrorCounts class to the LogicalDevice to which it applies. */ ( id SERIAL PRIMARY KEY , device_error_counts_id5 INTEGER REFERENCES device_error_counts(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.extent_component_view /* This aggregates StorageExtent instances to the StoragePoolView that has the extents AS pool components. */ ( id SERIAL PRIMARY KEY , storage_pool_view_id6 INTEGER REFERENCES storage_pool_view(id) , storage_extent_id7 INTEGER REFERENCES storage_extent(id) ); 
        CREATE TABLE public.extent_in_disk_group /* CIM_ExtentInDiskGroup defines the StorageExtents that are located within
        AND restricted by the Group. */ ( id SERIAL PRIMARY KEY , disk_group_id6 INTEGER REFERENCES disk_group(id) , storage_extent_id7 INTEGER REFERENCES storage_extent(id) ); 
        CREATE TABLE public.fan /* Capabilities
        AND management of a Fan CoolingDevice. */ ( id SERIAL PRIMARY KEY , variable_speed text[] , desired_speed text[] , control_mode text[] , desired_control_mode text[] , active_cooling text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.heat_pipe /* Capabilities
        AND management of a HeatPipe CoolingDevice. */ ( id SERIAL PRIMARY KEY , active_cooling text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.hosted_storage_pool_view /* This aggregates Pool view class instances to the CIM_System that scopes the underlying Pools of the View Classes. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , storage_pool_view_id7 INTEGER REFERENCES storage_pool_view(id) ); 
        CREATE TABLE public.ide_controller /* Capabilities
        AND management of an IDEController. */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.indicator_led /* CIM_IndicatorLED represents an LED of a managed element used to indicate one
        OR more conditions for the managed element. A single discrete package may be represented by one
        OR more instances of CIM_IndicatorLED. There may be an instance of CIM_IndicatorLED for each IndicatedCondition that may be indicated simultaneously by the discrete package. For example, if a single LED is capable of flashing yellow for one condition
        AND blue for a different one, but the conditions are NOT indicated simultaneously, it is modeled
USING a single instance of CIM_IndicatorLED that supports both colors. If the LED indicated both conditions simultaneously, i.e. the package was lit yellow
        AND blue simultaneously, there would be two instances of CIM_IndicatorLED. */ ( id SERIAL PRIMARY KEY , other_indicated_condition_description text[] , color text[] , other_color_description text[] , control_mode text[] , default_activation_state text[] , activation_state text[] , control_pattern text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.infrared_controller /* Capabilities
        AND management of an InfraredController. */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.initiator_target_logical_unit_path /* An association that models a host driver path to a logical unit. Each permutation of initiator
        AND target ProtocolEndpoints
        AND logical units is considered a separate path. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) , logical_device_id7 INTEGER REFERENCES logical_device(id) , state text[] ); 
        CREATE TABLE public.installed_partition_table /* This association describes the attributes of a partition table installed IN an extent. The attributes are IN the capabilities class. */ ( id SERIAL PRIMARY KEY , disk_partition_configuration_capabilities_id5 INTEGER REFERENCES disk_partition_configuration_capabilities(id) , storage_extent_id6 INTEGER REFERENCES storage_extent(id) ); 
        CREATE TABLE public.label_reader /* LabelReaders represent hardware capable of scanning
        OR reading a physical label
        OR the NonVolatileMemory
    ON a PhysicalMedia. Examples of labels include barcode
        AND OCR tags. */ ( id SERIAL PRIMARY KEY , technology text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_disk /* A LogicalDisk is a presentation of a contiguous range of logical blocks that is identifiable by applications such AS filesystems via the Name field. (DeviceID (key) may use the same name
        OR some other unique text such AS a UUID.) For example IN a Windows environment, the Name field may contain a drive letter. IN a Unix environment, it may contain the access path (for example, '/dev/...');
        AND IN a NetWare environment, may contain the volume name. LogicalDisks are typically built
    ON a DiskPartition
        OR other LogicalDisks (for instance, those exposed by a software volume manager). However, it can be based
    ON other StorageExtents, LIKE CIM_Memory, IN the
    CASE of a RAM disk. LogicalDisks SHOULD SET the 'Exported' value IN ExtentStatus[] if they are intended for application use. */ ( id SERIAL PRIMARY KEY , name_format text[] , name_namespace text[] , num_extents_migrating text[] , other_usage_description text[] , thinly_provisioned text[] , usage text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.logical_module /* LogicalModule is the logical device that corresponds to a component part (such AS a card
        OR blade) IN a device. For example, a line card IN a switch is an instance of LogicalModule, that is associated
WITH the the switch itself. A logical module is NOT necessarily independently managed. */ ( id SERIAL PRIMARY KEY , module_number text[] , logical_module_type text[] , other_logical_module_type_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.logical_port /* The abstraction of a port
        OR connection point of a Device. This object should be instantiated
    WHEN the Port has independent management characteristics
FROM the Device that includes it. Examples are a Fibre Channel Port
        AND a USB Port. */ ( id SERIAL PRIMARY KEY , speed text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , port_type text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.management_controller /* Capabilities
        AND management of a ManagementController. An I2C microcontroller is a type of ManagementController. */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.masking_mapping_exposed_device_view /* The CIM_MaskingMappingExposedDeviceView instance is a view that is derived
FROM CIM_SAPAvailableForElement, CIM_SCSIProtocolController
        AND CIM_ProtocolControllerForUnit. CIM_ElementView may associate CIM_MaskingMappingExposedDeviceView to its underlying elements (regardless of whether
        OR NOT they are instantiated). */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , spc_system_creation_class_name text[] , spc_system_name text[] , spc_creation_class_name text[] , spc_device_id text[] , pcfu_device_number text[] , pcfu_device_access text[] ); 
        CREATE TABLE public.masking_mapping_view /* The CIM_MaskingMappingView instance is a view that is derived
FROM CIM_StorageHardwareID, CIM_AuthorizedSubject, CIM_AuthorizedPrivilege, CIM_AuthorizedTarget, CIM_SCSIProtocolController, CIM_SAPAvailableForElement, CIM_SCSIProtocolEndpoint, CIM_ProtocolControllerForUnit
        AND CIM_LogicalDevice. */ ( id SERIAL PRIMARY KEY , storage_hardware_id_id5 INTEGER REFERENCES storage_hardware_id(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , protocol_endpoint_id7 INTEGER REFERENCES protocol_endpoint(id) , shid_storage_id text[] , shidid_type text[] , ld_device_id text[] , spep_system_creation_class_name text[] , spep_creation_class_name text[] , spep_system_name text[] , spep_name text[] , spep_protocol_iftype text[] , spep_other_type_description text[] , spep_connection_type text[] , spep_role text[] , ap_instance_id text[] , ap_privilege_granted text[] , ap_element_name text[] , spc_system_creation_class_name text[] , spc_creation_class_name text[] , spc_system_name text[] , spc_device_id text[] , pcfu_device_number text[] , pcfu_device_access text[] ); 
        CREATE TABLE public.media_access_device /* A MediaAccessDevice represents the ability to access one
        OR more media
        AND use this media to store
        AND retrieve data. */ ( id SERIAL PRIMARY KEY , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.media_partition /* A MediaPartition is a presentation of a contiguous range of logical blocks
        AND has identifying data written on/to it. It may include a signature written by the OS
        OR by an application. This class is a common superclass for Disk
        AND TapePartions. Partitions are directly realized by Physical Media (indicated by the RealizesExtent association)
        OR built
    ON StorageVolumes (indicated by the BasedOn association). */ ( id SERIAL PRIMARY KEY , bootable text[] , allocatable text[] , signature text[] , signature_algorithm text[] , signature_state text[] , extendable text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.media_present /*
WHERE a StorageExtent must be accessed through a MediaAccess Device, this relationship is described by the MediaPresent association. */ ( id SERIAL PRIMARY KEY , media_access_device_id6 INTEGER REFERENCES media_access_device(id) , storage_extent_id7 INTEGER REFERENCES storage_extent(id) , fixed_media text[] ); 
CREATE TABLE public.media_transfer_device /* A MediaTransferDevice represents hardware that moves Physical Media. It is a superclass for Devices LIKE PickerElement, ChangerDevice
        AND InterLibraryPort. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.memory /* Capabilities
        AND management of Memory-related LogicalDevices. */ ( id SERIAL PRIMARY KEY , volatile text[] , error_methodology text[] , starting_address text[] , ending_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , error_address text[] , system_level_address text[] , error_resolution text[] , data_organization text[] , purpose text[] , access text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.modem /* CIM_Modem is the superclass for grouping the numerous types of Modems. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.network_adapter /* Note: The use of the CIM_NetworkAdpater class has been deprecated IN lieu of CIM_NetworkPort. CIM_NetworkPort better reflects that the hardware of a single port is described
        AND managed. Deprecated description: NetworkAdapter is an Abstract class that defines general networking hardware concepts (for example, PermanentAddress
        OR Speed of operation). */ ( id SERIAL PRIMARY KEY , permanent_address text[] , speed text[] , max_speed text[] , full_duplex text[] , auto_sense text[] , octets_transmitted text[] , octets_received text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.network_adapter_redundancy_component /* Note: The use of the CIM_NetworkAdapterRedundancyComponent class has been deprecated because a specific association is NOT needed. Instead use the CIM_ OrderedMemberOf Collection class. Deprecated description: CIM_NetworkAdapterRedundancyComponent indicates the role that a NetworkAdapter plays IN an ExtraCapacityGroup, providing load balancing. */ ( id SERIAL PRIMARY KEY , extra_capacity_group_id7 INTEGER REFERENCES extra_capacity_group(id) , network_adapter_id8 INTEGER REFERENCES network_adapter(id) , scope_of_balancing text[] , primary_adapter text[] ); 
        CREATE TABLE public.network_port /* NetworkPort is the logical representation of network communications hardware such AS a physical connector
        AND the setup
        OR operation of the network chips, at the lowest layers of a network stack. */ ( id SERIAL PRIMARY KEY , speed text[] , other_network_port_type text[] , port_number text[] , link_technology text[] , other_link_technology text[] , permanent_address text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , port_type text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.network_virtual_adapter /* Note: The use of the CIM_NetworkVirtualAdapter class has been deprecated. A specific association is NOT needed. Instead use the CIM_ConcreteIdentity class. Deprecated description: NetworkVirtual Adapter describes that an instance of NetworkAdapter is actually the result of several Adapters participating IN a load-balanced RedundancyGroup. */ ( id SERIAL PRIMARY KEY , network_adapter_id6 INTEGER REFERENCES network_adapter(id) , extra_capacity_group_id7 INTEGER REFERENCES extra_capacity_group(id) ); 
        CREATE TABLE public.non_volatile_storage /* This class has been deprecated IN favor of CIM_Memory
WITH the volatile parameter SET to false. Capabilities
        AND management of NV Storage. Non-volatile memory natively includes flash
        AND ROM storage. IN addition, NV memory can be BasedOn VolatileStorage, if the volatile memory is backed by a Battery. This scenario would be completely described by an instance of the AssociatedBattery relationship, referencing the NonVolatileStorage AS the Dependent
        AND the Battery AS the Antecedent,
        AND an instance of the BasedOn relationship, referencing the NonVolatileStorage AS the Dependent
        AND the VolatileStorage AS the Antecedent. */ ( id SERIAL PRIMARY KEY , is_writeable text[] , application_writeable text[] , start_address_for_application_write text[] , application_writeable_size text[] , volatile text[] , error_methodology text[] , starting_address text[] , ending_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , error_address text[] , system_level_address text[] , error_resolution text[] , data_organization text[] , purpose text[] , access text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.operational_power_statistics_service /* A subclass of StatisticsService that provides services for filtering
        AND retrieving statistics
FROM a StatisticsManifestCollection that contains instances of OperationalPowerStatisticalData. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.pci_controller /* PCIController is a superclass for the PCIBridge
        AND PCIDevice classes. These classes model adapters
        AND bridges
    ON a PCI bus. The properties IN PCIController
        AND its subclasses are defined IN the various PCI Specifications that are published by the PCI SIG. */ ( id SERIAL PRIMARY KEY , command_register text[] , device_select_timing text[] , class_code text[] , cache_line_size text[] , latency_timer text[] , interrupt_pin text[] , expansion_rombase_address text[] , self_test_enabled text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.pci_device /* Capabilities
        AND management of a PCI device controller
    ON an adapter card. */ ( id SERIAL PRIMARY KEY , subsystem_id text[] , subsystem_vendor_id text[] , min_grant_time text[] , max_latency text[] , bus_number text[] , device_number text[] , function_number text[] , pci_device_id text[] , vendor_id text[] , revision_id text[] , command_register text[] , device_select_timing text[] , class_code text[] , cache_line_size text[] , latency_timer text[] , interrupt_pin text[] , expansion_rombase_address text[] , self_test_enabled text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.pci_port /* Represents PCI device ports used to describe the connection
    BETWEEN PCI devices. */ ( id SERIAL PRIMARY KEY , port_type text[] , speed text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.pc_ieswitch /* Capabilities
        AND management of a PCI device that provide PCI Express switch capability. */ ( id SERIAL PRIMARY KEY , number_of_ports text[] , subsystem_id text[] , subsystem_vendor_id text[] , min_grant_time text[] , max_latency text[] , bus_number text[] , device_number text[] , function_number text[] , pci_device_id text[] , vendor_id text[] , revision_id text[] , command_register text[] , device_select_timing text[] , class_code text[] , cache_line_size text[] , latency_timer text[] , interrupt_pin text[] , expansion_rombase_address text[] , self_test_enabled text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.pcmcia_controller /* Capabilities
        AND management of a PCMCIAController. */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.package_dependency /* A LogicalDevice is installed IN a Package such AS a Chassis
        OR a Rack, NOT for a specific Device, but to function
WITH the Package IN general. This relationship is described by the PackageDependency association. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , physical_package_id6 INTEGER REFERENCES physical_package(id) ); 
CREATE TABLE public.parallel_controller /* Capabilities
        AND management of the ParallelController. */ ( id SERIAL PRIMARY KEY , dma_support text[] , security text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.pass_through_module /* A device that is a replacement for physical cables
        AND allows internal network physical ports IN a chassis
        OR rack to be made accessible
FROM the external network. This may a fixed internal port to external port relationship,
        OR a configurable mapping of internal ports to output ports via a cross-point switching function. The mapping
    BETWEEN an internal
        AND external port is modeled
USING the InternalPorts
        AND ExternalPorts array properties. Corresponding array indices of the InternalPorts
        AND ExternalPorts properties shall contain the port number of the internal port
        AND external port, respectively IN a mapping pair. Usage of this class is appropriate
    WHEN modeling a simple n x n pass through module
WHERE the protocols supported by the module are NOT the target of management. Implementations wishing to enable management of the network function should instrument the appropriate device
        AND network models. The tie into the device
        AND network models is accomplished by correlating the port numbers IN this class' internal and external port arrays with CIM_NetworkPort's PortNumber property. The following is an example of how this class could be used: For a given instance, the value of NumberOfPorts is 3. This indicates that there are 3 internal ports
        AND 3 external ports. Internal port 2 is mapped to external port 3. Internal ports 1
        AND 3 are NOT mapped to an external port. External ports 1
        AND 2 are NOT mapped to internal ports. For this instance the length of the InternalPorts
        AND ExternalPorts arrays shall both be one. The first array position IN InternalPortshall contain the value 2. The first array position IN ExternalPorts shall contain the value 3. */ ( id SERIAL PRIMARY KEY , is_programmable text[] , number_of_ports text[] , module_number text[] , logical_module_type text[] , other_logical_module_type_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.persistent_memory_namespace /* This class describes a persistent memory storage extent. A persistent directly
        OR indirectly into the system address space. */ ( id SERIAL PRIMARY KEY , volatile text[] , error_methodology text[] , starting_address text[] , ending_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , error_address text[] , system_level_address text[] , error_resolution text[] , data_organization text[] , purpose text[] , access text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.persistent_memory_service /* Instances of the CIM_PersistentMemoryService exist to facilitate modification of a systems persistent memory configuration. Support EXISTS for both allocating
        AND deallocating persistent memory extents
FROM a primordial persistent memory pool. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.physical_extent /* Deprecated - use CIM_ProtectedExtentBasedOn
        OR CIM_CompositeExtentBasedOn instead. The information
    ON check
        AND user data is better expressed IN the association that layers the storage, than IN the extent itself. A PhysicalExtent is used to model an SCC RAID implementation. It defines the consecutive addressable block addresses
    ON a single storage device, that are treated AS a single StorageExtent
        AND that are IN the same StorageRedundancyGroup. An alternate possibility, if automatic configuration is used, is to instantiate
        OR extend the AggregatePExtent class. */ ( id SERIAL PRIMARY KEY , block_size text[] , number_of_blocks text[] , units_before_check_data_interleave text[] , units_of_check_data text[] , units_of_user_data text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.picker_element /* PickerElements represent hardware used to pick
        OR place PhysicalMedia from/into StorageMediaLocations. */ ( id SERIAL PRIMARY KEY , max_pick_time text[] , max_put_time text[] , cell_location text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.port_active_connection /* The PortActiveConnection relationship indicates that a NetworkPort is
USING the referenced PhysicalConnector to output to the network. This relationship is important
    WHEN the port can choose to output
FROM one of several connectors. The connectors can be associated
WITH the NetworkPort IN a Realizes relationship, but this is NOT required. This association provides additional information (for instance,'in use for communication') different than Realizes. */ ( id SERIAL PRIMARY KEY , physical_connector_id5 INTEGER REFERENCES physical_connector(id) , network_port_id6 INTEGER REFERENCES network_port(id) ); 
CREATE TABLE public.port_controller /* PortController is a logical device corresponding to a hardware network port controller. Port controllers provide various features depending
    ON their types
        AND versions. */ ( id SERIAL PRIMARY KEY , controller_type text[] , other_controller_type text[] , controller_version text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.port_on_device /* PortOnDevice associates a Port
        OR connection point
WITH its Device. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , logical_port_id6 INTEGER REFERENCES logical_port(id) ); 
CREATE TABLE public.power_source /* This class is a representation of logical properties of a generic power source. Any logical device that has an aspect of producing power
        AND thus effectively being a power source may be represented by this class
        OR the subclass of this class. */ ( id SERIAL PRIMARY KEY , rated_max_output_power text[] , output_power_units text[] , is_acoutput text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.power_supply /* Capabilities
        AND management of the PowerSupply.The PowerSupply may have two input voltage ranges. The attributes of each input voltage (high
        AND low voltage bounds, high
        AND low frequency bounds, maximum input power,
        AND maximum output power) are modeled separately. Additional attributes of the power supply including the active input voltage range
        AND type of range switching may also be modeled. */ ( id SERIAL PRIMARY KEY , is_switching_supply text[] , range1_input_voltage_low text[] , range1_input_voltage_high text[] , range1_input_frequency_low text[] , range1_input_frequency_high text[] , range2_input_voltage_low text[] , range2_input_voltage_high text[] , range2_input_frequency_low text[] , range2_input_frequency_high text[] , active_input_voltage text[] , type_of_range_switching text[] , total_output_power text[] , input_power_units text[] , is_acinput text[] , number_of_phases_utilized text[] , output_power_units text[] , range1_max_input_power text[] , range1_max_output_power text[] , range2_max_input_power text[] , range2_max_output_power text[] , rated_max_output_power text[] , is_acoutput text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.print_queue /* Capabilities
        AND management of a Printer Queue. A PrintQueue holds PrintJobs that are placed
    ON the Queue by a Print Service. Jobs can move
FROM Queue to Queue. The ABNF for CIM references to PWG Standards
        AND MIBs is IN the directory 'ftp://ftp.pwg.org/pub/pwg/general/process' IN the file 'pwg-cim-references-format-20060309.txt'. An example for a MappingStrings reference to a PWG Standard is 'PWG5101-1.PWG|Section 4 Media Color Names'. An example for a MappingStrings reference to a PWG MIB is 'MIB.PWG|PWG-IMAGING-COUNTER-MIB.icMonitorCompletedJobs'. */ ( id SERIAL PRIMARY KEY , queue_enabled text[] , queue_accepting text[] , number_on_queue text[] , queue_status text[] , queue_status_info text[] , max_job_size text[] , default_job_priority text[] , job_priority_high text[] , job_priority_low text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.printer /* Capabilities
        AND management of the Printer LogicalDevice. The ABNF for CIM references to PWG Standards
        AND MIBs is IN the directory 'ftp://ftp.pwg.org/pub/pwg/general/process' IN the file 'pwg-cim-references-format-20060309.txt'. Examples include: (a) a MappingStrings reference to a PWG Standard is 'PWG5101-1.PWG|Section 4 Media Color Names'; (b) a MappingStrings reference to a PWG MIB is 'MIB.PWG|PWG-IMAGING-COUNTER-MIB.icMonitorCompletedJobs'. Note: A Printer shall be associated
WITH at least one of every required component (e.g., PrintMarker) via an instance of the PrinterComponent class. A Printer may be associated
WITH zero
        OR more optional components (e.g., PrintSupply) via an instance of the ConcreteComponent class. See: Model IN section 2 of Printer MIB (RFC 3805). */ ( id SERIAL PRIMARY KEY , element_name text[] , printer_status text[] , detected_error_state text[] , default_paper_type text[] , current_paper_type text[] , current_language text[] , current_mime_type text[] , default_language text[] , default_mime_type text[] , job_count_since_last_reset text[] , time_of_last_reset text[] , max_copies text[] , default_copies text[] , max_number_up text[] , default_number_up text[] , horizontal_resolution text[] , vertical_resolution text[] , current_char_set text[] , current_natural_language text[] , max_size_supported text[] , marking_technology text[] , console_natural_language text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.printer_servicing_job /* This association indicates that a Printer is currently servicing a particular PrintJob. */ ( id SERIAL PRIMARY KEY , printer_id5 INTEGER REFERENCES printer(id) , print_job_id6 INTEGER REFERENCES print_job(id) ); 
        CREATE TABLE public.printer_servicing_queue /* This association indicates that PrintJobs can be passed to a Printer
FROM a particular Queue. */ ( id SERIAL PRIMARY KEY , printer_id5 INTEGER REFERENCES printer(id) , print_queue_id6 INTEGER REFERENCES print_queue(id) ); 
CREATE TABLE public.processor /* Capabilities
        AND management of the Processor LogicalDevice. */ ( id SERIAL PRIMARY KEY , role text[] , family text[] , other_family_description text[] , upgrade_method text[] , max_clock_speed text[] , current_clock_speed text[] , data_width text[] , address_width text[] , load_percentage text[] , stepping text[] , unique_id text[] , cpu_status text[] , external_bus_clock_speed text[] , number_of_enabled_cores text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.protected_space_extent /* Deprecated - use CIM_ProtectedExtentBasedOn
        OR CIM_CompositeExtentBasedOn instead. The information
    ON check
        AND user data is better expressed IN the association that layers the storage, than IN the extent itself. A ProtectedSpaceExtent is used to model an SCC RAID implementation. ProtectedSpaceExtent defines addressable logical block addresses, treated AS a single Extent, located
    ON one
        OR more PhysicalExtents. ProtectedSpaceExtents exclude any logical blocks mapped AS check data
        AND contain user data stripe depth mapping information. An alternate possibility, if automatic configuration is used, is to instantiate
        OR extend the AggregatePSExtent class. */ ( id SERIAL PRIMARY KEY , block_size text[] , number_of_blocks text[] , user_data_stripe_depth text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.protocol_controller /* ProtocolController is a superclass for grouping controllers that are used to control the operation
        AND function of sophisticated devices that instantiate a protocol such AS SCSI. Simpler 'bus'
        AND device controllers are modeled
USING the CIM_Controller class. */ ( id SERIAL PRIMARY KEY , max_units_controlled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.protocol_controller_for_device /* This association indicates a subclass of LogicalDevice (for example a Storage Volume) is connected through a specific ProtocolController. IN many situations (for example storage LUN masking), there may be many of these associations used to relate to different objects. Therefore subclasses have been defined to optimize enumeration of the associations. */ ( id SERIAL PRIMARY KEY , protocol_controller_id6 INTEGER REFERENCES protocol_controller(id) , logical_device_id7 INTEGER REFERENCES logical_device(id) , device_number text[] , access_priority text[] , access_state text[] ); 
CREATE TABLE public.protocol_controller_for_port /* This association is used to define a relationship
    BETWEEN a ProtocolController
        AND a LogicalPort. This subclass is provided so that an enumeration of related controllers
        AND ports can be performed without retrieving any other controllers
        OR connected units. */ ( id SERIAL PRIMARY KEY , protocol_controller_id5 INTEGER REFERENCES protocol_controller(id) , logical_port_id6 INTEGER REFERENCES logical_port(id) , device_number text[] , access_priority text[] , access_state text[] ); 
        CREATE TABLE public.protocol_controller_for_unit /* This association is used to define a relationship
    BETWEEN a ProtocolController
        AND an exposed Logical Unit (for example a Storage Volume
        OR a MediaAccessDevice such AS a tape drive). An example of the use of this association is SCSI,
WHERE it link the target controller
        AND Logical Units. This subclass is provided so that an enumeration of related controllers
        AND units can be performed without retrieving any connected ports
        OR other controllers. */ ( id SERIAL PRIMARY KEY , protocol_controller_id5 INTEGER REFERENCES protocol_controller(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , device_access text[] , device_number text[] , access_priority text[] , access_state text[] ); 
        CREATE TABLE public.protocol_controller_for_unit_view /* The CIM_ProtocolControllerForUnitView instance is a view that is derived
FROM the CIM_ProtocolControllerForUnit association
    BETWEEN the a MappingProtocolControllerView
        AND a LogicalDevice Note that if the LogicalDevice is associated to multipleProtocolControllers the DeviceNumber (LU Number) may differ for each MappingProtocolControllerView instance. */ ( id SERIAL PRIMARY KEY , view_id5 INTEGER REFERENCES view(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , pcfu_device_access text[] , device_number text[] , access_priority text[] , access_state text[] ); 
        CREATE TABLE public.queue_for_print_service /* This association indicates that a PrintService utilizes a particular PrintQueue. */ ( id SERIAL PRIMARY KEY , print_queue_id5 INTEGER REFERENCES print_queue(id) , print_service_id6 INTEGER REFERENCES print_service(id) , queue_accepting_from_service text[] ); 
        CREATE TABLE public.queue_forwards_to_print_sap /* This association indicates that the Jobs
FROM a PrintQueue can be sent to the referenced PrintSAP, to be handled by the backing PrintService of the SAP. */ ( id SERIAL PRIMARY KEY , print_sap_id5 INTEGER REFERENCES print_sap(id) , print_queue_id6 INTEGER REFERENCES print_queue(id) ); 
CREATE TABLE public.realizes_extent /* StorageExtents can be realized by PhysicalComponents. For example, disks
        OR tapes are realized by PhysicalMedia. Memory is realized by PhysicalMemory. This relationship of Extents to PhysicalComponents is made explicit by the RealizesExtent association. IN addition, the StartingAddress of the StorageExtent
    ON the Component is specified here. */ ( id SERIAL PRIMARY KEY , physical_component_id5 INTEGER REFERENCES physical_component(id) , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , starting_address text[] ); 
    CREATE TABLE public.realizes_pextent /* PhysicalExtents are realized
    ON a PhysicalMedia. This is described by RealizesPExtent. However, there is no need for the specificity of this association. It is deprecated IN lieu of the generic RealizesExtent relationship. */ ( id SERIAL PRIMARY KEY , physical_media_id6 INTEGER REFERENCES physical_media(id) , physical_extent_id7 INTEGER REFERENCES physical_extent(id) , starting_address text[] ); 
    CREATE TABLE public.refrigeration /* Capabilities
        AND management of a Refrigeration CoolingDevice. */ ( id SERIAL PRIMARY KEY , active_cooling text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.sasphy /* The SASPHY class describes the characteristics for the physical connection
    BETWEEN SAS devices. */ ( id SERIAL PRIMARY KEY , hardware_minimum_physical_link_rate text[] , hardware_maximum_physical_link_rate text[] , programmed_minimum_physical_link_rate text[] , programmed_maximum_physical_link_rate text[] , negotiated_physical_link_rate text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.sas_port /* Represents the port of a Serial Attached SCSI device to system connection. */ ( id SERIAL PRIMARY KEY , port_type text[] , speed text[] , other_network_port_type text[] , port_number text[] , link_technology text[] , other_link_technology text[] , permanent_address text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.sb_protocol_endpoint /* CIM_SBProtocolEndpoint extends CIM_ProtocolEndpoint
WITH properties for FC Single-Byte connectivity. */ ( id SERIAL PRIMARY KEY , connection_type text[] , role text[] , target_relative_port_number text[] , other_connection_type text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.scsi_arbitrary_logical_unit /* SCSIArbitraryLogicalUnit represents an element that is addressed AS a device, but is NOT accurately modeled by some other LogicalDevice subclass (such AS TapeDrive
        OR StorageVolume). One common use is 'control devices' that provide management rather than I/O functionality. For example, SCSI defines this behavior for Enclosure Services
        AND SCSI Controller devices. */ ( id SERIAL PRIMARY KEY , device_type text[] , other_device_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scsi_controller /* Note: The use of this class is deprecated IN lieu of SCSIProtocolController. The latter reflects the protocol- related issues of SCSI interfaces, because these are NOT bus master-type Controllers." Deprecated description: Capabilities
        AND management of the SCSIController. */ ( id SERIAL PRIMARY KEY , protection_management text[] , max_data_width text[] , max_transfer_rate text[] , controller_timeouts text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scsi_initiator_target_logical_unit_path /* An association that models a host driver path to a SCSI logical unit. Each permutation of initiator
        AND target ProtocolEndpoints
        AND logical units is considered a separate path. This class describes end-to-end path behavior such AS properties
        AND operations commonly used IN multipath management. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) , logical_device_id7 INTEGER REFERENCES logical_device(id) , os_device_name text[] , administrative_weight text[] , administrative_override text[] , logical_unit_number text[] , state text[] ); 
        CREATE TABLE public.scsi_path_configuration_service /* A class derived
FROM CIM_Service providing methods related to management of multiple paths to SCSI devices. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.scsi_protocol_controller /* SCSIProtocolController is a type of ProtocolController, managing a SCSI interface. */ ( id SERIAL PRIMARY KEY , name_format text[] , other_name_format text[] , max_units_controlled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ssa_controller /* Capabilities
        AND management of an SSAController (Serial Storage Architecture). */ ( id SERIAL PRIMARY KEY , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scanner /* Capabilities
        AND management of the Scanner LogicalDevice. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.sensor /* A Sensor is an entity capable of measuring
        OR reporting the characteristics of some physical property - for example, the temperature
        OR voltage characteristics of a Computer System. */ ( id SERIAL PRIMARY KEY , sensor_type text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.serial_controller /* Capabilities
        AND management of the SerialController. */ ( id SERIAL PRIMARY KEY , max_baud_rate text[] , security text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.shared_device_management_service /* A class derived
FROM Service that describes the ability to control access to shared devices. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.sharing_dependency /* IN some configurations, a logical device may be shared among multiple systems while only belonging to one.
    WHEN modeling this sharing relationship, one instance of LogicalDevice EXISTS to model the resource. This instance is associated
WITH the owning system via the SystemDevice association. An additional instance of LogicalDevice will exist for each system the device is shared
WITH to represent the device IN the context of each System it is shared with. Each of these instances is associated
WITH a single instance of System via an instance of the SystemDevice association. This is very similar to the way that virtual devices are modeled. However, there are additional semantics associated
WITH shared devices that need to be modeled, including the current access of a sharing system to the shared device. The SharingDependency association will be used to add support for modeling this additional semantic. It is used to associate a LogicalDevice instance IN the sharing system to the LogicalDevice representing the underlying shared resource. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , current_access text[] , other_current_access text[] ); 
CREATE TABLE public.snapshot /* Deprecated. Snapshots are now modeled IN a more abstrct way
USING StorageExtent
        AND StorageSynchronized. The Snapshot class is an optional construct. It can be used to represent an Extent that contains a full copy of another Extent,
        OR the changes to that Extent
    WHEN performing a delta-based (delta before
        OR delta after) copy. Snapshot's definition in CIM is not equivalent to the act of creating a volume or file-based snapshot, or a point in time copy. It is at a much lower level and represents the use of storage to hold a copied image of an Extent, or to hold changes to an Extent. Use of the Snapshot object when making a full copy is only recommended if the purpose is to describe the existence of a copy. (This use will be very infrequent.) The problem with describing an Extent solely as a 'snapshot' is that when the snapshot/copy is broken, the object must be destroyed. Typically, this object still holds valid data, and would have to be reinstantiated. If the 'full copy' object is to be treated as a StorageVolume or more general Extent, then it should be modeled as such from the beginning - i.e., not as an instance of Snapshot but as an instance of a generic StorageExtent or StorageVolume. In this case, the Synchronized association would be used to describe that one StorageExtent is synchronized with another. When describing a delta-based snapshot/point in time copy, the Snapshot object represents the store holding the before/after image changes to the original Extent. For example, when doing a 'delta before' Snapshot, the resultant target would be modeled as a StorageExtent that is BasedOn the original Extent and the instance of Snapshot (that holds the changes to the original Extent). */ ( id SERIAL PRIMARY KEY , is_synced text[] , sync_time text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.snapshot_of_extent /* Deprecated. Snapshots are now modeled in a more abstract way using StorageExtent and CIM_StorageSynchronized. SnapshotOfExtent is an association between an Extent and its Snapshot. This relationship is made explicit in this association. */ ( id SERIAL PRIMARY KEY , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , snapshot_id7 INTEGER REFERENCES snapshot(id) , snapshot_type text[] ); 
        CREATE TABLE public.storage_defect /* The StorageDefect aggregation collects the StorageErrors for a StorageExtent. */ ( id SERIAL PRIMARY KEY , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , storage_error_id7 INTEGER REFERENCES storage_error(id) ); 
        CREATE TABLE public.storage_erasure_service /* This service contains the Erase method used to erase storage elements (StorageVolumes or LogicalDisks) */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_library /* A StorageLibrary is a collection of ManagedSystemElements that operate together to provide cartridge library capabilities. This object serves as an aggregation point to group the following elements: MediaTransferDevices, a Label Reader, a library Door, MediaAccessDevices, and other Library components. The use of this class is deprecated in favor of CIM_ComputerSystem. Originally it was felt that a media library could be purely mechanical and thus not a ComputerSystem. However all manageable libraries are ComputerSystems. This change simplifies the use of the model by client software. */ ( id SERIAL PRIMARY KEY , overfilled text[] , audit_needed text[] , audit_in_progress text[] , max_audit_time text[] , automated text[] , robotics_enabled text[] , creation_class_name text[] , name text[] , name_format text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_pool /* A StoragePool is a conglomeration of storage capacity for the purpose of assignment and allocation based on service characteristics, such as location, available space or other criteria (for example, cost per megabyte or hardware ownership). A StoragePool is managed within the scope of a particular System. StoragePools may consist of component StoragePools or StorageExtents. StorageExtents that belong to the StoragePool have a Component relationship to the StoragePool. StorageExtents/StoragePools that are elements of a pool have their available space aggregated into the pool. StoragePools, StorageVolumes and LogicalDisks may be created from StoragePools. This is indicated by the AllocatedFromStoragePool association. StoragePool is scoped to a system by the HostedStoragePool association. */ ( id SERIAL PRIMARY KEY , instance_id text[] , pool_id text[] , primordial text[] , total_managed_space text[] , remaining_managed_space text[] , capacity_in_migrating_source text[] , capacity_in_migrating_target text[] , elements_share_space text[] , low_space_warning_threshold text[] , other_usage_description text[] , reserved_space text[] , space_limit text[] , space_limit_determination text[] , thin_provision_meta_data_space text[] , usage text[] , capacity text[] , reserved text[] , resource_type text[] , other_resource_type text[] , resource_sub_type text[] , allocation_units text[] , consumed_resource_units text[] , currently_consumed_resource text[] , max_consumable_resource text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_pool_diagnostic_test /* This class subclasses CIM_DiagnosticTest to define the tests specific to storage pools. */ ( id SERIAL PRIMARY KEY , storage_pool_test_type text[] , other_storage_pool_test_type text[] , other_characteristic_description text[] , is_in_use text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_protection_service /* This service defines the Protect method used to apply and modify the protection setting for a specified StorageVolume or LogicalDisk. The settings applied are used to protect a storage element from accidental or intentional overwriting. Accordingly, the settings set the read/write ability of the element, SCSI inquiry visibility, whether it can be copied over, and whether it can be exposed from the storage system. This service also allows the specification of a retention time, or length of time that these settings cannot be modified. The settings remain in effect after this time period expires until changed. The values of this setting are stored in the StorageProtectionSetting class associated to the StorageVolume pr LogicalDisk via ElementProtectionSettingData. The StorageProtectionSetting cannot be modified directly, but can only be modified via this service. While the element is being protected, the StorageProtectionSetting cannot be removed. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.storage_volume /* A StorageVolume is a StorageExtent that is published for use outside of the scoping System. For SCSI storage target devices, StorageVolumes are used to represent target Block devices, (peripheral device type codes 0h (i.e, direct-access), 4h (i.e., write-once), 5h (i.e., CD/DVD), 7h (i.e., optical memory), and Eh (i.e., simplified direct-access).); Stream devices, (peripheral device type codes 1h (i.e., sequential-access) and 3h (i.e., processor).). In these case, StorageVolume.Name will be derived from SCSI volume as documented in StorageExtent.Nameformat and NameNamespace Descriptions. The 'Exported' value from StorageExtent.ExtentStatus[] MUST be in all instances of StorageVolume to maintain the semantic of 'published' described above. */ ( id SERIAL PRIMARY KEY , name text[] , name_format text[] , name_namespace text[] , cu_image text[] , can_delete text[] , emulated_device text[] , extent_type text[] , num_extents_migrating text[] , other_usage_description text[] , relative_performance_order text[] , storage_tiering_selection text[] , subsystem_id text[] , thinly_provisioned text[] , usage text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.supplies_power /* The SuppliesPower relationship indicates that a ManagedSystemElementis in the power domain of the referenced PowerSource. It indicates which ManagedSystemElements are dependent on the PowerSource, and therefore, which ManagedSystemElements are affected if the PowerSource is lost. */ ( id SERIAL PRIMARY KEY , power_supply_id5 INTEGER REFERENCES power_supply(id) , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) ); 
        CREATE TABLE public.tape_drive /* Capabilities and managment of a TapeDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , eot_warning_zone_size text[] , max_partition_count text[] , padding text[] , max_rewind_time text[] , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.tape_partition /* Capabilities and management of a TapePartition StorageExtent. Note that if a PhysicalTape is not partitioned, only a generic StorageExtent that represents the entire Tape should be instantiated. TapePartitions may be BasedOn other StorageExtents or directly Realized on a PhysicalTape. */ ( id SERIAL PRIMARY KEY , name_format text[] , name_namespace text[] , unused_blocks text[] , bootable text[] , allocatable text[] , signature text[] , signature_algorithm text[] , signature_state text[] , extendable text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.token_ring_adapter /* Note: The use of the CIM_TokenRingAdapter class has been deprecated, consistent with NetworkAdapter. Instead use the CIM_TokenRingPort class. Deprecated description: This class describes the capabilities and management aspects of a TokenRingAdapter. */ ( id SERIAL PRIMARY KEY , max_data_size text[] , ring_status text[] , ring_state text[] , ring_open_status text[] , ring_speed text[] , burst_errors text[] , ac_errors text[] , abort_trans_errors text[] , internal_errors text[] , lost_frame_errors text[] , receive_congestions text[] , frame_copied_errors text[] , token_errors text[] , soft_errors text[] , hard_errors text[] , signal_loss_count text[] , transmitted_beacons text[] , recoverys text[] , lobe_wires text[] , removes text[] , singles text[] , frequency_errors text[] , permanent_address text[] , speed text[] , max_speed text[] , full_duplex text[] , auto_sense text[] , octets_transmitted text[] , octets_received text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.token_ring_port /* Capabilities and management of a TokenRingPort. */ ( id SERIAL PRIMARY KEY , max_data_size text[] , ring_status text[] , ring_state text[] , ring_open_status text[] , ring_speed text[] , speed text[] , other_network_port_type text[] , port_number text[] , link_technology text[] , other_link_technology text[] , permanent_address text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , port_type text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_controller /* Capabilities and management of a USB Host Controller. */ ( id SERIAL PRIMARY KEY , usb_version text[] , interface_type text[] , controller_version text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_device /* The management characterisitics of a USB Device. */ ( id SERIAL PRIMARY KEY , usb_version text[] , class_code text[] , subclass_code text[] , protocol_code text[] , usb_version_in_bcd text[] , max_packet_size text[] , vendor_id text[] , product_id text[] , device_release_number text[] , manufacturer text[] , product text[] , serial_number text[] , number_of_configs text[] , current_config_value text[] , command_timeout text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_hub /* USB Hub Device. */ ( id SERIAL PRIMARY KEY , gang_switched text[] , number_of_ports text[] , usb_version text[] , class_code text[] , subclass_code text[] , protocol_code text[] , usb_version_in_bcd text[] , max_packet_size text[] , vendor_id text[] , product_id text[] , device_release_number text[] , manufacturer text[] , product text[] , serial_number text[] , number_of_configs text[] , current_config_value text[] , command_timeout text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_port /* A Port on a USBHub. */ ( id SERIAL PRIMARY KEY , speed text[] , status_info text[] , availability text[] , power text[] , suspended text[] , overcurrent text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , port_type text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_port_on_hub /* USBPortOnHub associates a USBPort or connection point with the USBHub that includes it. */ ( id SERIAL PRIMARY KEY , usb_hub_id5 INTEGER REFERENCES usb_hub(id) , usb_port_id6 INTEGER REFERENCES usb_port(id) ); 
        CREATE TABLE public.uninterruptible_power_supply /* Capabilities and management of an UninterruptiblePowerSupply. The properties of the UPS Device indicate when incoming power is trimmed or boosted, and the aggregated information of the batteries, generators, and so on that comprise the Device. These individual components (for example, multiple batteries) can also be independently modeled and associated with the UPS. */ ( id SERIAL PRIMARY KEY , range1_input_voltage_low text[] , range1_input_voltage_high text[] , range2_input_voltage_low text[] , range2_input_voltage_high text[] , remaining_capacity_status text[] , time_on_backup text[] , estimated_run_time text[] , estimated_charge_remaining text[] , is_switching_supply text[] , range1_input_frequency_low text[] , range1_input_frequency_high text[] , range2_input_frequency_low text[] , range2_input_frequency_high text[] , active_input_voltage text[] , type_of_range_switching text[] , total_output_power text[] , input_power_units text[] , is_acinput text[] , number_of_phases_utilized text[] , output_power_units text[] , range1_max_input_power text[] , range1_max_output_power text[] , range2_max_input_power text[] , range2_max_output_power text[] , rated_max_output_power text[] , is_acoutput text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.user_device /* UserDevices are LogicalDevices that allow a ComputerSystem's users to input, view
        OR hear data. It is a superclass
FROM which other classes, such AS Keyboard
        OR DesktopMonitor, descend. */ ( id SERIAL PRIMARY KEY , is_locked text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.video_controller /* Note: The use of the CIM_VideoController class has been deprecated IN lieu of CIM_DisplayController. Deprecated description: Capabilities
        AND management of the VideoController. */ ( id SERIAL PRIMARY KEY , description text[] , video_processor text[] , video_memory_type text[] , number_of_video_pages text[] , max_memory_supported text[] , current_bits_per_pixel text[] , current_horizontal_resolution text[] , current_vertical_resolution text[] , max_refresh_rate text[] , min_refresh_rate text[] , current_refresh_rate text[] , current_scan_mode text[] , current_number_of_rows text[] , current_number_of_columns text[] , current_number_of_colors text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.video_head /* VideoHead represents one head of the CIM_DisplayController. */ ( id SERIAL PRIMARY KEY , current_bits_per_pixel text[] , current_horizontal_resolution text[] , current_vertical_resolution text[] , max_refresh_rate text[] , min_refresh_rate text[] , current_refresh_rate text[] , current_scan_mode text[] , other_current_scan_mode text[] , current_number_of_rows text[] , current_number_of_columns text[] , current_number_of_colors text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.video_setting /* Note: The use of the CIM_VideoSetting class has been deprecated IN lieu of CIM_ElementSetting. Deprecated description: VideoSetting associates the VideoControllerResolution Setting
WITH the Controllers to which it applies. */ ( id SERIAL PRIMARY KEY , video_controller_id6 INTEGER REFERENCES video_controller(id) , video_controller_resolution_id7 INTEGER REFERENCES video_controller_resolution(id) ); 
CREATE TABLE public.volatile_storage /* Capabilities
        AND management of Volatile Storage. */ ( id SERIAL PRIMARY KEY ,
         cacheable text[] ,
         cache_type text[] ,
         volatile text[] ,
         error_methodology text[] ,
         starting_address text[] ,
         ending_address text[] ,
         error_info text[] ,
         other_error_description text[] ,
         correctable_error text[] ,
         error_time text[] ,
         error_access text[] ,
         error_transfer_size text[] ,
         error_data_order text[] ,
         error_address text[] ,
         system_level_address text[] ,
         error_resolution text[] ,
         data_organization text[] ,
         purpose text[] ,
         access text[] ,
         block_size text[] ,
         number_of_blocks text[] ,
         consumable_blocks text[] ,
         is_based_on_underlying_redundancy text[] ,
         sequential_access text[] ,
         no_single_point_of_failure text[] ,
         data_redundancy text[] ,
         package_redundancy text[] ,
         delta_reservation text[] ,
         primordial text[] ,
         name text[] ,
         name_format text[] ,
         name_namespace text[] ,
         other_name_namespace text[] ,
         other_name_format text[] ,
         compression_rate text[] ,
         compression_state text[] ,
         extent_interleave_depth text[] ,
         extent_stripe_length text[] ,
         is_composite text[] ,
         is_compressed text[] ,
         is_concatenated text[] ,
         other_usage_description text[] ,
         usage text[] ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         device_id text[] ,
         power_management_supported text[] ,
         availability text[] ,
         status_info text[] ,
         last_error_code text[] ,
         error_description text[] ,
         error_cleared text[] ,
         power_on_hours text[] ,
         total_power_on_hours text[] ,
         max_quiesce_time text[] ,
         allocation_state text[] ,
         location_indicator text[] ,
         enabled_state text[] ,
         other_enabled_state text[] ,
         requested_state text[] ,
         enabled_default text[] ,
         time_of_last_state_change text[] ,
         transitioning_to_state text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.volume_set /* VolumeSet is deprecated IN lieu of CompositeExtent,
         which removes the restriction that the SET must be exported. A VolumeSet can be used to model an SCC RAID implementation. VolumeSets represent a contiguous range of logical blocks presented to the operating environment. VolumeSets may overlap. However,
         the underlying PhysicalExtents within the overlap shall NOT contain any check data. They are BasedOn one
        OR more ProtectedSpaceExtents. These BasedOn associations should be instantiated
        OR subclassed AS needed. */ ( id SERIAL PRIMARY KEY , number_of_blocks text[] , ps_extent_stripe_length text[] , ps_extent_interleave_depth text[] , volume_status text[] , name text[] , name_format text[] , name_namespace text[] , cu_image text[] , can_delete text[] , emulated_device text[] , extent_type text[] , num_extents_migrating text[] , other_usage_description text[] , relative_performance_order text[] , storage_tiering_selection text[] , subsystem_id text[] , thinly_provisioned text[] , usage text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.wbem_server_device_registration_service /* This service contains the methods used to add
        AND remove devices managed by a WBEM server. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.worm_drive /* Capabilities
        AND managment of a WORMDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.watchdog /* CIM_Watchdog is a timer that is implemented IN the system hardware. It allows the hardware to monitor the state of the Operating System, BIOS,
        OR a software component that is installed
    ON the System. If the monitored component fails to re-arm the timer before its expiration, the hardware assumes that the System is IN a critical state,
        AND could reset the ComputerSystem. This feature can also be used AS an application watchdog timer for a mission-critical application. IN this case, the application would assume responsibility for re-arming the timer before expiration. */ ( id SERIAL PRIMARY KEY , monitored_entity text[] , monitored_entity_description text[] , timeout_interval text[] , timer_resolution text[] , time_of_last_expiration text[] , monitored_entity_on_last_expiration text[] , action_on_expiration text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.wi_fi_port /* WiFiPort is the logical representation of wireless local area network communications hardware that conforms to the IEEE 802.11 series of specifications. It embodies properties at the lowest layers of a network stack, such AS the antennas used for transmission
        AND reception, the address permanently embedded into the hardware,
        AND the operational bandwidth of the device. */ ( id SERIAL PRIMARY KEY , speed text[] , max_speed text[] , port_type text[] , permanent_address text[] , other_network_port_type text[] , port_number text[] , link_technology text[] , other_link_technology text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.wi_fi_radio /* CIM_WiFiRadio describes a radio transceiver component of a WiFiPort. It is modeled because of the possibility of multiple transceivers being associated
WITH a single port, the possibility of multiple ports being associated
WITH a single radio transceiver,
        AND the possibility of enabling/disabling a radio transceiver independent of its associated WiFiPort. */ ( id SERIAL PRIMARY KEY , signal_strength text[] , signal_noise text[] , channel text[] , frequency text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_psec_policy_for_system /* IPsecPolicyForSystem associates a PolicyGroup
WITH a specific system (e.g., a host
        OR a network device) - indicating that this is the 'default' IPsec policy for that system. The referenced PolicyGroup would be used for any IPProtocolEndpoint's IPsec negotiations, UNLESS the IPsecPolicyForEndpoint association is defined. IPsecPolicyForEndpoint indicates a more specific PolicyGroup for IPsec negotiations for the endpoint. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , policy_group_id7 INTEGER REFERENCES policy_group(id) ); 
        CREATE TABLE public.peer_gateway_for_preconfigured_tunnel /* PeerGatewayForPreconfiguredTunnel identifies at most one security gateway be used in constructing a preconfigured tunnel. A security gateway is simply a particular instance of RemoteServiceAccessPoint. */ ( id SERIAL PRIMARY KEY , remote_service_access_point_id6 INTEGER REFERENCES remote_service_access_point(id) , preconfigured_tunnel_action_id7 INTEGER REFERENCES preconfigured_tunnel_action(id) ); 
        CREATE TABLE public.peer_gateway_for_tunnel /* PeerGatewayForTunnel identifies an ordered list of security gateways to be used in negotiating and constructing a tunnel. A security gateway is simply a particular instance of RemoteServiceAccessPoint. */ ( id SERIAL PRIMARY KEY , remote_service_access_point_id6 INTEGER REFERENCES remote_service_access_point(id) , i_psec_tunnel_action_id7 INTEGER REFERENCES i_psec_tunnel_action(id) , sequence_number text[] ); 
        CREATE TABLE public.cimxml_communication_mechanism /* This class specializes ObjectManagerCommunicationMechanism, adding properties specific to the CIM-XML protocol (XML encoding and CIM Operations). */ ( id SERIAL PRIMARY KEY , communication_mechanism text[] , version text[] , cimxml_protocol_version text[] , cim_validated text[] , pulled_enumeration_closure_on_exceeding_server_limits_supported text[] , pulled_enumeration_continuation_on_error_supported text[] , pulled_enumeration_maximum_operation_timeout text[] , pulled_enumeration_minimum_operation_timeout text[] , pulled_enumeration_no_operation_timeout_supported text[] , other_communication_mechanism_description text[] , multiple_operations_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.identification_of_managed_system /* IdentificationOfManagedSystem is an association that links the SystemIdentification object to the CIM_System(s) that are being identified and represented in the Namespace. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , system_identification_id6 INTEGER REFERENCES system_identification(id) ); 
        CREATE TABLE public.object_manager /* CIM_ObjectManager is deprecated. The replacement is CIM_WBEMServer. A type of CIM_Service that defines the capabilities of the CIM Server in which this ObjectManager class resides. Details related to communicating with the ObjectManager, and the Manager's basic capabilities, are stored IN instances of the associated CommunicationMechanism class available through the CommMechanismForManager association. It is assumed that Basic Read operations must be supported by ALL ObjectManager's in order to retrieve any additional detail. */ ( id SERIAL PRIMARY KEY , gather_statistical_data text[] , name text[] , element_name text[] , description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
        CREATE TABLE public.object_manager_adapter /* ObjectManagerAdapter is deprececated. Client Object Manager Adapter is now modeled by ProtocolService. There is no replacement for the other types of adapters. A ObjectManagerAdapter is a Service of the CIM Object Manager. An adapter can be any service of the Object Manager that needs to be managed (e.g. started, stopped, monitored, ...). There MUST be an instance for each Adapter type. */ ( id SERIAL PRIMARY KEY , name text[] , element_name text[] , handle text[] , adapter_type text[] , other_adapter_type_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , generation text[] ); 
        CREATE TABLE public.protocol_adapter /* CIM_ProtocolAdapter is deprecated in lieu of CIM_ObjectManagerAdapter. Since the CIM_ProtocolAdapter class does not have to support the protocols and can be any type of adapter, it was decided to change the name to ObjectManagerAdapter to better reflect the true meaning of the class. A ProtocolAdapter is a Service of the CIM Object Manager. It is responsible for accepting incoming requests on a particular protocol, and translating and forwarding the request to the CIM Object Manager. It is also responsible for translating and sending the response from the CIM Object Manager. */ ( id SERIAL PRIMARY KEY , name text[] , handle text[] , protocol_adapter_type text[] , other_protocol_adapter_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ata_protocol_endpoint /* An ATAProtocolEndpoint represents the protocol (command) aspects of a logical ATA port, independent of the connection/transport. ATAProtocolEndpoint is either directly or indirectly associated to one or more instances of LogicalPort depending on the underlying transport. */ ( id SERIAL PRIMARY KEY , name text[] , connection_type text[] , role text[] , other_connection_type text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.associated_next_hop /* AssociatedNextHop depicts the relationship between a route and the specification of its next hop. The next hop is external to a System, and hence is defined as a kind of RemoteServiceAccessPoint. Note that this relationship is independent of RouteUsesEndpoint (the local Endpoint used to transmit the traffic), and both may be defined for a route. */ ( id SERIAL PRIMARY KEY , remote_service_access_point_id5 INTEGER REFERENCES remote_service_access_point(id) , next_hop_route_id6 INTEGER REFERENCES next_hop_route(id) ); 
        CREATE TABLE public.average_rate_meter_service /* This is a concrete subclass of MeterService that represents a simple meter, called an Average Rate Meter. This type of meter measures the average rate at which packets are submitted to it over a specified time. Packets are defined as conformant if their average arrival rate does not exceed the specified measuring rate of the meter. Any packet that causes the specified measuring rate to be exceeded is defined to be non-conforming. */ ( id SERIAL PRIMARY KEY , average_rate text[] , delta_interval text[] , meter_type text[] , other_meter_type text[] , conformance_levels text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_attributes_for_route /* This defines the attributes that are transmitted between BGP peers on a per-route basis. */ ( id SERIAL PRIMARY KEY , bgp_path_attributes_id5 INTEGER REFERENCES bgp_path_attributes(id) , bgpip_route_id6 INTEGER REFERENCES bgpip_route(id) , path_attr_peer text[] , path_attr_ipaddr_prefix_len text[] , path_attr_ipaddr_prefix text[] ); 
        CREATE TABLE public.bgp_protocol_endpoint /* A ProtocolEndpoint that is dedicated to running BGP. */ ( id SERIAL PRIMARY KEY , is_ebgp text[] , is_ebgpmultihop text[] , local_identifier text[] , peer_identifier text[] , state text[] , admin_status text[] , negotiated_version text[] , local_address text[] , local_port text[] , remote_address text[] , remote_port text[] , remote_as text[] , connect_retry_interval text[] , hold_time_configured text[] , keep_alive_configured text[] , min_asorigination_interval text[] , min_route_advertisement_interval text[] , hold_time text[] , keep_alive text[] , protocol_iftype text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_service /* This class is used to represent the basic operation of BGP. It is derived from RouteCalculationService, the superclass of all routing protocols. */ ( id SERIAL PRIMARY KEY , bgp_version text[] , last_error_code text[] , last_message_error_sub_code text[] , last_open_error_sub_code text[] , last_update_error_sub_code text[] , router_id text[] , algorithm_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.bgp_service_attributes /* This is a specialization of the Component aggregation. This aggregation defines the set of BGPPathAttributes that are transmitted in per-path UPDATE messages. The association is deprecated since it is incorrectly defined as a Component relationship, and since the properties of BGPPathAttribute are path/endpoint-specific (not defined at the level of the Service). */ ( id SERIAL PRIMARY KEY , bgp_service_id7 INTEGER REFERENCES bgp_service(id) , bgp_path_attributes_id8 INTEGER REFERENCES bgp_path_attributes(id) ); 
        CREATE TABLE public.bgp_service_statistics /* This association defines statistics collected for a BGP Service. The relationship is deprecated since the class BGPStatistics is deprecated. It is incorrectly associated with a BGPService, but should instead be associated with a BGPProtocolEndpoint using the ElementStatisticalData relationship. */ ( id SERIAL PRIMARY KEY , bgp_statistics_id6 INTEGER REFERENCES bgp_statistics(id) , bgp_service_id7 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.clp_protocol_endpoint /* A representation of a communication endpoint where the CLP protocol may be accessed. */ ( id SERIAL PRIMARY KEY , current_default_target text[] , keep_time text[] , wait_behavior text[] , output_format text[] , output_verbosity text[] , output_language text[] , output_position text[] , output_order text[] , output_count text[] , display_option text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.calculated_routes /* This assocation makes explicit the routes that are calculated by a specific RouteCalculationService. Thus, every RouteCalculationService can have its own unique set of calculated routes. The association is not necessary in the model and has been deprecated. An instance of the general ConcreteDependency association can tie a NextHopIPRoute to a RouteCalculationService. In addition, information on how the route was derived is available in NextHopIPRoute's RouteDerivation enumeration. */ ( id SERIAL PRIMARY KEY , route_calculation_service_id6 INTEGER REFERENCES route_calculation_service(id) , ip_route_id7 INTEGER REFERENCES ip_route(id) ); 
        CREATE TABLE public.calculates_among /* This is a specialization of the ServiceSAPDependency association, indicating that the referenced ProtocolEndpoint is utilized by the RouteCalculationService to provide its functionality. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , route_calculation_service_id6 INTEGER REFERENCES route_calculation_service(id) , is_static text[] ); 
        CREATE TABLE public.calculation_based_on_queue /* This association establishes a dependency relationship
    BETWEEN a QueuingService
        AND an instance of the DropThresholdCalculationService class. The queue's current depth is used by the CalculationService in calculating an average/smoothed queue depth. */ ( id SERIAL PRIMARY KEY , queuing_service_id5 INTEGER REFERENCES queuing_service(id) , drop_threshold_calculation_service_id6 INTEGER REFERENCES drop_threshold_calculation_service(id) , type_of_dependency text[] , restart_service text[] ); 
        CREATE TABLE public.calculation_service_for_dropper /* This association is a subclass of ServiceServiceDependency, and represents the reliance of a REDDropperService on one or more DropThresholdCalculationServices. The latter calculate average queue depth, based on the observed depths of a queue. The specific queue examined by each CalculationService is defined using the CalculationBasedOnQueue association. */ ( id SERIAL PRIMARY KEY , drop_threshold_calculation_service_id5 INTEGER REFERENCES drop_threshold_calculation_service(id) , red_dropper_service_id6 INTEGER REFERENCES red_dropper_service(id) , type_of_dependency text[] , restart_service text[] ); 
        CREATE TABLE public.classifier_service /* ClassifierService represents a logical entity associated with an ingress or egress interface of a device, that takes a single input stream, and sorts it into one or more output streams. The sorting is done by a set of filters that select packets based on the packet contents, or possibly based on other attributes associated with the packet. Each output stream is the result of matching a particular filter. Rather than being linked directly to its filters (instantiated as FilterLists), a classifier is modeled as an aggregation of ClassifierElements. Each of these ClassifierElements is linked to a single FilterList, by the association ClassifierElementUsesFilterList. Note that ClassifierServices are designed to allow hierarchical classification. When hierarchical classification is used, a ClassifierElement may point to another ClassifierService (via the association, NextServiceAfterClassifierElement). When this is true, the ClassifierElement MUST NOT use the ClassifierElementUses FilterList association. A classifier is modeled as a ConditioningService so that it can be aggregated into a QoSService (using the QoSConditioningSubService aggregation), and can use the NextService association to identify the subsequent ConditioningServices for different traffic streams. */ ( id SERIAL PRIMARY KEY , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.conditioning_service_on_endpoint /* The QoS Model describes the traffic conditioning functions in place for a network device. In order to 'be conditioned', a packet is received at a ProtocolEndpoint. After 'conditioning', a packet is dropped or leaves the device via a ProtocolEndpoint. This dependency on ProtocolEndpoints is defined by the ConditioningServiceOn Endpoint association. A property of the association, ServiceType, indicates whether the ConditioningService handles incoming ("Ingress") or out-going ("Egress") packets. This association is deprecated since different cardinalities are needed on the ingress and egress classes. This cannot be done using a single association. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) , conditioning_service_id7 INTEGER REFERENCES conditioning_service(id) , service_type text[] ); 
        CREATE TABLE public.dhcp_protocol_endpoint /* A class derived from ProtocolEndpoint representing the configuration of a DHCP client. The configuration information contained by this ProtocolEndpoint is the current configuration obtained/received from a DHCP server. An instance of CIM_RemoteAccessAvailableToElement is used to relate the DHCPProtocolEndpoint to the RemoteServiceAccessPoint which represents the DHCP server. An EndpointIdentity association from the DHCPProtocolEndpoint to an IPProtocolEndpoint is established. */ ( id SERIAL PRIMARY KEY , client_state text[] , renewal_time text[] , rebinding_time text[] , lease_time text[] , lease_obtained text[] , lease_expires text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.dns_protocol_endpoint /* A class derived from CIM_ProtocolEndpoint which represents the DNS client and DNS configuration for a single IP endpoint. The DNS server addresses can be determined by querying the AccessInfo property of associated CIM_RemoteServiceAccessPoint instances which have an AccessContext of "DNS Server". The order in which the DNS servers will be queried can be determined by the relative values of the OrderOfAccess property on each CIM_RemoteAccessAvailableToElement association which associated the CIM_RemoteServiceAccessPoint with the CIM_DNSProtocolEndpoint. */ ( id SERIAL PRIMARY KEY , hostname text[] , append_parent_suffixes text[] , append_primary_suffixes text[] , domain_name text[] , register_this_connections_address text[] , use_suffix_when_registering text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.dscp_marker_service /* DSCPMarkerService marks the differentiated services codepoint (DSCP) within the DS field in the IPv4 and IPv6 packet headers, as defined in [R2474]. It is marked with the specific value defined in the property, DSCPValue. Following common practice, the value to be written into the field is represented as an unsigned 8-bit integer. */ ( id SERIAL PRIMARY KEY , dscp_value text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.diff_serv_service /* DiffServService represents the use of standard or custom DiffServ services (associated with particular Per Hop Behaviors, PHBs) to implement a (higher-level) QoSService. Note that the DiffServService may be just one of a set of coordinated QoSSubServices that together implement a higher-level QoSService. The relationship between the QoSServices is described using the association, QoSSubService. */ ( id SERIAL PRIMARY KEY , dscp text[] , phbid text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ef_service /* This class represents a specialization of the general concept of forwarding network traffic by adding specific semantics that characterize the operation of the Expedited Forwarding (EF) Service (defined in RFC 2598). The EF PHB can be used to build a low loss, low latency, low jitter, assured bandwidth, end-to-end service through DiffServ domains. Such a service appears to the endpoints like a point-to-point connection or a virtual leased line. This service has also been described as Premium service in the IETF literature. RFC 2598 defines one DSCP for the EF service. Thus, there is no need to define any attributes in this class, since an instance of the EFService class, by definition, means that this particular DSCP is used. EFService is deprecated since forwarding based on the value of the DiffServ Code Point is specified using a FilterList, which is associated with a ClassifierElement. If there is a need to distinguish a higher-level set of coordinated QoS services, the DiffServService class can be instantiated directly. */ ( id SERIAL PRIMARY KEY , dscp text[] , phbid text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.egp_route_calc_dependency /* This is a specialization of ServiceServiceDependency, and captures the dependency that external gateway protocols (such as BGP) have on interior gateway protocols (such as OSPF). */ ( id SERIAL PRIMARY KEY , route_calculation_service_id5 INTEGER REFERENCES route_calculation_service(id) , route_calculation_service_id6 INTEGER REFERENCES route_calculation_service(id) , igp_injection text[] , type_of_dependency text[] , restart_service text[] ); 
        CREATE TABLE public.ewma_meter_service /* This is a concrete subclass of the MeterService class that represents an exponentially weighted moving average meter. This meter is a simple low-pass filter that measures the rate of incoming packets over a small, fixed sampling interval. Any admitted packet that pushes the average rate over a pre-defined limit is defined to be non-conforming. */ ( id SERIAL PRIMARY KEY , average_rate text[] , delta_interval text[] , gain text[] , meter_type text[] , other_meter_type text[] , conformance_levels text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.egress_conditioning_service_on_endpoint /* This association represents the binding, in the egress direction, between a ProtocolEndpoint and the last ConditioningService that processes packets before they leave a network device (via that ProtocolEndpoint). This 'last' ConditioningService is ordinarily a scheduler, but it does not have to be. There can be multiple 'last' ConditioningServices for an Endpoint (for example, in the case of a fallback scheduler). Therefore, the cardinality for the Dependent object reference remains 0..n. On the other hand, a single ConditioningService cannot be the last one to process packets for multiple Endpoints. So, the cardinality of the Antecedent object reference is narrowed from 0..n to 0..1. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , conditioning_service_id6 INTEGER REFERENCES conditioning_service(id) ); 
        CREATE TABLE public.element_in_scheduling_service /* This association represents the relationship between a PacketSchedulingService and the set of SchedulingElements that tie it to its inputs (either QueuingServices or other PacketSchedulingServices). */ ( id SERIAL PRIMARY KEY , packet_scheduling_service_id7 INTEGER REFERENCES packet_scheduling_service(id) , scheduling_element_id8 INTEGER REFERENCES scheduling_element(id) ); 
        CREATE TABLE public.endpoint_for_ipnetwork_connection /* CIM_EndpointForIPNetworkConnection associates the instance of CIM_IPNetworkConnection with the communication endpoint ( Eg "CIM_LANEndpoint". ) */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , ip_network_connection_id6 INTEGER REFERENCES ip_network_connection(id) ); 
        CREATE TABLE public.endpoint_identity /* CIM_EndpointIdentity indicates that two ProtocolEndpoints represent different aspects of the same underlying address or protocol-specific ID. This association refines the CIM_LogicalIdentity superclass by restricting it to the Endpoint level and defining its use in well understood scenarios. One of these scenarios is to represent that an Endpoint has both 'LAN' and protocol-specific aspects. For example, an Endpoint could be both a LANEndpoint as well as a DHCPEndpoint. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) ); 
        CREATE TABLE public.endpoint_of_network_pipe /* EndpointOfNetworkPipe describes the endpoints between which a pipe transfers information. Whether an endpoint is a source or sink is indicated by a property of the association, SourceOrSink. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) , network_pipe_id7 INTEGER REFERENCES network_pipe(id) , source_or_sink text[] ); 
        CREATE TABLE public.flow_service /* This class represents a service that supports a particular microflow. The microflow is identified by the string-valued property FlowID. In some implementations, an instance of this class corresponds to an entry in the implementation's flow table. */ ( id SERIAL PRIMARY KEY , flow_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.forwarding_service /* This class represents the functions used IN forwarding network traffic. Its instances act
    ON packets received
FROM one
        OR more ProtocolEndpoints
        OR Services,
        AND drop (discard),
        OR send those packets to one
        OR more other ProtocolEndpoints
        OR Services. The explicit Endpoints being forwarded between, are described
USING the ForwardsAmong association (or one of its subclasses). Generally, the Endpoints are at the same protocol layer
        AND are usually of similar types,
        OR of the same type. ForwardingService is different than RouteCalculation Service IN that it represents the function of forwarding traffic independent of calculating routing information. Examining the ForwardingService class definition, note that its superclass NetworkService is deprecated. Therefore, NetworkService's properties need not be implemented in an instance of ForwardingService. Unfortunately, NetworkService cannot be removed from the object hierarchy without a major Schema release. When/if this occurs, the NetworkService superclass will be removed, and ForwardingService will subclass from CIM_Service directly. Also note that there are a large number of additional protocols that are not currently modeled. These will be added over time. */ ( id SERIAL PRIMARY KEY , protocol_type text[] , other_protocol_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.forwards_among /* This association represents the dependency that exists between the ProtocolEndpoints that are used to forward data and the ForwardingService that is performing the forwarding of data. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , forwarding_service_id6 INTEGER REFERENCES forwarding_service(id) ); 
        CREATE TABLE public.hdr8021_pservice /* This class represents a specialization of the general concept of forwarding network traffic by adding specific semantics that define how traffic is forwarded based on the value of the Priority field in the 802.1P header. This class is used to enable DiffServ domains and domains that support 802.1P only to exchange traffic. It represents the mapping between implementations that only support 802.1P priority marking to be mapped to implementations that support DiffServ, which use DSCPs. Hdr8021PService is deprecated since forwarding based on the value of the Priority field in the 802.1P header is specified using a FilterList, which is associated with a ClassifierElement. If there is a need to distinguish a higher-level set of coordinated QoS services, the QoSService class can be instantiated directly. */ ( id SERIAL PRIMARY KEY , priority_value text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.head_tail_drop_queue_binding /* This association describes the relationship between a head or tail dropper and the queue that it monitors to determine when to drop traffic. The referenced queue's depth is compared against the Dropper's threshold property. Although the dropper drops from only one queue, the drop decision may be influenced by the state of several queues. The rule for combining the multiple inputs is simple addition: if the sum of the lengths of the monitored queues exceeds the dropper's QueueThreshold value, THEN
    packets are dropped. Note that this rule for combining inputs may be overridden. */ ( id SERIAL PRIMARY KEY , queuing_service_id5 INTEGER REFERENCES queuing_service(id) , head_tail_dropper_id6 INTEGER REFERENCES head_tail_dropper(id) ); 
    CREATE TABLE public.hosted_route /* HostedRoute describes the relationship
    BETWEEN the route
        AND the system IN whose context it is defined. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , next_hop_route_id6 INTEGER REFERENCES next_hop_route(id) ); 
        CREATE TABLE public.ip_protocol_endpoint /* A ProtocolEndpoint that is dedicated to running IP. */ ( id SERIAL PRIMARY KEY , i_pv4_address text[] , i_pv6_address text[] , address text[] , subnet_mask text[] , prefix_length text[] , address_type text[] , ip_version_support text[] , protocol_iftype text[] , address_origin text[] , i_pv6_address_type text[] , i_pv6_subnet_prefix_length text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ip_subinterface /* Configuration properties for an Ethernet switch
        OR router subinterface. A IPSubinterface allows the router to route traffic
    ON a single port AS if it were part of multiple separate IP subnets. The parent Interface is configured AS a trunk port
        AND the connection is is divided by encapsulating each frame
WITH VLAN information. */ ( id SERIAL PRIMARY KEY , encapsulation_type text[] , parent_interface text[] , encapsulation_value text[] , other_encapsulation_type text[] , element_name text[] , i_pv4_address text[] , i_pv6_address text[] , address text[] , subnet_mask text[] , prefix_length text[] , address_type text[] , ip_version_support text[] , protocol_iftype text[] , address_origin text[] , i_pv6_address_type text[] , i_pv6_subnet_prefix_length text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
CREATE TABLE public.ipx_protocol_endpoint /* An IPX communication point
FROM which data may be sent
        OR received. */ ( id SERIAL PRIMARY KEY , address text[] , protocol_iftype text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.in_logical_network /* This association defines a ProtocolEndpoint AS a member of a specific LogicalNetwork. Since the LogicalNetwork class is deprecated IN lieu of ConnectivityCollection, this association is no longer necessary. It is deprecated to the MemberOfCollection association, that is inherited by ConnectivityCollection
FROM its superclass, Collection. */ ( id SERIAL PRIMARY KEY , logical_network_id7 INTEGER REFERENCES logical_network(id) , protocol_endpoint_id8 INTEGER REFERENCES protocol_endpoint(id) ); 
CREATE TABLE public.ingress_conditioning_service_on_endpoint /* This association represents the binding, IN the ingress direction,
    BETWEEN a ProtocolEndpoint
        AND the first ConditioningService that processes packets received via that Endpoint. Since there can only be one 'first' ConditioningService for a ProtocolEndpoint, the cardinality for the Dependent object reference is narrowed
FROM 0..n to 0..1.
    ON the other hand, a single ConditioningService can be the first to process packets received via multiple ProtocolEndpoints. So, the cardinality of the Antecedent object reference remains 0..n. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , conditioning_service_id6 INTEGER REFERENCES conditioning_service(id) ); 
    CREATE TABLE public.lan_endpoint /* A communication endpoint which,
    WHEN its associated interface device is connected to a LAN, may send
        AND receive data frames. LANEndpoints include Ethernet, Token Ring
        AND FDDI interfaces. */ ( id SERIAL PRIMARY KEY , lanid text[] , lan_type text[] , other_lantype text[] , mac_address text[] , max_data_size text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_network_service /* A LogicalNetworkService represents network services that either originate and/or terminate IN a LogicalNetwork. This association is deprecated since LogicalNetworks aggregate ProtocolEndpoints, NOT their backing Services. */ ( id SERIAL PRIMARY KEY , logical_network_id6 INTEGER REFERENCES logical_network(id) , network_service_id7 INTEGER REFERENCES network_service(id) , containment_type text[] ); 
        CREATE TABLE public.network_port_configuration_service /* CIM_NetworkPortConfigurationService provides management of the network interfaces associated
WITH a network port. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.next_scheduler /* This association is a subclass of NextService,
        AND defines a predecessor-successor relationship
    BETWEEN Packet SchedulingServices. IN a hierarchical queuing configuration (where a second scheduler treats the output of a first scheduler AS a single, aggregated input), the two schedulers are related via the NextScheduler association. */ ( id SERIAL PRIMARY KEY , packet_scheduling_service_id5 INTEGER REFERENCES packet_scheduling_service(id) , packet_scheduling_service_id6 INTEGER REFERENCES packet_scheduling_service(id) ); 
    CREATE TABLE public.non_work_conserving_scheduling_service /* A type of packet scheduler, that is capable of operating IN a non-work conserving manner. This class does NOT add any properties beyond those it inherits
FROM PacketSchedulingService. It does, however, participate IN one additional association, FailNextScheduler. */ ( id SERIAL PRIMARY KEY , scheduler_type text[] , other_scheduler_type text[] , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ospf_protocol_endpoint_base /* Base class for OSPF protocol endpoints, defining several general properties. */ ( id SERIAL PRIMARY KEY , enabled_state text[] , transit_delay text[] , retransmit_interval text[] , auth_type text[] , other_auth_type text[] , auth_key text[] , protocol_iftype text[] , description text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ospf_service /* This class is used to represent the basic operation of OSPF. It is derived
FROM the RouteCalculationService, the superclass of ALL routing protocols. */ ( id SERIAL PRIMARY KEY , running_mospf text[] , is_inter_area_multicast_forwarder text[] , is_inter_as_multicast_forwarder text[] , exit_overflow_interval text[] , rfc1583_compatibility text[] , router_id text[] , algorithm_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.ospf_service_configuration /* OSPFServiceConfiguration connects an OSPF service to its area configurations. The configurations are defined for the OSPF Service,
        AND so do NOT make sense AS stand alone objects. This is the reason for the Min (1), Max (1) cardinalities
    ON OSPFService. They mandate the instantiation of the service
        AND of this association for the referenced instance of OSPFAreaConfiguration. The area configuration acts AS a focal point to bring together the router (indicated AS a ComputerSystem
WITH an instance of OSPFService, associated to the AreaConfiguration
USING this relationship), the area (indicated AS an OSPFArea, associated to the AreaConfiguration
USING AreaOfConfiguration)
        AND the address ranges for advertising (indicated AS instances of RangeOfIPAddresses, associated to the AreaConfiguration
USING RangesOfConfiguration). There would be an instance of OSPFAreaConfiguration for each connected area of a router/OSPFService. */ ( id SERIAL PRIMARY KEY , ospf_service_id5 INTEGER REFERENCES ospf_service(id) , ospf_area_configuration_id6 INTEGER REFERENCES ospf_area_configuration(id) ); 
CREATE TABLE public.ospf_virtual_interface /* This class represent an OSPF protocol endpoint
    ON a virtual link. The definition of a virtual link
FROM RFC2328, is 'Virtual links can be configured between any two backbone routers that have an interface to a common non-backbone area. Virtual links belong to the backbone. The protocol treats two routers joined by a virtual link as if they were connected by an unnumbered point-to-point backbone network.' */ ( id SERIAL PRIMARY KEY , enabled_state text[] , transit_delay text[] , retransmit_interval text[] , auth_type text[] , other_auth_type text[] , auth_key text[] , protocol_iftype text[] , description text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.precedence_service /* This class represents a specialization of the general concept of forwarding network traffic by adding specific semantics that define how traffic is forwarded based
    ON the value of the ToS byte of a packet. This class is used to enable DiffServ devices
        AND non- DiffServ devices to exchange traffic. This is done by defining a sibling class, DiffServService, to represent devices that forward traffic based
    ON the DiffServ code point. This enables the administrator to define mappings
    BETWEEN devices that do NOT support DiffServ (and instead use IP Precedence)
        AND those that do support DiffServ. PrecedenceService is deprecated since forwarding based
    ON the value of the ToS byte is specified
USING a FilterList, which is associated
WITH a ClassifierElement. If there is a need to distinguish a higher-level SET of coordinated QoS services,
         the QoSService class can be instantiated directly. */ ( id SERIAL PRIMARY KEY ,
         precedence_value text[] ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         name text[] ,
         primary_owner_name text[] ,
         primary_owner_contact text[] ,
         start_mode text[] ,
         started text[] ,
         lo_sid text[] ,
         lo_sorg_id text[] ,
         enabled_state text[] ,
         other_enabled_state text[] ,
         requested_state text[] ,
         enabled_default text[] ,
         time_of_last_state_change text[] ,
         transitioning_to_state text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.qo_sconditioning_sub_service /* A QoSService utilizes underlying ConditioningServices AS part of its overall functionality. This is modeled
USING the QoSConditioningSubService association. Note that a ConditioningService may only be part of a single QoSService - the cardinality
    ON the QoSService reference is Max (1). */ ( id SERIAL PRIMARY KEY , qo_sservice_id6 INTEGER REFERENCES qo_sservice(id) , conditioning_service_id7 INTEGER REFERENCES conditioning_service(id) ); 
    CREATE TABLE public.queue_allocation /* Describes the reliance of a QueuingService
    ON the availability of space IN a BufferPool. */ ( id SERIAL PRIMARY KEY , buffer_pool_id5 INTEGER REFERENCES buffer_pool(id) , queuing_service_id6 INTEGER REFERENCES queuing_service(id) , allocation_percentage text[] ); 
    CREATE TABLE public.queue_hierarchy /* Describes the reliance of a QueuingService
    ON other, supporting queues
        AND their QueuingServices. A given Service can only act IN support of one QueuingService; but a higher level queue may be supported by many lower level QueuingServices. The class is deprecated since a queue only stores network traffic. It does NOT support other queues,
        OR manipulate their entries. This type of processing is described
USING NextService associations 'rightwards'
FROM the QueuingService. These associations reference 'other' ConditioningServices that may send traffic to 'other' queues). */ ( id SERIAL PRIMARY KEY , queuing_service_id6 INTEGER REFERENCES queuing_service(id) , queuing_service_id7 INTEGER REFERENCES queuing_service(id) , type_of_dependency text[] , restart_service text[] ); 
CREATE TABLE public.queue_to_schedule /* This is a top-level association, representing the relationship
    BETWEEN a queue (QueuingService)
        AND a SchedulingElement. The SchedulingElement, IN turn, represents the information IN a packet scheduling service that is specific to this queue, such AS relative priority
        OR allocated bandwidth. Although it cannot be expressed formally
WITH the association cardinalities, there is an additional constraint
    ON participation IN this association. A particular instance of (a subclass of) SchedulingElement always participates either IN exactly one instance of this association,
        OR IN exactly one instance of the association SchedulingServiceToSchedule. */ ( id SERIAL PRIMARY KEY , queuing_service_id5 INTEGER REFERENCES queuing_service(id) , scheduling_element_id6 INTEGER REFERENCES scheduling_element(id) ); 
        CREATE TABLE public.reflector_client_service /* This association will serve AS the base class for handling BGP routing information for clients of the reflector of this Cluster. */ ( id SERIAL PRIMARY KEY , bgp_cluster_id5 INTEGER REFERENCES bgp_cluster(id) , bgp_service_id6 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.reflector_non_client_service /* This association will serve AS the base class for handling BGP routing information for the non-clients of the reflector of this Cluster. */ ( id SERIAL PRIMARY KEY , bgp_cluster_id5 INTEGER REFERENCES bgp_cluster(id) , bgp_service_id6 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.reflector_service /* This association will serve AS the base class for defining
        AND distributing BGP routing information for the reflector of this Cluster. */ ( id SERIAL PRIMARY KEY , bgp_cluster_id5 INTEGER REFERENCES bgp_cluster(id) , bgp_service_id6 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.remote_access_available_to_element /* Describes an element's knowledge regarding accessing other (i.e., remote) Servers and Systems. */ ( id SERIAL PRIMARY KEY , remote_service_access_point_id5 INTEGER REFERENCES remote_service_access_point(id) , enabled_logical_element_id6 INTEGER REFERENCES enabled_logical_element(id) , is_default text[] , order_of_access text[] ); 
        CREATE TABLE public.route_forwarded_by_service /* This assocation makes explicit the next hops that are forwarded by a specific ForwardingService, to reach the destination. Every ForwardingService can have its own unique set of routing destinations and next hops. The association is deprecated since it is incorrect to mandate the existence of a ForwardingService in order to define the existence of a route. */ ( id SERIAL PRIMARY KEY , forwarding_service_id6 INTEGER REFERENCES forwarding_service(id) , next_hop_routing_id7 INTEGER REFERENCES next_hop_routing(id) , admin_distance text[] , path_metric text[] ); 
        CREATE TABLE public.route_uses_endpoint /* RouteUsesEndpoint depicts the relationship between a next hop route and the local Endpoint that is used to transmit the traffic to the 'next hop'. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , next_hop_route_id6 INTEGER REFERENCES next_hop_route(id) ); 
        CREATE TABLE public.routes_bgp /* This association defines a BGP route, and makes explicit the dependency between a BGPIPRoute and a BGPProtocolEndpoint. */ ( id SERIAL PRIMARY KEY , bgp_protocol_endpoint_id5 INTEGER REFERENCES bgp_protocol_endpoint(id) , bgpip_route_id6 INTEGER REFERENCES bgpip_route(id) ); 
        CREATE TABLE public.scsi_protocol_endpoint /* A SCSIProtocolEndpoint represents the protocol (command) aspects of a logical SCSI port, independent of the connection/transport. SCSIProtocolEndpoint is either directly or indirectly associated to one or more instances of LogicalPort (via DeviceSAPImplementation) depending on the underlying transport. Indirect associations aggregate one or more LogicalPorts using intermediate ProtocolEndpoints (iSCSI, etc). SCSIProtocolEndpoint is also associated to a SCSIProtocolController, representing the SCSI device. */ ( id SERIAL PRIMARY KEY , name text[] , connection_type text[] , role text[] , target_relative_port_number text[] , other_connection_type text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ssh_protocol_endpoint /* A representation of a communications endpoint where an SSH server can be accessed using the SSH protocol. */ ( id SERIAL PRIMARY KEY , other_enabled_sshversion text[] , ssh_version text[] , other_sshversion text[] , encryption_algorithm text[] , idle_timeout text[] , keep_alive text[] , forward_x11 text[] , compression text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.scheduler_used /* In order to remove queued packets, a process or Service (identified as a PacketSchedulingService) runs. This association describes the Dependency of the queue and its QueuingService on a SchedulingService, which empties it. The association is deprecated in lieu of associating Queuing Services to SchedulingElements, and SchedulingElements into SchedulingServices. The latter approach is very flexible regarding the implementations that can be modeled, and removes the need to track individual traffic streams using an artificial model property, TrafficClass. */ ( id SERIAL PRIMARY KEY , packet_scheduling_service_id6 INTEGER REFERENCES packet_scheduling_service(id) , queuing_service_id7 INTEGER REFERENCES queuing_service(id) , type_of_dependency text[] , restart_service text[] ); 
        CREATE TABLE public.security_association_endpoint /* SecurityAssociationEndpoint (SAEndpoint) represents the endpoint of a secure connection. This is typically an IP connection, although the model allows more flexibility than just IP. The SecurityAssociationEndpoint is tied to an IPProtocolEndpoint (or possibly other endpoint) using the LogicalIdentity association. Note that an endpoint is defined at both ends of the connection. */ ( id SERIAL PRIMARY KEY , install_date text[] , lifetime_seconds text[] , refresh_threshold_seconds_percentage text[] , idle_duration_seconds text[] , lifetime_kilobytes text[] , refresh_threshold_kbytes_percentage text[] , packet_logging_active text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.source_routing_service /* SourceRoutingService represents the capability of a switch to participate in the source routing of frames received at its ports. It is a system-level Service that provides and supports local switching only. The SourceRouting Service is aggregated into a higher level SwitchService through the SwitchServiceSourceRouting association. */ ( id SERIAL PRIMARY KEY , bridge_lf_mode text[] , protocol_type text[] , other_protocol_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.spanning_tree_service /* This service class represents the capability of a switch to participate in the distributed construction of a spanning tree. */ ( id SERIAL PRIMARY KEY , protocol_spec text[] , priority text[] , spanning_tree_bridge_address text[] , designated_root text[] , root_cost text[] , root_port text[] , max_age text[] , hello_time text[] , hold_time text[] , forward_delay text[] , bridge_max_age text[] , bridge_hello_time text[] , bridge_forward_delay text[] , protocol_type text[] , other_protocol_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.specific802dot1_qvlanservice /* This class is deprecated following discussion as to the need of a modeling a 802.1Q as a service. It was determined that a 802.1Q service was not needed. If a switch supports 802.1Q, an instance of this class should be instantiated in the switch. If the switch supports GVRP, this class represents the function that the switch performs with respect to GVRP. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.switch_port /* Switch Port from which frames are received and out which they are transmitted. This endpoint is associated with its networking interface (such as Ethernet) via the EndpointIdentity relationship. */ ( id SERIAL PRIMARY KEY , port_number text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.switch_port_dynamic_forwarding /* This association links a DynamicForwardingEntry and the SwitchPort to which the entry applies. */ ( id SERIAL PRIMARY KEY , switch_port_id5 INTEGER REFERENCES switch_port(id) , dynamic_forwarding_entry_id6 INTEGER REFERENCES dynamic_forwarding_entry(id) ); 
        CREATE TABLE public.switch_port_pair /* This association represents information regarding port pairings that is used by the SourceRoutingService of a switch. */ ( id SERIAL PRIMARY KEY , switch_port_id5 INTEGER REFERENCES switch_port(id) , switch_port_id6 INTEGER REFERENCES switch_port(id) , bridge_num text[] , bridge_state text[] ); 
        CREATE TABLE public.switch_port_source_routing /* A switch capable of source routing maintains source-routing specific information about each port. This association represents that information. */ ( id SERIAL PRIMARY KEY , switch_port_id5 INTEGER REFERENCES switch_port(id) , source_routing_service_id6 INTEGER REFERENCES source_routing_service(id) , hop_count text[] , local_segment text[] , bridge_num text[] , target_segment text[] , ste_span_mode text[] ); 
        CREATE TABLE public.switch_port_spanning_tree /* A switch participating in the spanning tree maintains spanning-tree specific information about each port whose forwarding is determined by the spanning tree. This association represents that information. */ ( id SERIAL PRIMARY KEY , switch_port_id5 INTEGER REFERENCES switch_port(id) , spanning_tree_service_id6 INTEGER REFERENCES spanning_tree_service(id) , priority text[] , state text[] , enable text[] , path_cost text[] , designated_root text[] , designated_cost text[] , designated_bridge text[] , designated_port text[] ); 
        CREATE TABLE public.switch_port_static_forwarding /* This association links a static database entry and the SwitchPort to which the entry applies. */ ( id SERIAL PRIMARY KEY , switch_port_id5 INTEGER REFERENCES switch_port(id) , static_forwarding_entry_id6 INTEGER REFERENCES static_forwarding_entry(id) ); 
        CREATE TABLE public.switch_service /* Generic switch (bridging) service class. Additional switching functions are incorporated as subordinate services related to this class via ServiceComponent associations. */ ( id SERIAL PRIMARY KEY , bridge_address text[] , num_ports text[] , bridge_type text[] , bridge_address_type text[] , protocol_type text[] , other_protocol_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.switch_service_source_routing /* An association linking SwitchService to a component SourceRoutingService. The cardinality of the SourceRoutingService is 0..1 for a VLAN-unaware switch. */ ( id SERIAL PRIMARY KEY , switch_service_id6 INTEGER REFERENCES switch_service(id) , source_routing_service_id7 INTEGER REFERENCES source_routing_service(id) ); 
        CREATE TABLE public.switch_service_spanning_tree /* An association linking SwitchService to a component SpanningTreeService. The cardinality of the SpanningTreeService is 0..1 for a VLAN-unaware switch. */ ( id SERIAL PRIMARY KEY , switch_service_id6 INTEGER REFERENCES switch_service(id) , spanning_tree_service_id7 INTEGER REFERENCES spanning_tree_service(id) ); 
        CREATE TABLE public.switch_service_vlan /* This class is deprecated as a fall out of the previous deprecations within the existing model An association linking SwitchService to a component VLANService. */ ( id SERIAL PRIMARY KEY , switch_service_id7 INTEGER REFERENCES switch_service(id) , vlan_service_id8 INTEGER REFERENCES vlan_service(id) ); 
        CREATE TABLE public.switch_virtual_interface /* Configuration class for a switch virtual interface which is a VLAN of switch ports represented by one interface to a routing or bridging system. */ ( id SERIAL PRIMARY KEY , vlan_id text[] , i_pv4_address text[] , i_pv6_address text[] , address text[] , subnet_mask text[] , prefix_length text[] , address_type text[] , ip_version_support text[] , protocol_iftype text[] , address_origin text[] , i_pv6_address_type text[] , i_pv6_subnet_prefix_length text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.switches_among /* A SwitchService switches frames between SwitchPorts. This association makes that relationship explicit. */ ( id SERIAL PRIMARY KEY , switch_port_id5 INTEGER REFERENCES switch_port(id) , switch_service_id6 INTEGER REFERENCES switch_service(id) ); 
        CREATE TABLE public.tcp_protocol_endpoint /* A protocol endpoint that is dedicated to running TCP. */ ( id SERIAL PRIMARY KEY , port_number text[] , protocol_iftype text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.telnet_protocol_endpoint /* A representation of a communications endpoint where a Telnet server can be accessed using the Telnet protocol. */ ( id SERIAL PRIMARY KEY , terminal_mode text[] , other_terminal_mode text[] , character_display_mode text[] , other_character_display_mode text[] , escape_character text[] , idle_timeout text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.transparent_bridging_service /* This service class represents the learning/transparent bridging aspect of a SwitchService. */ ( id SERIAL PRIMARY KEY , aging_time text[] , fid text[] , protocol_type text[] , other_protocol_type text[] , service_url text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.transparent_bridging_static_forwarding /* This association links an instance of the Transparent BridgingService to the entries of its static (destination-address filtering) database. */ ( id SERIAL PRIMARY KEY , transparent_bridging_service_id5 INTEGER REFERENCES transparent_bridging_service(id) , static_forwarding_entry_id6 INTEGER REFERENCES static_forwarding_entry(id) ); 
        CREATE TABLE public.trap_source_for_snmpservice /* TrapSourceForSNMPService specifies the protocol endpoint/interface (and hence its IP address) from which traps originate. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , snmp_service_id6 INTEGER REFERENCES snmp_service(id) ); 
        CREATE TABLE public.udp_protocol_endpoint /* A protocol endpoint that is dedicated to running UDP. */ ( id SERIAL PRIMARY KEY , port_number text[] , protocol_iftype text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.usb_redirection_service /* USBRedirectionService describes the service that manages the USB Redirection of a system. */ ( id SERIAL PRIMARY KEY , other_redirection_service_type text[] , max_current_enabled_saps text[] , sharing_mode text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.vlan_endpoint /* An endpoint on a switch or endstation which is assigned to a given VLAN or accepts traffic from one or more VLANs. As defined by the property, OperationalEndpointMode, the endpoint may be configured as trunking or nontrunking. Note that an endpoint may dynamically be converted to/from a trunking mode. When this occurs, simply update the OperationalEndpointMode property. This class is associated with a DataLink or IPProtocol Endpoint - as another aspect of that endpoint - using the LogicalIdentity relationship. In this case, the VLANEndpoint takes the role of SameElement. */ ( id SERIAL PRIMARY KEY , desired_endpoint_mode text[] , other_endpoint_mode text[] , operational_endpoint_mode text[] , desired_vlantrunk_encapsulation text[] , other_trunk_encapsulation text[] , operational_vlantrunk_encapsulation text[] , gvrp_status text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.vlan_for /* The VLAN for the VLAN Service. */ ( id SERIAL PRIMARY KEY , vlan_id6 INTEGER REFERENCES vlan(id) , vlan_service_id7 INTEGER REFERENCES vlan_service(id) ); 
        CREATE TABLE public.wi_fi_endpoint /* A wireless communication endpoint which, when its associated interface device is associated with an IEEE 802.11 wireless LAN, may send and receive data frames. */ ( id SERIAL PRIMARY KEY , lanid text[] , protocol_iftype text[] , encryption_method text[] , other_encryption_method text[] , authentication_method text[] , other_authentication_method text[] , ieee8021x_authentication_protocol text[] , access_point_address text[] , bss_type text[] , associated text[] , lan_type text[] , other_lantype text[] , mac_address text[] , max_data_size text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_scsiprotocol_endpoint /* This is an iSCSI-specific SCSIProtocolEndpoint. ConnectionType MUST be 'iSCSI'. An iSCSIProtocolEndpoint represents an iSCSI port, which is the usage of a subset of network portals (TCP+IP ProtocolEndpoints) in a Portal Group by an iSCSI node. The BindsTo associations from iSCSIProtocolEndpoint to TCPProtocolEndpoints makes this relationship explicit. For an iSCSI target, the Identifier property (the Target Portal Group Tag) makes the relationship unique. For an iSCSI initiator, the session identifier makes the initiator port unique within the node. */ ( id SERIAL PRIMARY KEY , name text[] , identifier text[] , role text[] , connection_type text[] , target_relative_port_number text[] , other_connection_type text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_in_system /* CIM_PolicyInSystem is a generic association used to establish dependency relationships between Policies and the Systems that host them. These Systems may be ComputerSystems where Policies are 'running' or they may be Policy Repositories where Policies are stored. This relationship is similar to the concept of CIM_Services being dependent on CIM_Systems as defined by the HostedService association. Cardinality is Max (1) for the Antecedent/System reference since Policies can only be hosted in at most one System context. Some subclasses of the association will further refine this definition to make the Policies Weak to Systems. Other subclasses of PolicyInSystem will define an optional hosting relationship. Examples of each of these are the PolicyRuleInSystem and PolicyConditionIn PolicyRepository associations, respectively. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , policy_id7 INTEGER REFERENCES policy(id) ); 
        CREATE TABLE public.policy_set_in_system /* PolicySetInSystem is an abstract association class that represents a relationship between a System and a PolicySet used in the administrative scope of that system (e.g., AdminDomain, ComputerSystem). The Priority property is used to assign a relative priority to a PolicySet within the administrative scope in contexts where it is not a component of another PolicySet. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , policy_set_id7 INTEGER REFERENCES policy_set(id) , priority text[] ); 
        CREATE TABLE public.allocated_resource /* An association between LogicalDevices and SystemResources, indicating that the Resource is assigned to the Device. */ ( id SERIAL PRIMARY KEY , system_resource_id5 INTEGER REFERENCES system_resource(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.available_diagnostic_service /* This is an association class that relates a DiagnosticService to a ManagedElement. Consumers wishing to 'diagnose' a particular Element could query this association to determine what services are available. */ ( id SERIAL PRIMARY KEY , diagnostic_service_id5 INTEGER REFERENCES diagnostic_service(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , estimated_duration_of_service text[] , estimated_duration_qualifier text[] ); 
        CREATE TABLE public.boot_osfrom_fs /* A link between the OperatingSystem and the FileSystem(s) from which this OperatingSystem is loaded. The association is many- to-many since a Distributed OS could depend on several File Systems in order to correctly and completely load. */ ( id SERIAL PRIMARY KEY , file_system_id5 INTEGER REFERENCES file_system(id) , operating_system_id6 INTEGER REFERENCES operating_system(id) ); 
        CREATE TABLE public.computer_system /* A class derived from System that is a special collection of ManagedSystemElements. This collection is related to the providing of compute capabilities and MAY serve as an aggregation point to associate one or more of the following elements: FileSystem, OperatingSystem, Processor and Memory (Volatile and/or NonVolatile Storage). */ ( id SERIAL PRIMARY KEY , name_format text[] , reset_capability text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.computer_system_package /* Similar to the way that LogicalDevices are 'Realized' by PhysicalElements, ComputerSystem may be realized in one or more PhysicalPackages. The ComputerSystemPackage association explicitly defines this relationship. */ ( id SERIAL PRIMARY KEY , physical_package_id5 INTEGER REFERENCES physical_package(id) , computer_system_id6 INTEGER REFERENCES computer_system(id) , platform_guid text[] ); 
        CREATE TABLE public.dma /* Personal computer architecture DMA. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , dma_channel text[] , availability text[] , burst_mode text[] , address_size text[] , max_transfer_size text[] , byte_mode text[] , word_mode text[] , channel_timing text[] , type_ctiming text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.device_accessed_by_file /* Specifies the LogicalDevice that is associated with, and accessed using the referenced DeviceFile. */ ( id SERIAL PRIMARY KEY , device_file_id5 INTEGER REFERENCES device_file(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.diagnostic_log /* DiagnosticLog serves as an aggregation point for DiagnosticRecord objects. This class exists in order to encourage the use of a consolidated record management methodology for diagnostics. A common set of providers for this log and its associated records SHOULD be used to control functions such as record persistence, query support and overall data integrity in a consistent manner. */ ( id SERIAL PRIMARY KEY , instance_id text[] , max_number_of_records text[] , current_number_of_records text[] , overwrite_policy text[] , log_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.diagnostic_result_for_test /* This class is being deprecated as part of the deprecation of the DiagnosticResult class. This is an association class to relate the results of a test to the test itself. */ ( id SERIAL PRIMARY KEY , diagnostic_result_id6 INTEGER REFERENCES diagnostic_result(id) , diagnostic_test_id7 INTEGER REFERENCES diagnostic_test(id) ); 
        CREATE TABLE public.diagnostic_setting_for_test /* This class is no longer required and is being deprecated. Use ElementSetting (its parent) instead if the association is needed. This is an association class to relate test settings with diagnostic tests. */ ( id SERIAL PRIMARY KEY , diagnostic_test_id6 INTEGER REFERENCES diagnostic_test(id) , diagnostic_setting_id7 INTEGER REFERENCES diagnostic_setting(id) ); 
        CREATE TABLE public.diagnostic_test_for_mse /* This class is being deprecated to promote its usage to the DiagnosticService level. This is an association class that relates a DiagnosticTest to a ManagedSystemElement. Consumers wishing to 'diagnose' a particular Element could query this association, for the Element, to determine what tests are available. */ ( id SERIAL PRIMARY KEY , diagnostic_test_id6 INTEGER REFERENCES diagnostic_test(id) , managed_system_element_id7 INTEGER REFERENCES managed_system_element(id) , estimated_time_of_performing text[] , is_exclusive_for_mse text[] ); 
        CREATE TABLE public.diagnostics_log /* DiagnosticsLog is being deprecated in order to change the class name to DiagnosticLog. This is being done to follow the naming convention used for other diagnostic model classes. DiagnosticsLog serves as an aggregation point for DiagnosticRecord objects. This class exists in order to encourage the use of a consolidated record management methodology for diagnostics. A common set of providers for this log and its associated records SHOULD be used to control functions such as record persistence, query support and overall data integrity in a consistent manner. */ ( id SERIAL PRIMARY KEY , instance_id text[] , max_number_of_records text[] , current_number_of_records text[] , overwrite_policy text[] , log_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.export /* An association between a LocalFileSystem and its Directories indicating that the specified Directories are available for mount. When exporting an entire FileSystem, the Directory should reference the topmost directory of the FileSystem. */ ( id SERIAL PRIMARY KEY , local_file_system_id5 INTEGER REFERENCES local_file_system(id) , directory_id6 INTEGER REFERENCES directory(id) , exported_directory_name text[] ); 
        CREATE TABLE public.fs_quota_management_service /* The QuotaConfigurationService performs all modifications and queries to the state of a running or stopped quota system, including the FSQuotaConfigEntries that determine the thresholds and entities being monitored. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.file_share /* A FileShare is representative of a LogicalFile presented for use (or shared) across systems. Instances of FileShare are associated with the shared object on the 'server'-side via the CIM_SharedElement association. Shares are attached on the 'client'-side (usually into another namespace) via the CIM_ImportedShare association. FileShare is Abstract to force subclassing to define the semantics of the file-sharing protocol. FileShare when used for importing deprecates RemoteFileSystem. */ ( id SERIAL PRIMARY KEY , sharing_directory text[] , instance_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.file_share_setting_data /* FileShareSettingData associates a FileShare to itsExportedFileShareSetting. */ ( id SERIAL PRIMARY KEY , file_share_id5 INTEGER REFERENCES file_share(id) , exported_file_share_setting_id6 INTEGER REFERENCES exported_file_share_setting(id) , is_default text[] , is_current text[] , is_next text[] ); 
        CREATE TABLE public.file_storage /* A link between the FileSystem and the LogicalFile(s) addressed through this FileSystem. */ ( id SERIAL PRIMARY KEY , file_system_id7 INTEGER REFERENCES file_system(id) , logical_file_id8 INTEGER REFERENCES logical_file(id) ); 
        CREATE TABLE public.file_system_configuration_service /* This service provides active management for a filesystem host. It supports the creation, modification, and deletion of FileSystem elements and ConcreteJobs for long-runningtasks. This service also supports providing local access to a managed FileSystem from file server ComputerSystems.Local accessibility is represented as follows: -- A LocalAccessAvailable association is created that goes between the file server ComputerSystem and the LocalFileSystem. -- The LocalAccessAvailable.LocalAccessPoints property is set to the value of a pathname relative to the file server that points to the file system. -- A LocallyAccessibleFileSystemSetting element represents the settings that apply to the local access. This element is associated with ElementSettingData to the LocalFileSystem. This setting element has a HostedDependency association to the file server ComputerSystem. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.hosted_file_system /* A link between the System (such as a Computer or Application System) and the FileSystem that is a part of it. */ ( id SERIAL PRIMARY KEY , system_id7 INTEGER REFERENCES system(id) , file_system_id8 INTEGER REFERENCES file_system(id) ); 
        CREATE TABLE public.hosted_job_destination /* An association between a JobDestination and a System on which it resides. The cardinality of this association is 1-to-many. A System may host many Job queues. Job Destinations are weak with respect to their hosting System. Heuristic: A JobDestination is hosted on the System where the LogicalDevices, SoftwareFeatures or Services that implement/ provide the JobDestination are located. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , job_destination_id6 INTEGER REFERENCES job_destination(id) ); 
        CREATE TABLE public.hosted_share /* CIM_HostedShare is an association between a Share and the System on which the functionality resides. The cardinality of this association is many-to-many but a FileShare must have at least 1 host system, either exporting or importing it. (A System may host many Shares and a Share may be hosted by more than one System, but a Share must have at least one HostedShare). Heuristic: For export, a Share is hosted on the System where the LogicalElement that is exported by the Share is located (via SharedElement, derived from LogicalIdentity). For import, a Share is hosted on the System where the LogicalFile (or other namespace element) that provides the mount-point for the share is located (via ImportedShare, derived from LogicalIdentity). */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , share_id6 INTEGER REFERENCES share(id) , remote_share_wwn text[] ); 
        CREATE TABLE public.irq /* Personal computer architecture IRQ. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , irq_number text[] , availability text[] , trigger_type text[] , trigger_level text[] , shareable text[] , hardware text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.installed_os /* A link between the ComputerSystem and the OperatingSystem(s) installed or loaded on it. An OperatingSystem is 'installed' on a ComputerSystem, when placed on one of its StorageExtents - for example, copied to a disk drive or downloaded to Memory. Using this definition, an OperatingSystem is 'installed' on a NetPC when downloaded via the network. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , operating_system_id8 INTEGER REFERENCES operating_system(id) , primary_os text[] ); 
        CREATE TABLE public.last_applied_snapshot /* The CIM_LastAppliedSnapshot association associates an instance of the CIM_VirtualSystemSettingData class representing a virtual system snapshot that was most recently applied to a virtual system, and the instance of the CIM_ComputerSystem class representing the related virtual system. An instance of this assocation indicates that the referenced snapshot is the snapshot the was last applied to the virtual system from the set of snapshots taken from that virtual system. For each virtual system at any time there is at most one snapshot the last applied snapshot. */ ( id SERIAL PRIMARY KEY , virtual_system_setting_data_id5 INTEGER REFERENCES virtual_system_setting_data(id) , computer_system_id6 INTEGER REFERENCES computer_system(id) ); 
        CREATE TABLE public.local_access_available_to_fs /* A link between ComputerSystem that has local access to a File System.The LocalAccessPoint property is the name used by the File Server to identify the File System. Sometimes referred to as a mount-point, for many Unix-based systems, it will be a qualified full pathname. For Windows systems it could also be the drive letter used for the LogicalDisk that the filesystem is resident on. */ ( id SERIAL PRIMARY KEY , computer_system_id6 INTEGER REFERENCES computer_system(id) , local_file_system_id7 INTEGER REFERENCES local_file_system(id) , local_access_point text[] ); 
        CREATE TABLE public.log_in_data_file /* MessageLogs can reside in data files, on specially allocated storage areas such as disks or memory, or output as raw I/O streams. In fact, a single Log may use each of these mechanisms to output or capture its contents. The LogInDataFile association describes a Log stored as a DataFile. */ ( id SERIAL PRIMARY KEY , data_file_id5 INTEGER REFERENCES data_file(id) , message_log_id6 INTEGER REFERENCES message_log(id) ); 
        CREATE TABLE public.log_in_device_file /* MessageLogs can reside in data files, on specially allocated storage areas such as disks or memory, or output as raw I/O streams. In fact, a single Log may use each of these mechanisms to output or capture its contents. The LogInDeviceFile association describes a Log outputting to a raw I/O stream DeviceFile - for example, a serial port on a UNIX system. */ ( id SERIAL PRIMARY KEY , device_file_id5 INTEGER REFERENCES device_file(id) , message_log_id6 INTEGER REFERENCES message_log(id) ); 
        CREATE TABLE public.log_in_storage /* MessageLogs can reside in data files, on specially allocated storage areas such as disks or memory, or output as raw I/O streams. In fact, a single Log may use each of these mechanisms to output or capture its contents. The LogInStorage association describes a Log located in a specially allocated portion of a StorageExtent. The offset of the Log, within the Extent, is defined using a property of the association, StartingOffset. */ ( id SERIAL PRIMARY KEY , storage_extent_id5 INTEGER REFERENCES storage_extent(id) , message_log_id6 INTEGER REFERENCES message_log(id) , starting_offset text[] ); 
        CREATE TABLE public.memory_mapped_io /* Personal Computer architecture Memory Mapped I/O. This class addresses both memory and port I/O resources. The property, MappedResource, defines whether memory or I/O is mapped (and for I/O whether the mapping is to a memory or a port space). */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , starting_address text[] , ending_address text[] , mapped_resource text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.memory_resource /* Since the MemoryMappedIO class applies to memory AND port resources, there is the potential for key conflict. For example, both a memory resource and a port resource may be located at address 0. Since StartingAddress is the distinguishing key of MemoryMappedIO, two instances would be created with the same key. This is prevented by defining memory and port resource subclasses of MemoryMappedIO, and allowing the CreationClassName key property to distinguish between them and force uniqueness in their keys. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , starting_address text[] , ending_address text[] , mapped_resource text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.nfs /* A class derived from RemoteFileSystem representing that the FileSystem is mounted, using the NFS protocol, from a ComputerSystem. The properties of the NFS object deal with the operational aspects of the mount and represent the client-side configuration for NFS access. The FileSystemType (inherited from FileSystem) should be set to indicate the type of this FileSystem as it appears to the client. */ ( id SERIAL PRIMARY KEY , hard_mount text[] , foreground_mount text[] , interrupt text[] , mount_failure_retries text[] , retransmission_attempts text[] , retransmission_timeout text[] , read_buffer_size text[] , write_buffer_size text[] , server_communication_port text[] , attribute_caching text[] , attribute_caching_for_regular_files_min text[] , attribute_caching_for_regular_files_max text[] , attribute_caching_for_directories_min text[] , attribute_caching_for_directories_max text[] , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , name text[] , root text[] , block_size text[] , file_system_size text[] , available_space text[] , read_only text[] , encryption_method text[] , compression_method text[] , case_sensitive text[] , case_preserved text[] , max_file_name_length text[] , cluster_size text[] , file_system_type text[] , persistence_type text[] , other_persistence_type text[] , number_of_files text[] , is_fixed_size text[] , resize_increment text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.nfs_share /* An NFSShare represents a Directory associated via CIM_SharedElement that is made accessible to other systems. On the client-side, the NFSShare is associated with its mount point via CIM_ImportedShare. */ ( id SERIAL PRIMARY KEY , name text[] , sharing_directory text[] , instance_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.os_process /* A link between the OperatingSystem and Process(es) running in the context of this OperatingSystem. */ ( id SERIAL PRIMARY KEY , operating_system_id7 INTEGER REFERENCES operating_system(id) , process_id8 INTEGER REFERENCES process(id) ); 
        CREATE TABLE public.operation_log /* CIM_OperationLog is a specialization of the CIM_UseOfMessageLog association that identifies a reproducible record of operations for a LogicalElement. */ ( id SERIAL PRIMARY KEY , message_log_id5 INTEGER REFERENCES message_log(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) , recorded_data text[] ); 
        CREATE TABLE public.port_resource /* Since the MemoryMappedIO class applies to memory AND port resources, there is the potential for key conflict. For example, both a memory resource and a port resource may be located at address 0. Since StartingAddress is the distinguishing key of MemoryMappedIO, two instances would be created with the same key. This is prevented by defining memory and port resource subclasses of MemoryMappedIO, and allowing the CreationClassName key property to distinguish between them and force uniqueness in their keys. */ ( id SERIAL PRIMARY KEY , cs_creation_class_name text[] , cs_name text[] , creation_class_name text[] , starting_address text[] , ending_address text[] , mapped_resource text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.process_thread /* A link between a Process and the Thread(s) running in the context of this Process. */ ( id SERIAL PRIMARY KEY , process_id7 INTEGER REFERENCES process(id) , thread_id8 INTEGER REFERENCES thread(id) ); 
        CREATE TABLE public.resides_on_extent /* An association between a LogicalElement and the StorageExtent where it is located. Typically, a FileSystem ResidesOn a LogicalDisk. However, it is possible for a logical file or other internal data store to reside directly on a StorageExtent or appropriate subclass. */ ( id SERIAL PRIMARY KEY , storage_extent_id5 INTEGER REFERENCES storage_extent(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) ); 
        CREATE TABLE public.resource_of_system /* An association between a System and a SystemResource that exists and is allocated in the context of the System. */ ( id SERIAL PRIMARY KEY , system_id7 INTEGER REFERENCES system(id) , system_resource_id8 INTEGER REFERENCES system_resource(id) ); 
        CREATE TABLE public.running_os /* RunningOS indicates the currently executing OperatingSystem. At most one OperatingSystem can execute at any time on a ComputerSystem. 'At most one' is specified, since the Computer System may not be currently booted, or its OperatingSystem may be unknown. */ ( id SERIAL PRIMARY KEY , operating_system_id5 INTEGER REFERENCES operating_system(id) , computer_system_id6 INTEGER REFERENCES computer_system(id) ); 
        CREATE TABLE public.sap_available_for_file_share /* CIM_SAPAvailableForFileShare conveys the semantics of a Service Access Point that is available for a ManagedElement. When CIM_SAPAvailableForElement is not instantiated, then the SAP is assumed to be generally available. If instantiated, the SAP is available only for the associated ManagedElements. For example, a device might provide management access through a URL. This association allows the URL to be advertised for the device. */ ( id SERIAL PRIMARY KEY , file_share_id5 INTEGER REFERENCES file_share(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
        CREATE TABLE public.snapshot_of_virtual_system /* The CIM_SnapshotOfVirtuaSystem association associates an instance of the CIM_ComputerSystem class representing a virtual system, and an instance of the CIM_VirtualSystemSettingData class representing a snapshot that was captured from the virtual system. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , virtual_system_setting_data_id6 INTEGER REFERENCES virtual_system_setting_data(id) ); 
        CREATE TABLE public.unitary_computer_system /* A class derived from ComputerSystem that represents a Desktop, Mobile, NetPC, Server or other type of a single node Computer System. */ ( id SERIAL PRIMARY KEY , last_load_info text[] , power_management_supported text[] , power_state text[] , wake_up_type text[] , name_format text[] , reset_capability text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.virtual_computer_system /* A class derived from ComputerSystem that represents the ability to virtualize or emulate another ComputerSystem. */ ( id SERIAL PRIMARY KEY , virtual_system text[] , name_format text[] , reset_capability text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.account_management_service /* CIM_AccountManagementService creates, manages, and if necessary destroys Accounts on behalf of other SecuritySerices. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.account_on_system /* A system (e.g., ApplicationSystem, ComputerSystem, AdminDomain) aggregates Accounts and scopes the uniqueness of the Account names (i.e., userids). */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , account_id7 INTEGER REFERENCES account(id) ); 
        CREATE TABLE public.authentication_service /* CIM_AuthenticationService verifies users' identities through some means. These services are decomposed into a subclass that provides credentials to users
        AND a subclass that provides for the verification of the validity of a credential and, perhaps, the appropriateness of its use for access to target resources. The persistent state information used
FROM one such verification to another is maintained IN an instance of Identity class. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.authorization_service /* CIM_AuthorizationService determines whether an Identity, established by an AuthorizationService, is permitted access to a resource
        OR SET of resources. */ ( id SERIAL PRIMARY KEY ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         name text[] ,
         primary_owner_name text[] ,
         primary_owner_contact text[] ,
         start_mode text[] ,
         started text[] ,
         lo_sid text[] ,
         lo_sorg_id text[] ,
         enabled_state text[] ,
         other_enabled_state text[] ,
         requested_state text[] ,
         enabled_default text[] ,
         time_of_last_state_change text[] ,
         transitioning_to_state text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.authorized_use /* CIM_AuthorizedUse is an association used to provide an AuthorizationService
WITH the AccessControlInformation it needs to do its job. This association is deprecated
WITH no proposed replacement, since authorization processing will be handled via policy
        OR static checking of Privileges. */ ( id SERIAL PRIMARY KEY , access_control_information_id6 INTEGER REFERENCES access_control_information(id) , authorization_service_id7 INTEGER REFERENCES authorization_service(id) ); 
        CREATE TABLE public.collection_in_system /* CIM_CollectionInSystem is deprecated IN lieu of CIM_OwningCollectionElement, which is semantically equivalent. CIM_CollectionInSystem is an association used to establish a parent-child relationship
    BETWEEN a collection
        AND an 'owning' System such AS an AdminDomain
        OR ComputerSystem. A single collection should NOT have both a CollectionInOrganization
        AND a CollectionInSystem association. */ ( id SERIAL PRIMARY KEY , system_id7 INTEGER REFERENCES system(id) , collection_id8 INTEGER REFERENCES collection(id) ); 
        CREATE TABLE public.credential_management_service /* CIM_CredentialManagementService issues credentials
        AND manages the credential lifecycle. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.hosted_aci /* CIM_HostedACI is an association used to provide the namespace scoping of AccessControlInformation. Since the referenced class, AccessControlInformation, is deprecated, this Weak association is similarly deprecated. Also, although Privileges/access control can be defined IN the context of a System, this is NOT a mandatory association nor does it provide any additional semantics for the Privilege. Therefore, HostedACI is deprecated
WITH no replacement association. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , access_control_information_id7 INTEGER REFERENCES access_control_information(id) ); 
CREATE TABLE public.hosted_authentication_requirement /* CIM_HostedAuthenticationRequirement is an association used to provide the namespace scoping of AuthenticationRequirement. The hosted requirements may
        OR may NOT apply to resources
    ON the hosting system. Since the AuthenticationRequirement class is deprecated IN lieu of explicit policy rules, this class is similarly deprecated to its 'policy' equivalent. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , authentication_requirement_id7 INTEGER REFERENCES authentication_requirement(id) ); 
    CREATE TABLE public.identity_management_service /* A service supporting the creation
        AND management of CIM_Identities . */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.kerberos_key_distribution_center /* The Kerberos KDC. */ ( id SERIAL PRIMARY KEY , name text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.key_based_credential_management_service /* CIM_KeyBasedCredentialManagementService manages key based credentials such AS symmetric
        AND assymetric key pairs
        AND certificates. It also manages the infrustracture necessary for the key based credentials such AS key repositories. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.local_credential_management_service /* CIM_LocalCredentialManagementService is a credential management service that provides management of credentials used by the local system. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.managed_credential /* This relationship associates a CredentialManagementService
WITH the Credential it manages. */ ( id SERIAL PRIMARY KEY , credential_management_service_id6 INTEGER REFERENCES credential_management_service(id) , credential_id7 INTEGER REFERENCES credential(id) ); 
CREATE TABLE public.manages_account /* This relationship associates the AccountManagement security service to the Accounts for which it is responsible. */ ( id SERIAL PRIMARY KEY , account_management_service_id5 INTEGER REFERENCES account_management_service(id) , account_id6 INTEGER REFERENCES account(id) ); 
CREATE TABLE public.notary /* CIM_Notary is an AuthenticationService which compares the biometric characteristics of a person
WITH known characteristics, to establish identity. An example is a bank teller who compares a picture ID
WITH the person trying to cash a check,
        OR a biometric login service that uses voice recognition to identify a 'user'. */ ( id SERIAL PRIMARY KEY , comparitors text[] , seal_protocol text[] , charter_issued text[] , charter_expired text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.notary_verifies_biometric /* This relationship associates a Notary service
WITH the Users Access whose biometric information is verified. It is deprecated since one of its references (UsersAccess) is deprecated,
        AND because specific biometric credentials are defined IN a new subclass of CIM_Credential (specifically, BiometricCredential). Given the latter, the relationship of a Credential to its management service (ManagedCredential) can be used directly. */ ( id SERIAL PRIMARY KEY , notary_id6 INTEGER REFERENCES notary(id) , users_access_id7 INTEGER REFERENCES users_access(id) ); 
        CREATE TABLE public.privilege_management_service /* The PrivilegeManagementService is responsible for creating, deleting,
        AND associating AuthorizedPrivilege instances. References to 'subject'
        AND 'target' define the entities that are associated
WITH an AuthorizedPrivilege instance via the relationships, AuthorizedSubject
        AND AuthorizedTarget, respectively.
    WHEN created, an AuthorizedPrivilege instance is related to this (PrivilegeManagement)Service via the association, ConcreteDependency. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.public_key_management_service /* CIM_PublicKeyManagementService is a credential management service that provides local system management of public keys used by the local system. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.require_credentials_from /* CIM_RequireCredentialsFrom is an association used to require that credentials are issued by particular CredentialManagement Services IN order to authenticate a user. This association is deprecated IN lieu of explicit declaration of the AuthenticationConditions IN an AuthenticationRule. Instances of AuthenticationCondition describe the specific combinations of credentials (or alternative credentials) that are required to authenticate an Identity. This allows a more explicit
        AND flexible description of authentication requirements. */ ( id SERIAL PRIMARY KEY , credential_management_service_id6 INTEGER REFERENCES credential_management_service(id) , authentication_requirement_id7 INTEGER REFERENCES authentication_requirement(id) ); 
        CREATE TABLE public.role_based_authorization_service /* The CIM_RoleBasedAuthorizationService class represents the authorization service that manages
        AND configures roles
    ON a managed system. The CIM_RoleBasedAuthorizationService is responsible for creating,
        AND deleting CIM_Role instances. Privileges of the roles are represented through the instance(s) of CIM_Privilege class associated to CIM_Role instances through the CIM_MemberOfCollection association. AS a result of creating,
        AND deleting CIM_Role instances the CIM_Privilege instances can also be affected. The limiting scope of the role is determined by the CIM_RoleLimitedToTarget association. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.security_service_for_system /* The CIM_SecurityServiceForSystem provides the association
    BETWEEN a System
        AND a SecurityService that provides services for that system. This association does NOT add any constraints
        OR semantics to ServiceAvailableToElement. AS a result, it is deprecated. */ ( id SERIAL PRIMARY KEY , security_service_id6 INTEGER REFERENCES security_service(id) , system_id7 INTEGER REFERENCES system(id) ); 
        CREATE TABLE public.service_uses_security_service /* This relationship associates a Service
WITH the Security Services that it uses. This association does NOT add any constraints
        OR semantics to ServiceServiceDependency. AS a result, it is deprecated. */ ( id SERIAL PRIMARY KEY , security_service_id6 INTEGER REFERENCES security_service(id) , service_id7 INTEGER REFERENCES service(id) , type_of_dependency text[] , restart_service text[] ); 
        CREATE TABLE public.shared_secret_service /* CIM_SharedSecretService is a service which ascertains whether messages received are
FROM the Principal
WITH whom a secret is shared. Examples include a login service that proves identity
    ON the basis of knowledge of the shared secret,
        OR a transport integrity service (like Kerberos provides) that includes a message authenticity code that proves each message IN the messsage stream came
FROM someone who knows the shared secret session key. */ ( id SERIAL PRIMARY KEY , algorithm text[] , protocol text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.storage_hardware_idmanagement_service /* StorageHardwareIDManagementService provides methods for manipulating instances of StorageHardwareIDs
        AND manipulating the trust of these IDs IN the underlying storage system. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.system_administrator /* CIM_SystemAdministrator is an association used to identify the UserEntity AS a system administrator of a CIM_System. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , user_entity_id6 INTEGER REFERENCES user_entity(id) ); 
        CREATE TABLE public.system_administrator_group /* CIM_SystemAdministratorGroup is an association used to identify a Group that has system administrator responsibilities for a CIM_System. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , group_id6 INTEGER REFERENCES public.group(id) ); 
        CREATE TABLE public.system_administrator_role /* CIM_SystemAdministratorRole is an association used to identify a system administrator Role for a CIM_System. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , role_id6 INTEGER REFERENCES role(id) ); 
        CREATE TABLE public.trust_hierarchy /* CIM_TrustHierarchy is an association
    BETWEEN two CredentialManagementService instances that establishes the trust hierarchy
    BETWEEN them. */ ( id SERIAL PRIMARY KEY , credential_management_service_id5 INTEGER REFERENCES credential_management_service(id) , credential_management_service_id6 INTEGER REFERENCES credential_management_service(id) ); 
    CREATE TABLE public.verification_service /* CIM_VerificationService is the authentication service that verifies a credential for use
        AND may also verify the appropriateness of a particular credential IN conjunction
WITH a particular target resource. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.action /* A CIM_Action is an operation that is part of a process to either create a SoftwareElement IN its next state
        OR to eliminate the SoftwareElement IN its current state. A CIM_ComputerSystem object represents the environment IN which CIM_SoftwareElements are already deployed/installed
        OR into which the elements will be deployed/installed. For the
    CASE IN which an element is already installed, the CIM_InstalledSoftwareElement association identifies the CIM_ComputerSystem object that represents the "environment".
    WHEN a SoftwareElement is being deployed for installation
    ON a ComputerSystem, that system is the target of the Action
        AND is identified
USING the TargetSystem reference of the InvokeOnSystem method. */ ( id SERIAL PRIMARY KEY , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.action_sequence /* The CIM_ActionSequence association defines a series of operations that either transition a SoftwareElement, referenced by the CIM_SoftwareElementActions association, to the next state
        OR removes the element
FROM its current state. The Action classes participating IN this association must have the same value for the Action.Direction property - since they are either part of a sequence to transition a SoftwareElement into its next state
        OR to uninstall it. The next-state
        AND uninstall Actions associated
WITH a particular SoftwareElement must be a continuous sequence. ActionSequence is an association that loops
    ON the Action classes
WITH roles for the 'prior'
        AND 'next' Actions IN the sequence. The need for a continuous sequence imples: (1)Within the SET of next-state
        OR uninstall Actions, there is one
        AND only one Action that does NOT have an instance of ActionSequence referencing it IN the 'next' role. This is the first Action IN the sequence. (2) Within the SET of next-state
        OR uninstall Actions, there is one
        AND only one Action that does NOT have an instance of ActionSequence referencing it IN the 'prior' role. This is the last Action IN the sequence. (3) ALL other Actions within the SET of next-state
        AND uninstall Actions must participate IN two instances of ActionSequence, one IN a 'prior' role
        AND the other IN the 'next' role. */ ( id SERIAL PRIMARY KEY , action_id5 INTEGER REFERENCES action(id) , action_id6 INTEGER REFERENCES action(id) ); 
        CREATE TABLE public.application_system /* The ApplicationSystem class represents an application
        OR a software system that supports a particular business function
        AND that can be managed AS an independent unit. Such a system can be decomposed into its functional components
USING the CIM_SoftwareFeature class. The Features for a particular application
        OR software system are located
USING the CIM_ApplicationSystemSoftwareFeature association. The features are part of the deployment-oriented aspects of the application system.
WITH regard to the application runtime aspects, the ApplicationSystem class also represents the core class of the Application Systems' sub-model which of the application runtime model. Its role in the systems sub-model is a) the root node of the containment hierarchy of the application elements (at runtime) as services, components, sub-systems, etc., b) the place for runtime overview information such as response time or system status, c) runtime control of the entire application (e.g., start/stop), and d) the main entry point to the navigation through and drill-down into the runtime model. The lifetime of an instance of this class is not limited to the application instance it represents. Even if the application is not running, the ApplicationSystem object can report properties that have values (e.g., the name of the application or the current status). Note that it is also possible to define the lifetime of the objects through the lifetime of the application instances. Through ApplicationSystemDependency, non-containment relationships can be expressed. */ ( id SERIAL PRIMARY KEY , distribution text[] , enabled_state text[] , startup_time text[] , serving_status text[] , last_serving_status_update text[] , creation_class_name text[] , name text[] , name_format text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.application_system_dependency /* This dependency expresses use-relationships or other logical interactions between application systems. At the business level, the relationship could be due to a distributed business process. Viewed from the technical level, the relationship is to be interpreted as communication between application systems. ApplicationSystemDependency primarily expresses 'horizontal' relationships, i.e., relationships between distributed or local application systems. */ ( id SERIAL PRIMARY KEY , application_system_id5 INTEGER REFERENCES application_system(id) , application_system_id6 INTEGER REFERENCES application_system(id) ); 
CREATE TABLE public.application_system_directory /* CIM_ApplicationSystemDirectory is an association used to establish a relationship between an ApplicationSystem and the Directories that it uses. This is used to identify the single root installation directory for an ApplicationSystem, as well as the logical purpose of other directories utilized by the ApplicationSystem. Note: This class is intended to be a subclass of CIM_Dependency but the current specification prohibits the extension of parent keys in a subclass. This will be revisited when the specification changes to make the intended inheritance possible. */ ( id SERIAL PRIMARY KEY , directory_id5 INTEGER REFERENCES directory(id) , application_system_id6 INTEGER REFERENCES application_system(id) , name text[] ); 
CREATE TABLE public.application_system_hierarchy /* Application systems may have arbitrarily complex structures. It may be necessary to build application system hierarchies including the two-step hierarchy of distributed and local systems. ApplicationSystemHierarchy allows building containment trees (only one parent at a time). It should not be used to express use-relationships; use CIM_ApplicationSystemDependency instead. */ ( id SERIAL PRIMARY KEY , application_system_id6 INTEGER REFERENCES application_system(id) , application_system_id7 INTEGER REFERENCES application_system(id) ); 
CREATE TABLE public.application_system_software_feature /* The ApplicationSystemSoftwareFeature association identifies the Features that make up a particular ApplicationSystem. The SoftwareFeatures can be scoped by different Products. */ ( id SERIAL PRIMARY KEY , application_system_id6 INTEGER REFERENCES application_system(id) , software_feature_id7 INTEGER REFERENCES software_feature(id) ); 
CREATE TABLE public.associated_app_system_overview_statistics /* The link to the runtime overview statistics of an application system. */ ( id SERIAL PRIMARY KEY , application_system_id5 INTEGER REFERENCES application_system(id) , statistical_runtime_overview_id6 INTEGER REFERENCES statistical_runtime_overview(id) ); 
CREATE TABLE public.check_ /* A CIM_Check is a condition or characteristic that is expected to be true in an environment defined or scoped by an instance of a CIM_ComputerSystem. The Checks associated with a particular SoftwareElement are organized into one of two groups using the Phase property of the CIM_SoftwareElementChecks association. Conditions that are expected to be true when a SoftwareElement is in a particular state and environment are known as 'in-state' conditions. Conditions that need to be satisfied in order to transition the SoftwareElement to its next state are known as 'next-state' conditions. A CIM_ComputerSystem object represents the environment in which CIM_SoftwareElements are already deployed/installed or into which the elements will be deployed/installed. For the case in which an element is already installed, the CIM_InstalledSoftwareElement association identifies the CIM_ComputerSystem object that represents the "environment". When a SoftwareElement is being deployed for installation on a ComputerSystem, that system is the target of the Check and is identified using the TargetSystem reference of the InvokeOnSystem method. */ ( id SERIAL PRIMARY KEY , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.directory_action /* DirectoryAction is an abstract class used to manage directories. The creation of directories is handled by CreateDirectoryAction and removal is handled by RemoveDirectoryAction. */ ( id SERIAL PRIMARY KEY , directory_name text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.directory_specification /* The CIM_DirectorySpecification class captures the major directory structure of a SoftwareElement. This class is used to organize the files of a SoftwareElement into manageable units that can be relocated on a computer system. */ ( id SERIAL PRIMARY KEY , directory_type text[] , directory_path text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.disk_space_check /* DiskSpaceCheck describes the amount of disk space that needs to be available on the computer system. The amount is specified in the AvailableDiskSpace property. The details of this Check are compared with the value of the CIM_FileSystem. AvailableSpace property - where the CIM_FileSystem object is related (using HostedFileSystem) to the CIM_Computer System instance that describes the environment. When the value of the AvailableSpace property is greater than or equal to the value specified in AvailableDiskSpace, the Check is satisfied. */ ( id SERIAL PRIMARY KEY , available_disk_space text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.execute_program /* ExecuteProgram causes programs to be executed on the computer system that defines the Action's environment. */ ( id SERIAL PRIMARY KEY , program_path text[] , command_line text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.file_action /* FileAction locates files that already exist
    ON the CIM_ ComputerSystem that defines the Action's environment. These files are removed or moved/copied to a new location. */ ( id SERIAL PRIMARY KEY , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.file_specification /* FileSpecification identifies a file that is either to be on or off the system. The file is to be located in the directory identified in FileName, or by the CIM_Directory SpecificationFile association. When the Invoke methods are executed, it is expected that they will use a combination of information to check for file existence. Therefore, any of the properties with a NULL value are not checked. So, if only the FileName and MD5Checksum properties have values, they are the only ones considered by the Invoke methods. */ ( id SERIAL PRIMARY KEY , file_name text[] , create_time_stamp text[] , file_size text[] , check_sum text[] , crc1 text[] , crc2 text[] , md5_checksum text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.from_directory_action /* The FromDirectoryAction association identifies the source directory for a FileAction. When this association is used, the assumption is that the source directory was created by a previous Action. This association cannot co-exist with a FromDirectorySpecification association, since a FileAction can only involve a single source directory. */ ( id SERIAL PRIMARY KEY , directory_action_id5 INTEGER REFERENCES directory_action(id) , file_action_id6 INTEGER REFERENCES file_action(id) ); 
    CREATE TABLE public.from_directory_specification /* The FromDirectorySpecification association identifies the source directory for a FileAction. When this association is used, the assumption is that the source directory already exists. This association cannot co-exist with a FromDirectoryAction association, since a FileAction can only involve a single source directory. */ ( id SERIAL PRIMARY KEY , directory_specification_id5 INTEGER REFERENCES directory_specification(id) , file_action_id6 INTEGER REFERENCES file_action(id) ); 
    CREATE TABLE public.installed_software_element /* The InstalledSoftwareElement association allows the identification of the ComputerSystem on which a particular SoftwareElement is installed. */ ( id SERIAL PRIMARY KEY , software_element_id5 INTEGER REFERENCES software_element(id) , computer_system_id6 INTEGER REFERENCES computer_system(id) ); 
    CREATE TABLE public.j2ee_app_client_module /* CIM_J2eeAppClientModule identifies a deployed Application Client Module. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_application /* CIM_J2eeApplication identifies a J2EE application that resides on a J2ee Server. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , distribution text[] , enabled_state text[] , startup_time text[] , serving_status text[] , last_serving_status_update text[] , creation_class_name text[] , name_format text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_application_module /* The CIM_J2eeApplicationModule association identifies a software module for a particular J2EE Application. */ ( id SERIAL PRIMARY KEY , j2ee_application_id6 INTEGER REFERENCES j2ee_application(id) , j2ee_module_id7 INTEGER REFERENCES j2ee_module(id) ); 
    CREATE TABLE public.j2ee_ejbmodule /* CIM_J2eeEJBModule identifies a deployed EJB module and is a container for CIM_J2eeEJBs. */ ( id SERIAL PRIMARY KEY , name text[] , deployment_descriptor text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jcaconnection_factory_managed_connection_factory /* CIM_J2eeJCAConnectionFactoryManagedConnectionFactory identifies the JCA managed connection factory associated with the corresponding JCA connection factory . */ ( id SERIAL PRIMARY KEY , j2ee_jcaconnection_factory_id5 INTEGER REFERENCES j2ee_jcaconnection_factory(id) , j2ee_jcamanaged_connection_factory_id6 INTEGER REFERENCES j2ee_jcamanaged_connection_factory(id) ); 
    CREATE TABLE public.j2ee_jcaresource /* CIM_J2eeJCAResource identifies a JCA resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jdbcdata_source_driver /* CIM_J2eeJDBCDataSourceDriver associates the JDBC driver with a JDBC data source. */ ( id SERIAL PRIMARY KEY , j2ee_jdbcdata_source_id5 INTEGER REFERENCES j2ee_jdbcdata_source(id) , j2ee_jdbcdriver_id6 INTEGER REFERENCES j2ee_jdbcdriver(id) ); 
    CREATE TABLE public.j2ee_jdbcresource /* CIM_J2eeJDBCResource identifies a JDBC resource. A JDBC resource manages one or more JDBC data sources. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jdbcresource_uses_data_source /* CIM_J2eeJDBCResourceUsesDataSource is an association that identifies the JDBC data sources that are available to a CIM_J2eeJDBCResource. */ ( id SERIAL PRIMARY KEY , j2ee_jdbcresource_id5 INTEGER REFERENCES j2ee_jdbcresource(id) , j2ee_jdbcdata_source_id6 INTEGER REFERENCES j2ee_jdbcdata_source(id) ); 
    CREATE TABLE public.j2ee_jmsresource /* CIM_J2eeJMSResource identifies a JMS resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jndiresource /* CIM_J2eeJNDIResource identifies a Java Naming and Directory Interface (JNDI) resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_jtaresource /* CIM_J2eeJTAResource identifies a Java Transaction API (JTA) resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_java_mail_resource /* CIM_J2eeJavaMailResource identifies a JavaMail resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_rmi__iiopresource /* CIM_J2eeRMI_IIOPResource identifies an RMI_IIOP resource. */ ( id SERIAL PRIMARY KEY , instance_id text[] , name text[] , shareable text[] , implementation_info text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_resource_adapter_in_module /* CIM_J2eeResourceAdapterInModule is an aggregation of the resource adapters contained within a deployed RAR Module. */ ( id SERIAL PRIMARY KEY , j2ee_resource_adapter_module_id6 INTEGER REFERENCES j2ee_resource_adapter_module(id) , j2ee_resource_adapter_id7 INTEGER REFERENCES j2ee_resource_adapter(id) ); 
    CREATE TABLE public.j2ee_server /* The CIM_J2eeServer class represents the J2EE Server core of one instance of a J2EE platform product as described in the Java 2 Enterprise Edition Platform specification. */ ( id SERIAL PRIMARY KEY , name text[] , vendor text[] , version text[] , distribution text[] , enabled_state text[] , startup_time text[] , serving_status text[] , last_serving_status_update text[] , creation_class_name text[] , name_format text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.j2ee_server_uses_jvm /* The association between a J2EE server and the Java virtual machine on which the J2EE server has running threads. */ ( id SERIAL PRIMARY KEY , j2ee_jvm_id5 INTEGER REFERENCES j2ee_jvm(id) , j2ee_server_id6 INTEGER REFERENCES j2ee_server(id) ); 
    CREATE TABLE public.j2ee_servlet_in_module /* CIM_J2eeServletInModule is a aggregation of the servlet components within a deployed WAR module. */ ( id SERIAL PRIMARY KEY , j2ee_web_module_id6 INTEGER REFERENCES j2ee_web_module(id) , j2ee_servlet_id7 INTEGER REFERENCES j2ee_servlet(id) ); 
    CREATE TABLE public.memory_check /* MemoryCheck specifies a condition for the minimum amount of memory that needs to be available on a system. The amount is specified in the MemorySize property. The details of this Check are compared with the value of the CIM_OperatingSystem. FreePhysicalMemory property - where the CIM_OperatingSystem object is related (using InstalledOS) to the CIM_Computer System instance that describes the environment. When the value of the FreePhysicalMemory property is greater than or equal to the value specified in MemorySize, the Check is satisfied. */ ( id SERIAL PRIMARY KEY , memory_size text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.modify_setting_action /* This class specifies the information used to modify a 'setting' file, for a specific entry in the file. The new 'setting' value is created as a new entry or appends to, replaces, removes from, or deletes the specified entry. All additions are assumed to be case sensitive. Removes are assumed to be case insensitive. */ ( id SERIAL PRIMARY KEY , section_key text[] , entry_name text[] , entry_value text[] , file_name text[] , action_type text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.os_version_check /* The OSVersionCheck class specifies the versions of the operating system that can support/execute this Software Element. The operating system itself (whose version should be validated) is defined in the TargetOperatingSystem property of the Check's scoping SoftwareElement. This Check can be for a specific, minimum, maximum
        OR a range of releases of an OS. To identify a specific version of the OS, the minimum
        AND maximum versions must be the same. To specify a minimum, only the minimum version needs to be defined. To specify a maximum version, only the maximum version needs to be defined. To specify a range, both minimum
        AND maximum versions need to be defined. The data gathered
FROM the Check
        AND SoftwareElement objects are compared
WITH the corresponding details found IN the CIM_OperatingSystem object (referenced by the InstalledOS association), for the CIM_ComputerSystem object that defines the environment. The OSType property of CIM_OperatingSystem must match the value of CIM_SoftwareElement.TargetOperating System. Also, the OS' version information should be within the range of CIM_OSVersionCheck.Minimum/MaximumValue properties. Note that all the operating systems on the relevant computer do not need to satisfy the Check. */ ( id SERIAL PRIMARY KEY , minimum_version text[] , maximum_version text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.reboot_action /* RebootAction causes a reboot of the computer system that defines the Action's environment. */ ( id SERIAL PRIMARY KEY , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.remove_directory_action /* RemoveDirectoryAction removes directories
FROM the computer system that defines the Action's environment. */ ( id SERIAL PRIMARY KEY , must_be_empty text[] , directory_name text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.remove_file_action /* The RemoveFileAction uninstalls files. */ ( id SERIAL PRIMARY KEY , file text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.setting_check /* This class specifies information needed to verify a particular 'setting' file, for a specific entry in the file. The file entry is checked whether it contains or matches the value defined in EntryValue. All compares are assumed to be case insensitive. */ ( id SERIAL PRIMARY KEY , section_key text[] , entry_name text[] , entry_value text[] , check_type text[] , file_name text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.software_element_actions /* This association identifies the Actions for a Software Element. */ ( id SERIAL PRIMARY KEY , software_element_id6 INTEGER REFERENCES software_element(id) , action_id7 INTEGER REFERENCES action(id) ); 
CREATE TABLE public.software_element_checks /* This association ties a SoftwareElement to a specific Check to validate its state or its movement to the next state. Note that SoftwareElements in a running state cannot transition to another state. Therefore, the value of the Phase property is restricted to 0 ("In-State") for SoftwareElements in the running state. */ ( id SERIAL PRIMARY KEY , software_element_id6 INTEGER REFERENCES software_element(id) , check_id7 INTEGER REFERENCES check_(id) , phase text[] ); 
CREATE TABLE public.software_element_version_check /* SoftwareElementVersionCheck specifies the release of a SoftwareElement that must exist in the environment. This Check can be for a specific, minimum, maximum or a range of versions. To specify a specific version, the lower and upper versions must be the same. To specify a minimum, only the lower version needs to be defined. To specify a maximum version, only the upper version needs to be defined. To specify a range, both upper and lower versions need to be defined. The details of this Check are compared with the corresponding details found in a CIM_SoftwareElement object, associated to the CIM_ComputerSystem instance that describes the environment (related by the association, CIM_InstalledSoftwareElement). There should be at least one CIM_SoftwareElement that satisfies the details of the Check. In other words, all the SoftwareElements on the relevant computer system do not need to satisfy the Check. */ ( id SERIAL PRIMARY KEY , software_element_name text[] , lower_software_element_version text[] , upper_software_element_version text[] , software_element_state_desired text[] , target_operating_system_desired text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.swap_space_check /* SwapSpaceCheck specifies the amount of swap space that needs to be available on the computer system. The amount is specified in the SwapSpaceSize property. The details of this Check are compared with the value of the CIM_OperatingSystem. TotalSwapSpaceSize property - where the CIM_OperatingSystem object is related (using RunningOS) to the CIM_Computer System instance that describes the environment. When the value of TotalSwapSpaceSize property is greater than or equal to the value specified in SwapSpaceSize, the Check is satisfied. */ ( id SERIAL PRIMARY KEY , swap_space_size text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.system_bios /* SystemBIOS associates a UnitaryComputerSystem's BIOS
WITH the System itself. */ ( id SERIAL PRIMARY KEY , computer_system_id6 INTEGER REFERENCES computer_system(id) , bios_element_id7 INTEGER REFERENCES bios_element(id) ); 
CREATE TABLE public.version_compatibility_check /* The VersionCompatibilityCheck class specifies whether it is permissible to create the next state of a SoftwareElement. */ ( id SERIAL PRIMARY KEY , allow_down_version text[] , allow_multiple_versions text[] , reinstall text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.active_connection /* This association defines a connection that is currently communicating,
        OR is configured to communicate,
    BETWEEN two ServiceAccessPoints. It is used
    WHEN the connection is NOT treated AS a ManagedElement itself (that is,
WITH Status, statistics,
        AND so on), but its existence is known. The SAPs that are connected are typically at the same networking
        OR application layer. */ ( id SERIAL PRIMARY KEY , service_access_point_id5 INTEGER REFERENCES service_access_point(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) , traffic_type text[] , other_traffic_description text[] , is_unidirectional text[] ); 
        CREATE TABLE public.admin_domain /* This is a special grouping of ManagedSystemElements. The grouping is viewed AS a single entity, reflecting that ALL of its components are administered similarly, either by the same user, group of users,
        OR policy. It serves AS an aggregation point to associate one
        OR more of the following elements: network devices, such AS routers
        AND switches, servers,
        AND other resources that can be accessed by
    END systems. This grouping of devices plays an essential role IN ensuring that the same administrative policy
        AND actions are applied to ALL of the devices IN the grouping. The specific behavior and/or semantics of the AdminDomain can be identified through its aggregated
        AND associated entities. */ ( id SERIAL PRIMARY KEY , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.associated_power_management_service /* The association
    BETWEEN a Managed System Element
        AND its power management service. */ ( id SERIAL PRIMARY KEY , power_management_service_id5 INTEGER REFERENCES power_management_service(id) , managed_element_id6 INTEGER REFERENCES managed_element(id) , power_state text[] , other_power_state text[] , requested_power_state text[] , other_requested_power_state text[] , power_on_time text[] , transitioning_to_power_state text[] ); 
        CREATE TABLE public.based_on /* BasedOn is an association describing how StorageExtents can be assembled
FROM lower level Extents. For example, ProtectedSpaceExtents are parts of PhysicalExtents, while VolumeSets are assembled
FROM one
        OR more Physical
        OR ProtectedSpaceExtents. AS another example, CacheMemory can be defined independently
        AND realized IN a PhysicalElement
        OR can be 'based on' Volatile
        OR NonVolatileStorageExtents. */ ( id SERIAL PRIMARY KEY , storage_extent_id5 INTEGER REFERENCES storage_extent(id) , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.binds_to /* This association establishes a ServiceAccessPoint AS a requestor of protocol services
FROM a ProtocolEndpoint. Typically, this association runs
    BETWEEN SAPs
        AND endpoints
    ON a single system. Because a ProtocolEndpoint is a kind of ServiceAccessPoint, this binding can be used to establish a layering of two protocols,
WITH the upper layer represented by the Dependent
        AND the lower layer represented by the Antecedent. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
        CREATE TABLE public.configuration_for_system /* Note: The use of this element is deprecated. Deprecated description: CIM_ConfigurationForSystem defines a Configuration IN the context of the System
    ON which it is located. Because the Configuration class is deprecated, this association is similarly deprecated. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , system_configuration_id7 INTEGER REFERENCES system_configuration(id) ); 
    CREATE TABLE public.contained_domain /* A relationship that aggregates one
        OR more lower-level AdminDomain instances into a higher-level AdminDomain. */ ( id SERIAL PRIMARY KEY , admin_domain_id6 INTEGER REFERENCES admin_domain(id) , admin_domain_id7 INTEGER REFERENCES admin_domain(id) ); 
        CREATE TABLE public.device_sapimplementation /* An association
    BETWEEN a ServiceAccessPoint (SAP)
        AND how it is implemented. The cardinality of this association is many-to-many. A SAP can be provided by more than one LogicalDevice, operating IN conjunction. And, any Device can provide more than one ServiceAccessPoint.
    WHEN many LogicalDevices are associated
WITH a single SAP, it is assumed that these elements operate IN conjunction to provide the AccessPoint. If different implementations of a SAP exist, each of these implementations would result IN individual instantiations of the ServiceAccessPoint object. These individual instantiations would THEN
    have associations to the unique implementations. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
    CREATE TABLE public.device_service_implementation /* An association
    BETWEEN a Service
        AND how it is implemented. The cardinality of this association is many-to-many. A Service can be provided by more than one Logical Device, operating IN conjunction. And, any Device can provide more than one Service.
    WHEN multiple Devices are associated
WITH a single Service, it is assumed that these elements operate IN conjunction to provide the Service. If different implementations of a Service exist, each of these implementations would result IN individual instantiations of the Service object. These individual instantiations would THEN
    have associations to the unique implementations. */ ( id SERIAL PRIMARY KEY , logical_device_id5 INTEGER REFERENCES logical_device(id) , service_id6 INTEGER REFERENCES service(id) ); 
    CREATE TABLE public.device_statistics /* DeviceStatistics relates the DeviceStatisticalInformation class to the LogicalDevice to which it applies. */ ( id SERIAL PRIMARY KEY , device_statistical_information_id5 INTEGER REFERENCES device_statistical_information(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
    CREATE TABLE public.extent_redundancy_component /* Describes the StorageExtents participating IN a Storage RedundancyGroup. The use of this class is being deprecated IN lieu of
USING MemberOfCollection IN conjunction
WITH StorageRedundancySet. */ ( id SERIAL PRIMARY KEY , storage_redundancy_group_id7 INTEGER REFERENCES storage_redundancy_group(id) , storage_extent_id8 INTEGER REFERENCES storage_extent(id) ); 
CREATE TABLE public.hosted_access_point /* CIM_HostedAccessPoint is an association
    BETWEEN a Service AccessPoint
        AND the System
    ON which it is provided. The cardinality of this association is one-to-many
        AND is weak
WITH respect to the System. Each System can host many ServiceAccessPoints. Heuristic: If the implementation of the ServiceAccessPoint is modeled, it must be implemented by a Device
        OR SoftwareFeature that is part of the System that is hosting the ServiceAccessPoint. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) ); 
        CREATE TABLE public.hosted_collection /* HostedCollection defines a SystemSpecificCollection IN the context of a scoping System. It represents a Collection that has meaning only IN the context of a System, a Collection whose elements are restricted by the definition of the System,
        OR both of these types of Collections. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , system_specific_collection_id6 INTEGER REFERENCES system_specific_collection(id) ); 
        CREATE TABLE public.hosted_ipinterface /* HostedIPInterface provides an association
    BETWEEN a layer 3 interface, represented AS a CIM_IPProtocolEndpoint
        AND the System
    ON which it is provided. */ ( id SERIAL PRIMARY KEY , ip_protocol_endpoint_id5 INTEGER REFERENCES ip_protocol_endpoint(id) , system_id6 INTEGER REFERENCES system(id) ); 
    CREATE TABLE public.hosted_resource_pool /* HostedResourcePool is a specialization of the SystemComponent association that establishes that the ResourcePool is defined IN the context of the System */ ( id SERIAL PRIMARY KEY , system_id7 INTEGER REFERENCES system(id) , resource_pool_id8 INTEGER REFERENCES resource_pool(id) ); 
    CREATE TABLE public.hosted_service /* CIM_HostedService is an association
    BETWEEN a Service
        AND the System
    ON which the functionality is located. The cardinality of this association is one-to-many. A System can host many Services. Services are weak
WITH respect to their hosting System. Heuristic: A Service is hosted
    ON the System
WHERE the LogicalDevices
        OR SoftwareFeatures that implement the Service are located. The model does NOT represent Services hosted across multiple systems. The model is AS an ApplicationSystem that acts AS an aggregation point for Services that are each located
    ON a single host. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , service_id6 INTEGER REFERENCES service(id) ); 
    CREATE TABLE public.installed_software_identity /* The InstalledSoftwareIdentity association identifies the System
    ON which a SoftwareIdentity is installed. This class is a corollary to InstalledSoftwareElement, but deals
WITH the asset aspects of software (as indicated by SoftwareIdentity), versus the deployment aspects (as indicated by SoftwareElement). */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , software_identity_id6 INTEGER REFERENCES software_identity(id) ); 
CREATE TABLE public.launch_in_context_sap /* Each instance provides a flexible representation of a URI stored IN the AccessInfo property that is used to launch a management service. This URI may contain dynamic information IN the form of parameters that can used to modify the URI for use IN a specific context. */ ( id SERIAL PRIMARY KEY , access_context text[] , access_info text[] , info_format text[] , management_is_restricted text[] , launch_message text[] , launch_message_protocol_operation text[] , other_info_format_description text[] , other_access_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.launch_in_context_service /* The LaunchInContext service provides the means for a client to manage information naming external services that are available to manage resources represented by instances IN the containing CIM Namespace. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.opaque_management_data /* A class derived
FROM StorageExtent that describes opaque management data IN managed systems. The structure
        AND semantics of opaque management data, which may be standardized
        OR proprietary, are assumed to be known by at least one management client, but need NOT be known by the CIM server. The UntransformedDataFormat property identifies the structure
        AND semantics of the data. Opaque management data are typically stored IN non-volatile memory that is accessible to the server. Management clients are able to read
        AND write opaque data, to manage their lifetime,
        AND to configure the access rights associated
WITH them. The non-volatile storage is often used AS a mailbox,
WITH local management agents producing data for consumption by remote management clients,
        OR vice versa. This class is NOT intended AS a general-purpose opaque alternative to any existing
        OR planned CIM classes. It is expressly intended for the mailbox usage model described above. */ ( id SERIAL PRIMARY KEY , max_size text[] , last_accessed text[] , write_limited text[] , data_format text[] , data_size text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.opaque_management_data_service /* A class derived
FROM Service that contains global properties of the opaque management data functionality IN the CIM server,
        AND provides methods for
USING this functionality. */ ( id SERIAL PRIMARY KEY , available_storage text[] , lock_timeout text[] , max_create_size text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.protocol_service /* ProtocolService represents represents an application layer service available
    ON a hosting system. Often times, the service name reflects the employed/supported communication protocol (e.g. file transfer - FTP), however IN some other cases it does not. (e.g. mail notification service - biff). Access to the service is modeled
WITH one
        OR more instances of ProtocolEndpoint. This class represents the availability of the function
    ON the system. Issuing a stop to this instance is equivalent to disabling the functionality
        AND making it unavailable to users. Thus a stop of this service will result IN the removing of ALL ProtocolEndpoints which are associated
WITH the instance via ServicAccessBySAP. The functionality can be made available again by issuing a start to the service. This class contains service definitions which are currently needed. Future extensions are expected. */ ( id SERIAL PRIMARY KEY , protocol text[] , other_protocol text[] , max_connections text[] , current_active_connections text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.provides_endpoint /* This association represents a ProtocolEndpoint that is provided by a Service to allow access to the Service. */ ( id SERIAL PRIMARY KEY , service_id5 INTEGER REFERENCES service(id) , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) ); 
CREATE TABLE public.raw_memory /* Describes unconfigured memory capacity. Instances of RawMemory become available to the operating system through some configuration process
        OR are consumed internally AS metadata storage, a cache tier, etc. */ ( id SERIAL PRIMARY KEY , primordial text[] , volatile text[] , error_methodology text[] , starting_address text[] , ending_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , error_address text[] , system_level_address text[] , error_resolution text[] , data_organization text[] , purpose text[] , access text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.remote_port /* RemotePort adds port information to the access data (such AS IP Address) that is specified in
        AND inherited
FROM RemoteServiceAccessPoint. For example,
USING the additional properties IN this class, you could indicate that UDP Port 123 is accessed at IP Address xyz. The IP Address would be specified IN the inherited AccessInfo property, while the UDP Port number would be specified IN the PortInfo property of this class. */ ( id SERIAL PRIMARY KEY , port_info text[] , port_protocol text[] , other_protocol_description text[] , access_info text[] , info_format text[] , other_info_format_description text[] , access_context text[] , other_access_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.scoped_view /* CIM_ScopedView is used to associate an instance of CIM_System
WITH a View instance representing the denormalized view of a managed resource related to the system. The type of relationship is NOT constrained. Examples include hosting, aggregation, composition, dependencies, etc. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , view_id6 INTEGER REFERENCES view(id) ); 
CREATE TABLE public.setting_for_system /* CIM_SettingForSystem defines a Setting IN the context of the System
    ON which it is located. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , system_setting_id6 INTEGER REFERENCES system_setting(id) ); 
    CREATE TABLE public.system_device_view /* This aggregates LogicalDevice view class instances to the CIM_System that scopes the underlying devices of the LogicalDeviceView Classes. */ ( id SERIAL PRIMARY KEY , system_id6 INTEGER REFERENCES system(id) , logical_device_view_id7 INTEGER REFERENCES logical_device_view(id) ); 
    CREATE TABLE public.virtual_system_management_service /* Service to define
        AND manipulate virtual systems
        AND their components */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.virtual_system_snapshot_service /* Service to create, apply
        AND destroy snapshots of virtual systems. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.visible_memory /* Describes an operating system visible memory extent. The term visible AS used here indicates that the memory has been mapped directly
        OR indirectly into the system address space. */ ( id SERIAL PRIMARY KEY , access_granularity text[] , replication text[] , process_affinity text[] , volatile text[] , error_methodology text[] , starting_address text[] , ending_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , error_address text[] , system_level_address text[] , error_resolution text[] , data_organization text[] , purpose text[] , access text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.database_storage /* Databases are comprised of a collection of logical storage areas that are represented by instances of the DatabaseStorageArea class. The DatabaseStorage class represents the relationship
    BETWEEN a CommonDatabase
        AND the storage areas that it uses. */ ( id SERIAL PRIMARY KEY , common_database_id6 INTEGER REFERENCES common_database(id) , database_storage_area_id7 INTEGER REFERENCES database_storage_area(id) ); 
        CREATE TABLE public.database_system /* A database environment is composed of a database system (the application system represented by this class), one
        OR more database services,
        AND one
        OR more databases. See the descriptions of CIM_DatabaseService
        AND CIM_CommonDatabase for get more detailed information about database services
        AND databases. Each separately manageable database system should have an instance IN this class. This class can be used: - to determine the software that belongs to the database system. - to perform database system-wide management operations, such AS stopping ALL the databases that were created by the database system for maintenance purposes. - to view runtime statistics IN the context of a database system. Many of the management capabilities that are needed to represent a database system AS an application system have already been modeled IN the CIM_ApplicationSystem class
FROM which CIM_DatabaseSystem extends. CIM_DatabaseSystem provides a logical entity to define the relationships that are specific to the database management domain. */ ( id SERIAL PRIMARY KEY , distribution text[] , enabled_state text[] , startup_time text[] , serving_status text[] , last_serving_status_UPDATE text[] , creation_class_name text[] , name text[] , name_format text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.agp_video_controller /* Capabilities
        AND management of an AGPVideoController. */ ( id SERIAL PRIMARY KEY , nonlocal_video_memory_size text[] , local_bus_width text[] , usage_model text[] , data_transfer_rate text[] , addressing_mode text[] , maximum_agpcommand_queue_path text[] , max_number_of_pipelined_agptransactions text[] , graphics_aperture_size text[] , agp_specification_version_conformance text[] , description text[] , video_processor text[] , video_memory_type text[] , number_of_video_pages text[] , max_memory_supported text[] , current_bits_per_pixel text[] , current_horizontal_resolution text[] , current_vertical_resolution text[] , max_refresh_rate text[] , min_refresh_rate text[] , current_refresh_rate text[] , current_scan_mode text[] , current_number_of_rows text[] , current_number_of_columns text[] , current_number_of_colors text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ata_initiator_target_logical_unit_path /* An association that models a host driver path to a logical unit. Each permutation of initiator
        AND target ProtocolEndpoints
        AND logical units is considered a separate path. */ ( id SERIAL PRIMARY KEY , protocol_endpoint_id5 INTEGER REFERENCES protocol_endpoint(id) , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) , logical_device_id7 INTEGER REFERENCES logical_device(id) , state text[] ); 
        CREATE TABLE public.ata_port /* Represents the port of an ATA device to system connection. */ ( id SERIAL PRIMARY KEY , port_type text[] , speed text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.adapter_active_connection /* Note: The use of the CIM_AdapterActiveConnection class has been deprecated, because NetworkAdapter is deprecated. Instead use the CIM_PortActiveConnection class. Deprecated description: The AdapterActiveConnection relationship indicates that a NetworkAdapter is
USING the referenced PhysicalConnector to output to the network. This relationship is important
    WHEN the Adapter can choose to output
FROM one of several Connectors. The Connectors can be associated
WITH the NetworkAdapter IN a Realizes relationship but this is NOT required. This association provides additional information (such as, 'in use for communication') different
FROM Realizes. */ ( id SERIAL PRIMARY KEY , physical_connector_id6 INTEGER REFERENCES physical_connector(id) , network_adapter_id7 INTEGER REFERENCES network_adapter(id) ); 
CREATE TABLE public.aggregate_psextent_based_on_aggregate_pextent /* This association is deprecated IN lieu of ProtectedSpaceBasedOn, since AggregatePExtents
        AND AggregatePSExtents are themselves deprecated. The association describes that AggregatePSExtents are BasedOn a single AggregatePExtent. */ ( id SERIAL PRIMARY KEY , aggregate_pextent_id6 INTEGER REFERENCES aggregate_pextent(id) , aggregate_psextent_id7 INTEGER REFERENCES aggregate_psextent(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.aggregate_psextent_based_on_pextent /* This association is deprecated IN lieu of ProtectedSpaceBasedOn, since PhysicalExtents
        AND AggregatePSExtents are themselves deprecated. The association describes that AggregatePSExtents are BasedOn a single PhysicalExtent. */ ( id SERIAL PRIMARY KEY , physical_extent_id6 INTEGER REFERENCES physical_extent(id) , aggregate_psextent_id7 INTEGER REFERENCES aggregate_psextent(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.aggregate_redundancy_component /* Describes the AggregatePExtent IN a StorageRedundancyGroup. However, there is no need for the specificity of this association. It is deprecated IN lieu of the generic ExtentRedundancyComponent relationship, its superclass. */ ( id SERIAL PRIMARY KEY , storage_redundancy_group_id7 INTEGER REFERENCES storage_redundancy_group(id) , aggregate_pextent_id8 INTEGER REFERENCES aggregate_pextent(id) ); 
        CREATE TABLE public.allocated_from_storage_pool /* AllocatedFromStoragePool is an association describing how LogicalElements are allocated
FROM underlying StoragePools. These elements typically would be subclasses of StorageExtents
        OR StoragePools. */ ( id SERIAL PRIMARY KEY , storage_pool_id5 INTEGER REFERENCES storage_pool(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) , space_consumed text[] , space_limit text[] , space_limit_warning_threshold text[] ); 
        CREATE TABLE public.associated_battery /* A LogicalDevice might use
        OR require one
        OR more Batteries. This relationship is described by the AssociatedBattery dependency. It is also possible to model the individual Batteries that comprise a UPS,
USING this association. */ ( id SERIAL PRIMARY KEY , battery_id5 INTEGER REFERENCES battery(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
CREATE TABLE public.associated_component_extent /* This association defines the capacity, expressed IN StorageExtents, that together represents the entire capacity collected IN a StoragePool. The capacity represented by StorageExtents may represent capacity that is allocated
        OR unallocated. StorageExtents associated to a StoragePool
USING this association shall NOT be also be associated to that StoragePool
USING the CIM_AssociatedRemainingExtent association. */ ( id SERIAL PRIMARY KEY , storage_pool_id6 INTEGER REFERENCES storage_pool(id) , storage_extent_id7 INTEGER REFERENCES storage_extent(id) ); 
CREATE TABLE public.associated_cooling /* The CIM_AssociatedCooling relationship indicates what ManagedSystemElement(s) the fan
        OR cooling device is providingcooling for. */ ( id SERIAL PRIMARY KEY , cooling_device_id5 INTEGER REFERENCES cooling_device(id) , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) ); 
        CREATE TABLE public.associated_indicator_led /* ManagedSystemElements may have zero
        OR more IndicatorLEDs associated
WITH them, IN order to indicate problem situations. This relationship is indicated by the AssociatedIndicatorLED dependency. */ ( id SERIAL PRIMARY KEY , managed_system_element_id5 INTEGER REFERENCES managed_system_element(id) , indicator_led_id6 INTEGER REFERENCES indicator_led(id) ); 
CREATE TABLE public.associated_label_reader /* A LogicalDevice may use
        OR require one
        OR more LabelReaders, to scan barcodes
        OR otherwise identify entities. This relationship is described by the AssociatedLabelReader dependency. */ ( id SERIAL PRIMARY KEY , label_reader_id5 INTEGER REFERENCES label_reader(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) ); 
        CREATE TABLE public.associated_masking_group /* CIM_AssociatedMaskingGroup is the association that assembles the ProtocolControllers view
        AND the participating MaskingGroups. */ ( id SERIAL PRIMARY KEY , protocol_controller_id5 INTEGER REFERENCES protocol_controller(id) , masking_group_id6 INTEGER REFERENCES masking_group(id) ); 
        CREATE TABLE public.associated_memory /* LogicalElements may have Memory installed
    ON them
        OR otherwise associated
WITH them - such AS CacheMemory. This is made explicit IN this association. */ ( id SERIAL PRIMARY KEY , memory_id5 INTEGER REFERENCES memory(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) ); 
CREATE TABLE public.associated_processor_memory /* Associates the Processor
        AND system Memory,
        OR a Processor's Cache. */ ( id SERIAL PRIMARY KEY , processor_id5 INTEGER REFERENCES processor(id) , memory_id6 INTEGER REFERENCES memory(id) , bus_speed text[] ); 
        CREATE TABLE public.associated_protocol_controller /* This association is used to define a hierarchy relationship between ProtocolControllers. This subclass is provided so that an enumeration of related ProtocolControllers can be performed without retrieving any connected StorageVolumes, MediaAccessDevices or LogicalPorts. */ ( id SERIAL PRIMARY KEY , protocol_controller_id5 INTEGER REFERENCES protocol_controller(id) , protocol_controller_id6 INTEGER REFERENCES protocol_controller(id) , device_number text[] , access_priority text[] , access_state text[] ); 
        CREATE TABLE public.associated_remaining_extent /* This association defines that capacity of the StoragePool that is not yet allocated from the StoragePool. This capacity is remaining in the StoragePool for future allocation.StorageExtents associated to a StoragePool using this association shall be BasedOn StorageExtents that are associated to that StoragePool using CIM_AssociatedComponentExtent, but shall not be associated to that StoragePool using the CIM_AssociatedComponentExtent association. */ ( id SERIAL PRIMARY KEY , storage_pool_id6 INTEGER REFERENCES storage_pool(id) , storage_extent_id7 INTEGER REFERENCES storage_extent(id) ); 
        CREATE TABLE public.associated_sensor /* The CIM_AssociatedCooling relationship indicates what ManagedSystemElement(s) the fan or cooling device is providingcooling for. */ ( id SERIAL PRIMARY KEY , sensor_id5 INTEGER REFERENCES sensor(id) , managed_system_element_id6 INTEGER REFERENCES managed_system_element(id) ); 
        CREATE TABLE public.associated_target_masking_group /* Associate a group of target ports to a masking view. */ ( id SERIAL PRIMARY KEY , scsi_protocol_controller_id5 INTEGER REFERENCES scsi_protocol_controller(id) , target_masking_group_id6 INTEGER REFERENCES target_masking_group(id) ); 
        CREATE TABLE public.bios_loaded_in_nv /* A link between BIOSElement and Memory where the BIOS is loaded. */ ( id SERIAL PRIMARY KEY , memory_id5 INTEGER REFERENCES memory(id) , bios_element_id6 INTEGER REFERENCES bios_element(id) , starting_address text[] , ending_address text[] ); 
        CREATE TABLE public.binary_sensor /* A BinarySensor provides a boolean output. The use of this class is being deprecated in lieu of creating a Sensor with two PossibleStates. */ ( id SERIAL PRIMARY KEY , current_reading text[] , expected_reading text[] , interpretation_of_true text[] , interpretation_of_false text[] , sensor_type text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.cdrom_drive /* Capabilities and managment of a CDROMDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.cache_memory /* Capabilities and management of Cache Memory. Cache memory is dedicated or allocated RAM that a Processor searches first for data, before going to 'regular' memory. CacheMemory is used to speed up the delivery of data to a Processor. It is usually described by its closeness to the Processor (for example, Primary or Secondary Cache). If a DiskDrive includes RAM allocated for holding the disk's most recently read and/or adjacent data (in order to speed up retrieval), this also would be modeled AS CacheMemory. Note that CacheMemory is NOT operating system
        OR application level buffers but actual RAM allocated for caching data for a Processor,
FROM a hard disk, etc. */ ( id SERIAL PRIMARY KEY , level text[] , write_policy text[] , cache_type text[] , line_size text[] , replacement_policy text[] , read_policy text[] , flush_timer text[] , associativity text[] , volatile text[] , error_methodology text[] , starting_address text[] , ending_address text[] , error_info text[] , other_error_description text[] , correctable_error text[] , error_time text[] , error_access text[] , error_transfer_size text[] , error_data_order text[] , error_address text[] , system_level_address text[] , error_resolution text[] , data_organization text[] , purpose text[] , access text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.call_based_modem /* CIM_CallBasedModem is the superclass for grouping the numerous types of call-based modems. The POTSModem is a type of call- based Modem. */ ( id SERIAL PRIMARY KEY , fallback_enabled text[] , other_compression_description text[] , compression_info text[] , other_compression_info_description text[] , other_modulation_description text[] , modulation_scheme text[] , other_scheme_description text[] , other_error_control_description text[] , error_control_info text[] , other_error_control_info_description text[] , time_of_last_reset text[] , call_speed text[] , call_status text[] , chars_sent text[] , chars_received text[] , chars_lost text[] , blocks_sent text[] , blocks_resent text[] , blocks_received text[] , block_errors text[] , call_length text[] , number_dialed text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.changer_device /* ChangerDevices represent hardware that moves PhysicalMedia within a System, such AS a StorageLibrary. */ ( id SERIAL PRIMARY KEY , max_transit_time text[] , media_flip_supported text[] , audit_in_progress text[] , audits_performed text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.composite_extent_based_on /* This specialization defines how data is striped across StorageExtents. Additionally, it includes information
    ON distribution of check data so that the 'usual case' RAID devices can be created IN one step. */ ( id SERIAL PRIMARY KEY , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , storage_extent_id7 INTEGER REFERENCES storage_extent(id) , order_index text[] , lb_asmapped_by_decrementing text[] , lba_mapping_includes_check_data text[] , number_of_blocks text[] , block_size text[] , user_data_stripe_depth text[] , units_before_check_data_interleave text[] , units_of_check_data text[] , units_of_user_data text[] , starting_address text[] , ending_address text[] ); 
    CREATE TABLE public.computer_system_memory /* The use of this association has be deprecated IN lieu of SystemDevice. Association indicating that memory is installed
        AND required for the UnitaryComputerSystem to operate. Note that this relationship inherits
FROM the SystemDevice association,
        AND therefore, the Memory StorageExtent is weak to the aggregating UnitaryComputerSystem. */ ( id SERIAL PRIMARY KEY , unitary_computer_system_id8 INTEGER REFERENCES unitary_computer_system(id) , memory_id9 INTEGER REFERENCES memory(id) ); 
        CREATE TABLE public.computer_system_processor /* Note: ComputerSystemProcessor is deprecated IN lieu of its superclass, SystemDevice, because it adds no detail
        AND changes none of the cardinalities IN the definition of the superclass. Deprecated description: An association that indicates the processors of a UnitaryComputer System. */ ( id SERIAL PRIMARY KEY , unitary_computer_system_id8 INTEGER REFERENCES unitary_computer_system(id) , processor_id9 INTEGER REFERENCES processor(id) ); 
        CREATE TABLE public.connection_based_modem /* CIM_ConnectionBasedModem is the superclass for grouping the numerous types of connection-based Modems. A CableModem is a type of connection-based Modem. */ ( id SERIAL PRIMARY KEY , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.controlled_by /* The ControlledBy relationship indicates which Devices are controlled by a CIM_Controller. */ ( id SERIAL PRIMARY KEY , controller_id5 INTEGER REFERENCES controller(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , access_state text[] , time_of_device_reset text[] , number_of_hard_resets text[] , number_of_soft_resets text[] , device_number text[] , access_mode text[] , access_priority text[] , negotiated_speed text[] , negotiated_data_width text[] ); 
        CREATE TABLE public.controller_configuration_service /* The ControllerConfigurationService provides methods that allow a client to manipulate LUN Masking IN a storage system. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.dsl_modem /* The DSLModem class represents the superclass for Digital Subscriber Line (DSL) Devices. Properties will be defined IN a future release of the model. */ ( id SERIAL PRIMARY KEY , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.dvd_drive /* Capabilities
        AND management of a DVDDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.device_services_location /* Within an automated StorageLibrary, Media should be accessible to the various robotics
        AND MediaTransferDevices (Pickers, Changers, InterLibraryPorts, etc.). The Library may be serviced by different TransferDevices, each responsible for a subset of the Library's StorageMediaLocations. The Device ServicesLocation association indicates that the Transfer Device handles Media stored in the referenced Location. For example, LibraryPort 'A' may only service Media from Slots 1-10, while LibraryPort 'B' covers Slots 11-33. This detail is conveyed by this association. */ ( id SERIAL PRIMARY KEY , media_transfer_device_id5 INTEGER REFERENCES media_transfer_device(id) , storage_media_location_id6 INTEGER REFERENCES storage_media_location(id) , inaccessible text[] ); 
        CREATE TABLE public.discrete_sensor /* A DiscreteSensor has a set of legal string values, that it can report. These values are enumerated in the Sensor's PossibleValues property. A DiscreteSensor will always have a 'current reading' that corresponds to one of the enumerated values. The use of this class is being deprecated IN lieu of CIM_Sensor. Information IN the CurrentReading
        AND PossibleValues properties will typically have the same values
        AND semantics AS for the CurrentState
        AND PossibleStates properties, inherited
FROM Sensor. */ ( id SERIAL PRIMARY KEY , current_reading text[] , sensor_type text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.disk_drive /* Capabilities
        AND managment of a DiskDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , disk_type text[] , encryption text[] , form_factor text[] , interconnect_speed text[] , interconnect_type text[] , other_interconnect_type text[] , rpm text[] , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.diskette_drive /* Capabilities
        AND managment of a DisketteDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.display /* Display is a superclass for grouping the miscellaneous display devices that exist. */ ( id SERIAL PRIMARY KEY , is_locked text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.drive_in_disk_group /* CIM_DriveInDiskGroup defines the DiskDrives that participate IN the Group. */ ( id SERIAL PRIMARY KEY , disk_group_id6 INTEGER REFERENCES disk_group(id) , disk_drive_id7 INTEGER REFERENCES disk_drive(id) ); 
        CREATE TABLE public.ethernet_adapter /* Note: The use of the CIM_EthernetAdapter class has been deprecated, consistent
WITH NetworkAdapter. Instead use the CIM_EthernetPort class. Deprecated description: This class describes the capabilities
        AND management aspects of an EthernetAdapter. */ ( id SERIAL PRIMARY KEY , max_data_size text[] , symbol_errors text[] , total_packets_transmitted text[] , total_packets_received text[] , alignment_errors text[] , fcs_errors text[] , single_collision_frames text[] , multiple_collision_frames text[] , sqe_test_errors text[] , deferred_transmissions text[] , late_collisions text[] , excessive_collisions text[] , internal_mactransmit_errors text[] , internal_macreceive_errors text[] , carrier_sense_errors text[] , frame_too_longs text[] , permanent_address text[] , speed text[] , max_speed text[] , full_duplex text[] , auto_sense text[] , octets_transmitted text[] , octets_received text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ethernet_port /* Capabilities
        AND management of an EthernetPort. */ ( id SERIAL PRIMARY KEY , port_type text[] , max_data_size text[] , pvid text[] , po_epower_entity_type text[] , speed text[] , other_network_port_type text[] , port_number text[] , link_technology text[] , other_link_technology text[] , permanent_address text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.fc_active_connection /* This association specializes ActiveConnection to represent the connections
    BETWEEN two Fibre Channel ProtocolEndpoints. The ActiveConnection can be an ISL, a Host to Switch Link, a Switch to Device Link,
        OR a connection created */ ( id SERIAL PRIMARY KEY , service_access_point_id5 INTEGER REFERENCES service_access_point(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) , traffic_type text[] , other_traffic_description text[] , is_unidirectional text[] ); 
        CREATE TABLE public.fc_port /* Capabilities
        AND management of a Fibre Channel Port Device. */ ( id SERIAL PRIMARY KEY , port_type text[] , detailed_port_state text[] , domain_port_number text[] , logical_module_port_number text[] , port_availability text[] , port_number text[] , speed text[] , other_network_port_type text[] , link_technology text[] , other_link_technology text[] , permanent_address text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.fibre_channel_adapter /* Note: The use of the CIM_FibreChannelAdapter class is deprecated, consistent
WITH the deprecation of NetworkAdapter. Instead use CIM_FCPort. Deprecated description: This class describes the capabilities
        AND management aspects of a Fibre Channel Adapter. */ ( id SERIAL PRIMARY KEY , max_frame_size text[] , receive_buffer_errors text[] , receive_end_errors text[] , resource_allocation_timeout text[] , error_detect_timeout text[] , class1_sequences_sent text[] , class2_sequences_sent text[] , class3_sequences_sent text[] , class4_sequences_sent text[] , class2_octets_received text[] , class2_octets_transmitted text[] , class2_frames_received text[] , class2_frames_transmitted text[] , class2_discard_frames text[] , class3_octets_received text[] , class3_octets_transmitted text[] , class3_frames_received text[] , class3_frames_transmitted text[] , class3_discard_frames text[] , parity_errors text[] , frame_timeouts text[] , buffer_credit_errors text[] , end_credit_errors text[] , out_of_order_frames_received text[] , permanent_address text[] , speed text[] , max_speed text[] , full_duplex text[] , auto_sense text[] , octets_transmitted text[] , octets_received text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.fibre_port /* Note: The use of the FibrePort class is deprecated because FibreChannel Adapter has been deprecated IN lieu of FCPort
        AND this class overlaps
WITH FCPort. The new FCPort class should be used IN lieu of both FibreChannelAdapter
        AND FibrePort. Deprecated description: FibrePort describes the capabilities
        AND management aspects of a Fibre Channel Port Device. */ ( id SERIAL PRIMARY KEY , address_identifier text[] , current_port_type text[] , current_version text[] , loss_of_signal_counter text[] , loss_of_sync_counter text[] , crc_errors text[] , invalid_transmission_words text[] , frames_too_short text[] , frames_too_long text[] , elasticity_buffer_underruns text[] , elasticity_buffer_overruns text[] , receiver_transmitter_timeout text[] , bypassed_state text[] , connected_media text[] , speed text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , port_type text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.fibre_port_active_login /* Note: The use of FibrePortActiveLogin is deprecated because FibrePort is deprecated. Deprecated description: Information for FibrePortActiveLogin is found by examining the individual FCPorts,
        AND an ActiveConnection
    BETWEEN the FCProtocolEndpoints that are associated
WITH the ports. FibrePortActiveLogin indicates that two FibrePorts are connected through a login
        AND have negotiated their Class Of Service, frame size,
        AND other link characteristics, AS specified by an instance of this class. */ ( id SERIAL PRIMARY KEY , fibre_port_id6 INTEGER REFERENCES fibre_port(id) , fibre_port_id7 INTEGER REFERENCES fibre_port(id) , negotiated_cos text[] , negotiated_frame_size text[] , negotiated_speed text[] , ack_model text[] , buffer_to_buffer_model text[] , originator_buffer_credit text[] , responder_buffer_credit text[] , originator_end_credit text[] , responder_end_credit text[] ); 
        CREATE TABLE public.fibre_port_on_fcadapter /* Note: The use of this method has been deprecated. Deprecated description: The use of FibrePortOnFCAdapter is deprecated because both FibrePort
        AND FibreChannelAdapter have been deprecated. No replacement is needed because the 2 classes are combined into a single class. FibrePortOnFCAdapter associates a FibrePort
WITH a FibreChannelAdapter. */ ( id SERIAL PRIMARY KEY , fibre_channel_adapter_id6 INTEGER REFERENCES fibre_channel_adapter(id) , fibre_port_id7 INTEGER REFERENCES fibre_port(id) ); 
CREATE TABLE public.flat_panel /* Capabilities
        AND management of the FlatPanel LogicalDevice. */ ( id SERIAL PRIMARY KEY , horizontal_resolution text[] , vertical_resolution text[] , scan_mode text[] , display_type text[] , light_source text[] , supports_color text[] , is_locked text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.generic_disk_partition /* A DiskPartition is a presentation of a contiguous range of logical blocks that is identifiable by the Operating System by the associated DiskPartitionConfigurationCapabilities
        AND by the properties of the subclasses of this class. Each concrete partition style (the subclasses of GenericDiskPartition) has some way of tracking a starting block number
        AND either the ending block
        OR number of blocks. CIM models this
WITH the StartingAddress
        AND EndingAddress properties of the BasedOn association
    BETWEEN the partition
        AND its underlying volume/extent. The NumberOfBlocks
        AND ConsumableBlocks properties inherited
FROM StorageExtent also need to be consistent
        OR omitted by the instrumentation. Partition numbers are modeled AS BasedOn.OrderIndex. Note that ALL the concrete DiskPartition instances BasedOn the same underlying extent) MUST share the same partition style (i.e. ALL must have the same subclass type). The abstract qualifier can NOT be used
    ON this class because its superclass is NOT abstract. But instances of subclasses this class should be instantiated, NOT instances of GenericDiskPartition itself. */ ( id SERIAL PRIMARY KEY , bootable text[] , allocatable text[] , signature text[] , signature_algorithm text[] , signature_state text[] , extendable text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.group_masking_mapping_service /* Methods to work
WITH masking groups. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.hdsl_modem /* The HDSLModem class represents Modems of the DSL type = HDSL, High data rate Digital Subscribe Line, which is capable of delivering T1
        OR E1 speeds. Properties will be defined IN a future release of the model. */ ( id SERIAL PRIMARY KEY , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.hosted_storage_pool /* HostedStoragePool is a specialization of HostedResourcePool association that establishes that the StoragePool is defined IN the context of the System. */ ( id SERIAL PRIMARY KEY , system_id7 INTEGER REFERENCES system(id) , storage_pool_id8 INTEGER REFERENCES storage_pool(id) ); 
        CREATE TABLE public.isdn_modem /* The ISDNModem class, a kind of call-based Modem. Properties will be defined IN a future release of the model. */ ( id SERIAL PRIMARY KEY , fallback_enabled text[] , other_compression_description text[] , compression_info text[] , other_compression_info_description text[] , other_modulation_description text[] , modulation_scheme text[] , other_scheme_description text[] , other_error_control_description text[] , error_control_info text[] , other_error_control_info_description text[] , time_of_last_reset text[] , call_speed text[] , call_status text[] , chars_sent text[] , chars_received text[] , chars_lost text[] , blocks_sent text[] , blocks_resent text[] , blocks_received text[] , block_errors text[] , call_length text[] , number_dialed text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.inter_library_port /* InterLibraryPorts represent hardware that transports Physical Media
    BETWEEN connected StorageLibraries. The LibraryExchange association identifies the connected Libraries, by identifying the connected InterLibraryPorts. */ ( id SERIAL PRIMARY KEY , last_accessed text[] , import_count text[] , export_count text[] , direction text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.keyboard /* Capabilities
        AND management of the Keyboard LogicalDevice. */ ( id SERIAL PRIMARY KEY , number_of_function_keys text[] , layout text[] , password text[] , is_locked text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.lldp_ethernet_port /* This class describes the current LLDP configuration of an LLDP capable ethernet port. */ ( id SERIAL PRIMARY KEY , config_port_vlan_tx_enable text[] , config_man_vid_tx_enable text[] , message_tx_interval text[] , message_tx_hold_multiplier text[] , reinit_delay text[] , notification_interval text[] , tx_credit_max text[] , message_fast_tx text[] , tx_fast_init text[] , loc_chassis_id_subtype text[] , loc_chassis_id text[] , loc_sys_name text[] , loc_sys_desc text[] , loc_port_id_subtype text[] , loc_port_id text[] , loc_port_desc text[] , loc_tx_system_value text[] , rem_tx_system_value_echo text[] , loc_rx_system_value text[] , rem_rx_system_value_echo text[] , loc_fb_system_value text[] , rem_tx_system_value text[] , loc_tx_system_value_echo text[] , rem_rx_system_value text[] , loc_rx_system_value_echo text[] , loc_resolved_tx_system_value text[] , loc_resolved_rx_system_value text[] , maximum_frame_size_tlvenabled text[] , port_type text[] , max_data_size text[] , pvid text[] , po_epower_entity_type text[] , speed text[] , other_network_port_type text[] , port_number text[] , link_technology text[] , other_link_technology text[] , permanent_address text[] , full_duplex text[] , auto_sense text[] , supported_maximum_transmission_unit text[] , active_maximum_transmission_unit text[] , max_speed text[] , requested_speed text[] , usage_restriction text[] , other_port_type text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.library_exchange /* LibraryExchange indicates that two StorageLibraries are connected through their InterLibraryPorts. */ ( id SERIAL PRIMARY KEY , inter_library_port_id5 INTEGER REFERENCES inter_library_port(id) , inter_library_port_id6 INTEGER REFERENCES inter_library_port(id) , currently_accessing_port text[] ); 
        CREATE TABLE public.library_package /* Similar to the way that LogicalDevices are 'Realized' by PhysicalElements, a StorageLibrary can be realized IN one
        OR more PhysicalPackages. The LibraryPackage association explicitly defines this relationship. */ ( id SERIAL PRIMARY KEY , physical_package_id5 INTEGER REFERENCES physical_package(id) , storage_library_id6 INTEGER REFERENCES storage_library(id) ); 
        CREATE TABLE public.limited_access_port /* LimitedAccessPorts represent hardware that transports Physical Media into
        OR out of a System, such AS a StorageLibrary. They are identified AS 'limited' since these Ports do NOT provide access to ALL the PhysicalMedia
        OR StorageMediaLocations IN a Library, but only to a subset. */ ( id SERIAL PRIMARY KEY , locked text[] , extended text[] , extend_timeout text[] , last_extended text[] , import_count text[] , export_count text[] , direction text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.logical_disk_based_on_extent /* LogicalDisks can be BasedOn a single StorageVolume, Memory (in the
    CASE of a RAM Disk), a DiskPartition
        OR other StorageExtent. These relationships are made explicit IN this association. Subclasses of the association, LogicalDiskBasedOn Partition
        AND LogicalDiskBasedOnVolume, detail the 'typical' semantics. */ ( id SERIAL PRIMARY KEY , storage_extent_id5 INTEGER REFERENCES storage_extent(id) , logical_disk_id6 INTEGER REFERENCES logical_disk(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.logical_disk_based_on_partition /* LogicalDisks can be BasedOn a DiskPartition. For example, a personal computer's C: drive may be located on a Partition on local PhysicalMedia. In this association of LogicalDisks to Partitions, note that the cardinality of the Antecedent, Disk Partition, is Max (1). This dictates that a LogicalDisk can not span more than one Partition. However, there are cases where this is true. When it occurs, the LogicalDisk is really based on some kind of RAID configuration (for example, a mirror or stripe set). In these scenarios, the LogicalDisk is more correctly BasedOn a StorageVolume. To prevent incorrectly using the LogicalDiskBasedOnPartition association, the Max (1) qualifier was put on the Antecedent reference to the DiskPartition. */ ( id SERIAL PRIMARY KEY , generic_disk_partition_id5 INTEGER REFERENCES generic_disk_partition(id) , logical_disk_id6 INTEGER REFERENCES logical_disk(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.logical_disk_based_on_volume /* LogicalDisks can be BasedOn a single Volume (for example, exposed by a software volume manager), or be BasedOn a Disk Partition directly. The former relationship is made explicit in this association. */ ( id SERIAL PRIMARY KEY , storage_volume_id5 INTEGER REFERENCES storage_volume(id) , logical_disk_id6 INTEGER REFERENCES logical_disk(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.logical_disk_based_on_volume_set /* This association describes that LogicalDisks can be BasedOn a VolumeSet. However, there is no need for the specificity of this association. It is deprecated in lieu of the generic BasedOn relationship. */ ( id SERIAL PRIMARY KEY , volume_set_id6 INTEGER REFERENCES volume_set(id) , logical_disk_id7 INTEGER REFERENCES logical_disk(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.magneto_optical_drive /* Capabilities and managment of a MagnetoOpticalDrive, a subtype of MediaAccessDevice. */ ( id SERIAL PRIMARY KEY , error_methodology text[] , compression_method text[] , number_of_media_supported text[] , max_media_size text[] , default_block_size text[] , max_block_size text[] , min_block_size text[] , needs_cleaning text[] , media_is_locked text[] , security text[] , last_cleaned text[] , max_access_time text[] , uncompressed_data_rate text[] , load_time text[] , unload_time text[] , mount_count text[] , time_of_last_mount text[] , total_mount_time text[] , units_description text[] , max_units_before_cleaning text[] , units_used text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.memory_configuration_service /* Instances of the CIM_MemoryConfigurationService exist to facilitate provisioning of system memory. Traditionally the platform BIOS is able to map memory resources into the system address space without user intervention. Some memory devices may support or require configuration prior to being made available in the system address space. The CIM_MemoryConfigurationService is utilized with this later type of memory device. It supports allocation, a process by which primordial, unconfigured memory is made available to the system. It also supports deallocation, whereby visible extents are returned to their primordial state. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.module_port /* ModulePort associates ports with their hosting modules. */ ( id SERIAL PRIMARY KEY , logical_module_id6 INTEGER REFERENCES logical_module(id) , network_port_id7 INTEGER REFERENCES network_port(id) ); 
        CREATE TABLE public.multi_state_sensor /* A Multi-StateSensor is a multi-member set of Sensors. */ ( id SERIAL PRIMARY KEY , sensor_type text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.numeric_sensor /* A Numeric Sensor is capable of returning numeric readings and optionally supports thresholds settings. */ ( id SERIAL PRIMARY KEY , base_units text[] , unit_modifier text[] , rate_units text[] , current_reading text[] , nominal_reading text[] , normal_max text[] , normal_min text[] , max_readable text[] , min_readable text[] , resolution text[] , tolerance text[] , accuracy text[] , is_linear text[] , hysteresis text[] , lower_threshold_non_critical text[] , upper_threshold_non_critical text[] , lower_threshold_critical text[] , upper_threshold_critical text[] , lower_threshold_fatal text[] , upper_threshold_fatal text[] , sensor_type text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.oob_alert_service_on_modem /* OOBAlertServiceOnModem defines where the out-of-band alerting Service is implemented. The Service can either employ a Modem or NetworkAdapter to send alerts. */ ( id SERIAL PRIMARY KEY , modem_id5 INTEGER REFERENCES modem(id) , oob_alert_service_id6 INTEGER REFERENCES oob_alert_service(id) ); 
        CREATE TABLE public.oob_alert_service_on_network_adapter /* Note: The use of CIM_OOBAlertServiceOnNetworkAdapter has been deprecated because NetworkAdapter has been deprecated. Instead use the CIM_OOBAlertServiceOnNetworkPort class. Deprecated description: OOBAlertServiceOnNetworkAdapter defines where the out-of-band alerting Service is implemented. */ ( id SERIAL PRIMARY KEY , network_adapter_id6 INTEGER REFERENCES network_adapter(id) , oob_alert_service_id7 INTEGER REFERENCES oob_alert_service(id) ); 
        CREATE TABLE public.oob_alert_service_on_network_port /* OOBAlertServiceOnNetworkPort defines where the out-of-band alerting Service is implemented. Currently, the Service can either employ a Modem or a NetworkPort to send alerts. */ ( id SERIAL PRIMARY KEY , network_port_id5 INTEGER REFERENCES network_port(id) , oob_alert_service_id6 INTEGER REFERENCES oob_alert_service(id) ); 
        CREATE TABLE public.owning_print_queue /* This association indicates which Queue holds a PrintJob and where the Job is located within that Queue. A Job can remain on its final Queue when it has been printed with a PrintJobStatus of "Complete" or "Completed With Error". */ ( id SERIAL PRIMARY KEY , print_queue_id5 INTEGER REFERENCES print_queue(id) , print_job_id6 INTEGER REFERENCES print_job(id) , queue_position text[] ); 
        CREATE TABLE public.pci_bridge /* Capabilities and management of a PCI controller that provide bridge-to-bridge capability. */ ( id SERIAL PRIMARY KEY , bridge_type text[] , secondary_latency_timer text[] , subordinate_bus_number text[] , seconday_bus_number text[] , primary_bus_number text[] , secondary_status_register text[] , secondary_bus_device_select_timing text[] , io_limit text[] , io_base text[] , memory_limit text[] , memory_base text[] , prefetch_memory_limit text[] , prefetch_memory_base text[] , prefetch_limit_upper32 text[] , prefetch_base_upper32 text[] , io_limit_upper16 text[] , io_base_upper16 text[] , subsystem_id text[] , subsystem_vendor_id text[] , min_grant_time text[] , max_latency text[] , bus_number text[] , device_number text[] , function_number text[] , pci_device_id text[] , vendor_id text[] , revision_id text[] , command_register text[] , device_select_timing text[] , class_code text[] , cache_line_size text[] , latency_timer text[] , interrupt_pin text[] , expansion_rombase_address text[] , self_test_enabled text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.pc_video_controller /* Note: The use of the CIM_PCVideoController class has been deprecated in lieu of CIM_DisplayController. Deprecated description: Capabilities and management of a PCVideoController, a subtype of VideoController. */ ( id SERIAL PRIMARY KEY , video_architecture text[] , video_mode text[] , number_of_color_planes text[] , description text[] , video_processor text[] , video_memory_type text[] , number_of_video_pages text[] , max_memory_supported text[] , current_bits_per_pixel text[] , current_horizontal_resolution text[] , current_vertical_resolution text[] , max_refresh_rate text[] , min_refresh_rate text[] , current_refresh_rate text[] , current_scan_mode text[] , current_number_of_rows text[] , current_number_of_columns text[] , current_number_of_colors text[] , time_of_last_reset text[] , protocol_supported text[] , max_number_controlled text[] , protocol_description text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.p_extent_redundancy_component /* Describes the PhysicalExtents participating in a Storage RedundancyGroup. However, there is no need for the specificity of this association. It is deprecated in lieu of the generic ExtentRedundancyComponent relationship, its superclass. */ ( id SERIAL PRIMARY KEY , storage_redundancy_group_id7 INTEGER REFERENCES storage_redundancy_group(id) , physical_extent_id8 INTEGER REFERENCES physical_extent(id) ); 
        CREATE TABLE public.pots_modem /* The POTSModem class represents a Device that translates binary data into wave modulations for sound-based transmission. It connects to the POTS (Plain Old Telephone System) network. */ ( id SERIAL PRIMARY KEY , max_baud_rate_to_serial_port text[] , max_baud_rate_to_phone text[] , supports_synchronous_connect text[] , dial_type text[] , inactivity_timeout text[] , speaker_volume_info text[] , country_selected text[] , rings_before_answer text[] , max_number_of_passwords text[] , supports_callback text[] , answer_mode text[] , equalization text[] , fallback_enabled text[] , other_compression_description text[] , compression_info text[] , other_compression_info_description text[] , other_modulation_description text[] , modulation_scheme text[] , other_scheme_description text[] , other_error_control_description text[] , error_control_info text[] , other_error_control_info_description text[] , time_of_last_reset text[] , call_speed text[] , call_status text[] , chars_sent text[] , chars_received text[] , chars_lost text[] , blocks_sent text[] , blocks_resent text[] , blocks_received text[] , block_errors text[] , call_length text[] , number_dialed text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ps_extent_based_on_pextent /* Covered by ProtectedExtentBasedOn or CompositeExtentBasedOn, since PhysicalExtent itself is deprecated in lieu of these associations. ProtectedSpaceExtents are BasedOn a PhysicalExtent. This relationship is made explicit by this association. */ ( id SERIAL PRIMARY KEY , physical_extent_id6 INTEGER REFERENCES physical_extent(id) , protected_space_extent_id7 INTEGER REFERENCES protected_space_extent(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.package_alarm /* Often, an AlarmDevice is installed as part of a Package, not to indicate issues with any particular LogicalDevice or PhysicalComponent, but with the Package's environment IN general, its security state
        OR its overall health. The use of this association has been deprecated. Instead, use PackageDependency to describe this relationship. */ ( id SERIAL PRIMARY KEY , alarm_device_id6 INTEGER REFERENCES alarm_device(id) , physical_package_id7 INTEGER REFERENCES physical_package(id) ); 
        CREATE TABLE public.package_cooling /* Note: The use of this association has been deprecated. Instead, the more generic PackageDependency relationship should be used. Deprecated description: Often, a CoolingDevice is installed IN a Package such AS a Chassis
        OR a Rack, NOT for a specific Device, but to assist IN the cooling of the Package IN general. */ ( id SERIAL PRIMARY KEY , cooling_device_id6 INTEGER REFERENCES cooling_device(id) , physical_package_id7 INTEGER REFERENCES physical_package(id) ); 
        CREATE TABLE public.picker_for_changer /* PickerForChanger indicates the PickerElement(s) that access StorageMediaLocations
        AND deliver PhysicalMedia to the Changer, for movement through the System. A Changer may have several Pickers for faster exchange of Media. */ ( id SERIAL PRIMARY KEY , picker_element_id5 INTEGER REFERENCES picker_element(id) , changer_device_id6 INTEGER REFERENCES changer_device(id) ); 
        CREATE TABLE public.picker_label_reader /* PickerLabelReader is used to indicate that one
        OR more Label Readers works IN conjunction
WITH PickerElements, to identify PhysicalMedia AS they are being picked/placed. */ ( id SERIAL PRIMARY KEY , label_reader_id5 INTEGER REFERENCES label_reader(id) , picker_element_id6 INTEGER REFERENCES picker_element(id) ); 
CREATE TABLE public.pointing_device /* PointingDevice represents those Devices used to 'point' to regions of a Display. */ ( id SERIAL PRIMARY KEY , pointing_type text[] , number_of_buttons text[] , handedness text[] , resolution text[] , is_locked text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.port_implements_endpoint /* PortImplementsEndpoint associates a LogicalPort
WITH one
        OR more ProtocolEndpoints that are implemented
    ON it. This class specializes the DeviceSAPImplementation association. It indicates that the referenced Endpoint is dependent
    ON the operations of the Port Device. */ ( id SERIAL PRIMARY KEY , logical_port_id5 INTEGER REFERENCES logical_port(id) , protocol_endpoint_id6 INTEGER REFERENCES protocol_endpoint(id) ); 
    CREATE TABLE public.protected_extent_based_on /* Protected StorageExtents map to an underlying StorageExtent. This mapping includes information about the placement of check data
    ON the underlying extent. The mapping is made explicit IN this association. */ ( id SERIAL PRIMARY KEY , storage_extent_id5 INTEGER REFERENCES storage_extent(id) , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , starting_address text[] , number_of_blocks text[] , block_size text[] , units_before_check_data_interleave text[] , units_of_check_data text[] , units_of_user_data text[] , ending_address text[] , order_index text[] ); 
    CREATE TABLE public.protocol_controller_accesses_unit /* This association is used to define a relationship
    BETWEEN a protocol controllers
        AND a Logical Unit (for example a Storage Volume
        OR Media Access Device) controlled by the controller. This association is used instead of ProtocolControllerForUnit to indicate a 'controlled through' relationship rather than a 'controlled by' one. An example is SCSI
WHERE this association is used to indicate a target/initiator relationship. */ ( id SERIAL PRIMARY KEY , protocol_controller_id5 INTEGER REFERENCES protocol_controller(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , target_controller_number text[] , device_access text[] , device_number text[] , access_priority text[] , access_state text[] ); 
CREATE TABLE public.realized_on_side /* Since removable PhysicalMedia can be dual-sided, there is the possibility for StorageExtents to be realized
    ON a single side of the Media. This association is a specialization of the RealizesExtent relationship, adding a Side property to express the Media's orientation details. */ ( id SERIAL PRIMARY KEY , physical_media_id5 INTEGER REFERENCES physical_media(id) , storage_extent_id6 INTEGER REFERENCES storage_extent(id) , side text[] , starting_address text[] ); 
    CREATE TABLE public.realizes_aggregate_pextent /* AggregatePExtents are realized on a PhysicalMedia. This is described by RealizesAggregatePExtent. However, there is no need for the specificity of this association. It is deprecated in lieu of the generic RealizesExtent relationship. */ ( id SERIAL PRIMARY KEY , physical_media_id6 INTEGER REFERENCES physical_media(id) , aggregate_pextent_id7 INTEGER REFERENCES aggregate_pextent(id) , starting_address text[] ); 
    CREATE TABLE public.realizes_tape_partition /* TapePartitions are realized on PhysicalTape. This relationship is made explicit by the RealizesTapePartition association. */ ( id SERIAL PRIMARY KEY , physical_tape_id5 INTEGER REFERENCES physical_tape(id) , tape_partition_id6 INTEGER REFERENCES tape_partition(id) , starting_address text[] ); 
    CREATE TABLE public.replica_pool_for_storage /* A specialized pool for replicas is associated exclusively to one source storage element or globally to the StorageConfigurationService. Such a pool is typically used to provide storage for delta replica space consumed in small chunks by replica elements. Elements representing the storage are not required to be made explicit. */ ( id SERIAL PRIMARY KEY , enabled_logical_element_id5 INTEGER REFERENCES enabled_logical_element(id) , storage_pool_id6 INTEGER REFERENCES storage_pool(id) ); 
    CREATE TABLE public.replication_service /* The ReplicationService class provides methods to allow a client to manage copy operations on storage objects, including management of replication groups, manipulation of replication operations, and retrieval of replication relationships. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.replication_service_capabilities /* A subclass of Capabilities that defines the Capabilities of a ReplicationService. An instance of ReplicationServiceCapabilities is associated with a ReplicationService using ElementCapabilities. */ ( id SERIAL PRIMARY KEY , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.scsi_interface /* Note: The use of this class is deprecated in lieu of ProtocolControllerForUnit, because the SCSIController class involved in this association is itself deprecated. The protocol-related aspects of SCSI are better reflected in the new classes and associations. Deprecated description: SCSIInterface is a ControlledBy relationship that indicates which Devices are accessed through a SCSIController and describes the characteristics of this access. */ ( id SERIAL PRIMARY KEY , scsi_controller_id6 INTEGER REFERENCES scsi_controller(id) , logical_device_id7 INTEGER REFERENCES logical_device(id) , scsi_timeouts text[] , scsi_retries text[] , initiator_id text[] , target_id text[] , target_lun text[] , scsi_reservation text[] , scsi_signal text[] , max_queue_depth text[] , queue_depth_limit text[] , access_state text[] , time_of_device_reset text[] , number_of_hard_resets text[] , number_of_soft_resets text[] , device_number text[] , access_mode text[] , access_priority text[] , negotiated_speed text[] , negotiated_data_width text[] ); 
    CREATE TABLE public.sdsl_modem /* The SDSLModem class represents Modems of the DSL type = SDSL, Symmetric Digital Subscriber Line. Properties will be defined in a future release of the model. */ ( id SERIAL PRIMARY KEY , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.serial_interface /* SerialInterface is a ControlledBy relationship that indicates which Devices are accessed through the SerialController and describes the characteristics of this access. */ ( id SERIAL PRIMARY KEY , serial_controller_id5 INTEGER REFERENCES serial_controller(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , negotiated_data_width text[] , number_of_stop_bits text[] , parity_info text[] , flow_control_info text[] , access_state text[] , time_of_device_reset text[] , number_of_hard_resets text[] , number_of_soft_resets text[] , device_number text[] , access_mode text[] , access_priority text[] , negotiated_speed text[] ); 
    CREATE TABLE public.spare_configuration_service /* This service allows the active management of spares in a Storage Server. It allows jobs to be started for the adding and removing of spares, replacing a failed storage extent with a spare and rebuilding a storage extent in a StorageRedundancySet. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.storage_configuration_capabilities /* A subclass of Capabilities that defines the Capabilities of a StorageConfigurationService. An instance of StorageConfigurationCapabilities is associated with a StorageConfigurationService using ElementCapabilities. The properties in this class specify the envelope of capabilites for storage configuration in the context of the Service or Pool with which the instance is associated. These properties correspond to the properties of the same base names in StorageSetting and StorageSettingWithHints when either is used as a goal parameter to the StorageConfigurationService methods (CreateOrModifyStoragePool, CreateOrModifyElementFromStoragePool, or CreateOrModifyElementFromElements). */ ( id SERIAL PRIMARY KEY , initial_replication_state text[] , automatic_pool_selection_allowed text[] , maximum_element_create_count text[] , maximum_element_delete_count text[] , thin_provisioned_client_settable_reserve text[] , thin_provisioned_default_reserve text[] , instance_id text[] , element_name text[] , caption text[] , description text[] , generation text[] ); 
    CREATE TABLE public.storage_configuration_service /* This service allows the active management of a Storage Server. It allows jobs to be started for the creation, modification and deletion of storage objects (StoragePools, StorageVolumes and LogicalDisks). */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.storage_element_composition_service /* Supplies the methods used to create and modify composite elements. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.storage_element_drive_dependency /* CIM_StorageElementDriveDependency is used to show dependency between a disk drive and storage elements such as StorageVolumes. */ ( id SERIAL PRIMARY KEY , disk_drive_id5 INTEGER REFERENCES disk_drive(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) ); 
    CREATE TABLE public.storage_processor_affinity /* StorageProcessorAffinity indicates a processing affinity and state between a TargetPortGroup or StorageResourceLoadGroup and a ComputerSystem representing a storage processor in a redundant storage server. The processor can host the group in either a healthy or failover state. Instances of this association are static, one for each combination of StorageResourceLoadGroup and ComputerSystem in the RedundancySet. */ ( id SERIAL PRIMARY KEY , computer_system_id6 INTEGER REFERENCES computer_system(id) , collection_id7 INTEGER REFERENCES collection(id) , is_primary text[] , is_active text[] ); 
    CREATE TABLE public.storage_relocation_service /* Typically, a storage pool is established on a set of storage extents, and a volume is allocated to a storage pool with different performance characteristics (e.g. with different RPM drives, or different drive classes). Storage Relocation (SR) can relocate storage elements to a different storage pool, or relocate a storage element to a specified set of storage extents.The relocation source and target could be either local or remote. Two functions are defined in this class: RelocateStorageElementsToStoragePool and RelocateStorageElementToElements. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.tachometer /* The use of this class is deprecated in lieu of the additions to Sensor and NumericSensor. A Tachometer can be defined by setting the SensorType property. inherited from Sensor, to 5 ("Tachometer"). */ ( id SERIAL PRIMARY KEY , sensor_type text[] , base_units text[] , unit_modifier text[] , rate_units text[] , resolution text[] , current_reading text[] , nominal_reading text[] , normal_max text[] , normal_min text[] , max_readable text[] , min_readable text[] , tolerance text[] , accuracy text[] , is_linear text[] , hysteresis text[] , lower_threshold_non_critical text[] , upper_threshold_non_critical text[] , lower_threshold_critical text[] , upper_threshold_critical text[] , lower_threshold_fatal text[] , upper_threshold_fatal text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.tape_partition_on_surface /* TapePartitionOnSurface represents the ability to have one or more TapePartitions on each surface of a PhysicalTape. The individual surfaces are represented as instances of CIM_StorageExtent. */ ( id SERIAL PRIMARY KEY , storage_extent_id5 INTEGER REFERENCES storage_extent(id) , tape_partition_id6 INTEGER REFERENCES tape_partition(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
    CREATE TABLE public.temperature_sensor /* The use of this class is being deprecated in lieu of the additions to Sensor and Numeric Sensor. A TemperatureSensor can be defined by setting the SensorType property, inherited from Sensor, to 2 ("Temperature"). */ ( id SERIAL PRIMARY KEY , sensor_type text[] , base_units text[] , unit_modifier text[] , rate_units text[] , current_reading text[] , nominal_reading text[] , normal_max text[] , normal_min text[] , max_readable text[] , min_readable text[] , resolution text[] , tolerance text[] , accuracy text[] , lower_threshold_non_critical text[] , upper_threshold_non_critical text[] , lower_threshold_critical text[] , upper_threshold_critical text[] , lower_threshold_fatal text[] , upper_threshold_fatal text[] , is_linear text[] , hysteresis text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.tier_domain /* TierDomain is a subclass of AdminDomain that identifies tiers belonging to a domain. */ ( id SERIAL PRIMARY KEY , data_movement text[] , data_movement_state text[] , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.tier_service /* The TierService class provides methods to allow a client to manage storage tiers. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.usb_connection /* USBConnection associates a Device with the USBPort to which it is connected. */ ( id SERIAL PRIMARY KEY , usb_port_id5 INTEGER REFERENCES usb_port(id) , usb_device_id6 INTEGER REFERENCES usb_device(id) , negotiated_speed text[] , negotiated_data_width text[] ); 
    CREATE TABLE public.usb_controller_has_hub /* USBControllerHasHub defines the Hub(s) that are downstream of the USBController. */ ( id SERIAL PRIMARY KEY , usb_controller_id5 INTEGER REFERENCES usb_controller(id) , usb_hub_id6 INTEGER REFERENCES usb_hub(id) , access_state text[] , time_of_device_reset text[] , number_of_hard_resets text[] , number_of_soft_resets text[] , device_number text[] , access_mode text[] , access_priority text[] , negotiated_speed text[] , negotiated_data_width text[] ); 
    CREATE TABLE public.unimodem /* Unimodem is a POTSModem that supports the Unimodem 1.0 Specification. */ ( id SERIAL PRIMARY KEY , call_setup_result_code text[] , multi_media_mode text[] , dtedce_interface_mode text[] , transmit_carrier_negotiation text[] , receive_carrier_negotiation text[] , initial_transmit_carrier_data_rate text[] , initial_receive_carrier_data_rate text[] , carrier_retrains_requested text[] , carrier_retrains_granted text[] , final_transmit_carrier_data_rate text[] , final_receive_carrier_data_rate text[] , termination_cause text[] , unimodem_revision text[] , estimated_noise_level text[] , normalized_mean_squared_error text[] , temporary_carrier_loss_event_count text[] , carrier_renegotiation_event_count text[] , error_control_frame_size text[] , error_control_link_timeouts text[] , error_control_link_naks text[] , transmit_flow_control text[] , receive_flow_control text[] , transmit_chars_sent_from_dte text[] , receive_chars_sent_to_dte text[] , transmit_chars_lost text[] , receive_chars_lost text[] , transmit_iframe_count text[] , receive_iframe_count text[] , transmit_iframe_error_count text[] , received_iframe_error_count text[] , call_waiting_event_count text[] , max_baud_rate_to_serial_port text[] , max_baud_rate_to_phone text[] , supports_synchronous_connect text[] , dial_type text[] , inactivity_timeout text[] , speaker_volume_info text[] , country_selected text[] , rings_before_answer text[] , max_number_of_passwords text[] , supports_callback text[] , answer_mode text[] , equalization text[] , fallback_enabled text[] , other_compression_description text[] , compression_info text[] , other_compression_info_description text[] , other_modulation_description text[] , modulation_scheme text[] , other_scheme_description text[] , other_error_control_description text[] , error_control_info text[] , other_error_control_info_description text[] , time_of_last_reset text[] , call_speed text[] , call_status text[] , chars_sent text[] , chars_received text[] , chars_lost text[] , blocks_sent text[] , blocks_resent text[] , blocks_received text[] , block_errors text[] , call_length text[] , number_dialed text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.vdsl_modem /* The VDSLmodem class represents Modems of the DSL type = VDSL, Very high data rate Digital Subscriber Line. Properties will be defined in a future release of the model. */ ( id SERIAL PRIMARY KEY , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.vtl_statistical_data_service /* The CIM_VTLStatisticalDataService class provides Historical Resource Usage Service. This class has set of functions to collect historical values for Front-end port performance, Physical disk usage, Logical backup data, Overall system compression ratio, Deduplication efficiency and Replication traffic. All the functions returns graph object Data point history of specified resource. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.vtoc_disk_partition /* VTOC is a partitioning scheme used on Solaris and some other OSes based on BSD Unix. VTOC partitions are also known as slices. VTOC allows partitions to overlap. A VTOC disk always contains 8 slices, but not all need to be in use. */ ( id SERIAL PRIMARY KEY , tag text[] , ascii_label text[] , bootable text[] , allocatable text[] , signature text[] , signature_algorithm text[] , signature_state text[] , extendable text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.voltage_sensor /* The use of this class is being deprecated in lieu of the additions to Sensor and NumericSensor. A VoltageSensor can be defined by setting the SensorType property, inherited from Sensor, to 3 ("Voltage"). */ ( id SERIAL PRIMARY KEY , sensor_type text[] , base_units text[] , unit_modifier text[] , rate_units text[] , current_reading text[] , nominal_reading text[] , normal_max text[] , normal_min text[] , max_readable text[] , min_readable text[] , resolution text[] , tolerance text[] , accuracy text[] , lower_threshold_non_critical text[] , upper_threshold_non_critical text[] , lower_threshold_critical text[] , upper_threshold_critical text[] , lower_threshold_fatal text[] , upper_threshold_fatal text[] , is_linear text[] , hysteresis text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.volume_set_based_on_psextent /* This association is deprecated in lieu of CompositeExtentBasedOn, since VolumeSets and ProtectedSpaceExtents are themselves deprecated. The relationship describes that VolumeSets are BasedOn on one or more ProtectedSpaceExtents. */ ( id SERIAL PRIMARY KEY , protected_space_extent_id6 INTEGER REFERENCES protected_space_extent(id) , volume_set_id7 INTEGER REFERENCES volume_set(id) , lb_asmapped_by_decrementing text[] , lba_mapping_includes_check_data text[] , starting_address text[] , ending_address text[] , order_index text[] ); 
    CREATE TABLE public.wake_up_service_on_modem /* WakeUpServiceOnModem defines where the WakeUpService is implemented. The Service can either employ a Modem or NetworkAdapter to receive a wakeup signal. */ ( id SERIAL PRIMARY KEY , modem_id5 INTEGER REFERENCES modem(id) , wake_up_service_id6 INTEGER REFERENCES wake_up_service(id) ); 
    CREATE TABLE public.wake_up_service_on_network_adapter /* Note: The use of the CIM_WakeUpServiceOnNetworkAdapter class has been deprecated because NetworkAdapter is deprecated. Instead use the CIM_WakeUpServiceOnNetworkPort class. Deprecated description: WakeUpServiceOnNetworkAdapter defines where the WakeUpService is implemented. */ ( id SERIAL PRIMARY KEY , network_adapter_id6 INTEGER REFERENCES network_adapter(id) , wake_up_service_id7 INTEGER REFERENCES wake_up_service(id) ); 
    CREATE TABLE public.wake_up_service_on_network_port /* WakeUpServiceOnNetworkPort defines where the WakeUpService is implemented. Currently, the Service can either employ a Modem or a NetworkPort for wakeup. */ ( id SERIAL PRIMARY KEY , network_port_id5 INTEGER REFERENCES network_port(id) , wake_up_service_id6 INTEGER REFERENCES wake_up_service(id) ); 
    CREATE TABLE public.wi_fi_port_configuration_service /* Provides methods for configuring parameters of Wi-Fi ports and the Wi-Fi protocol endpoints associated with them. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
    CREATE TABLE public.i_psec_policy_for_endpoint /* IPsecPolicyForEndpoint associates a PolicyGroup with a specific IP endpoint. This association's policies take priority
    OVER any PolicyGroup defined generically for the hosting system. The latter is defined
USING the IPsecPolicyForSystem association. */ ( id SERIAL PRIMARY KEY , ip_protocol_endpoint_id6 INTEGER REFERENCES ip_protocol_endpoint(id) , policy_group_id7 INTEGER REFERENCES policy_group(id) ); 
CREATE TABLE public.rule_that_generated_sa /* RuleThatGeneratedSA associates a SecurityAssociationEndpoint
WITH the SARule used to generate (or negotiate) it. */ ( id SERIAL PRIMARY KEY , sa_rule_id5 INTEGER REFERENCES sa_rule(id) , security_association_endpoint_id6 INTEGER REFERENCES security_association_endpoint(id) ); 
CREATE TABLE public.comm_mechanism_for_adapter /* CommMechanismForAdapter is an association
    BETWEEN an ObjectManager's communication mechanism and a ProtocolAdapter that supports that mechanism to translate requests and responses for the Object Manager. */ ( id SERIAL PRIMARY KEY , protocol_adapter_id6 INTEGER REFERENCES protocol_adapter(id) , object_manager_communication_mechanism_id7 INTEGER REFERENCES object_manager_communication_mechanism(id) ); 
    CREATE TABLE public.comm_mechanism_for_manager /* CommMechanismForManager is deprecated. See CIM_WBEMServer, CIM_ProtocolService and CIM_WBEMProtocolServiceCapabilties for describing WBEM Protocols. CommMechanismForManager is an association between an ObjectManager and an ObjectManagerCommunicationMechanism class. The latter describes a possible encoding/protocol/ set of operations for accessing the referenced ObjectManager. */ ( id SERIAL PRIMARY KEY , object_manager_id6 INTEGER REFERENCES object_manager(id) , object_manager_communication_mechanism_id7 INTEGER REFERENCES object_manager_communication_mechanism(id) ); 
    CREATE TABLE public.comm_mechanism_for_object_manager_adapter /* CommMechanismForObjectManagerAdapter is deprecated. See CIM_WBEMServer, CIM_ProtocolService and CIM_WBEMProtocolServiceCapabilties for describing WBEM Protocols CommMechanismForObjectManagerAdapter is an association between an ObjectManager's communication mechanism
        AND a ObjectManagerAdapter that supports that mechanism to translate requests
        AND responses for the Object Manager. */ ( id SERIAL PRIMARY KEY , object_manager_adapter_id6 INTEGER REFERENCES object_manager_adapter(id) , object_manager_communication_mechanism_id7 INTEGER REFERENCES object_manager_communication_mechanism(id) ); 
        CREATE TABLE public.namespace_in_manager /* CIM_NamespaceInManager is deprecated. See CIM_WBEMServerNamespace
        AND CIM_HostedDependency to model the relationship
    BETWEEN a WBEMServer
        AND the hosted namespaces. NamespaceInManager is an association describing the Namespaces hosted by a CIM ObjectManager. */ ( id SERIAL PRIMARY KEY , object_manager_id6 INTEGER REFERENCES object_manager(id) , namespace_id7 INTEGER REFERENCES namespace(id) ); 
        CREATE TABLE public.af_service /* This class represents a specialization to the general concept of forwarding network traffic by adding specific semantics that characterize the operation of the Assured Forwarding (AF) Service (RFC2597). This RFC defines four different AF classes to represent four different treatments of traffic (e.g., a different amount of forwarding resources, such AS buffer space
        AND bandwidth, are allocated). Within each AF class, IP packets are marked
WITH one of three possible drop precedence values. The drop precedence of a packet determines the relative importance of that packet compared to other packets within the same AF class if congestion occurs. A congested interface will try to avoid dropping packets
WITH a lower drop precedence value by instead discarding packets
WITH a higher drop precedence value. Note that [R2597] defines 12 DSCPs that together represent the AF Per Hop Behavior (PHB) group. Implementations are free to extend this (e.g., add more classes and/or drop precedences). The AFService class is modeled AS a specialization of DiffServService, which is IN turn a specialization of QoSService. This enables it to be related to higher-level QoSServices, AS well AS to lower-level conditioning sub-services (e.g., classification, metering, dropping, queuing,
        AND others). */ ( id SERIAL PRIMARY KEY , class_number text[] , dropper_number text[] , dscp text[] , phbid text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.autonomous_system /* An Autonomous System (AS) is a fundamental concept IN networking. An AS provides a structured view of routing by segregating the system that is
USING routing (e.g., the Internet,
        OR an extranet) into a SET of separately administered domains that each have their own independent routing policies. These domains are called autonomous systems. The classic definition of an AS,
        
FROM RFC1771, is '...a set of routers under a single technical administration, using an interior gateway protocol and common metrics to route packets within the AS, and using an exterior gateway protocol to route packets to other ASs'. The RFC continues: 'Since this classic definition was developed, it has become common for a single AS to use several interior gateway protocols and sometimes several sets of metrics within an AS. The use of the term Autonomous System here stresses the fact that, even when multiple IGPs and metrics are used, the administration of an AS appears to other ASs to have a single coherent interior routing plan and presents a consistent picture of what destinations are reachable through it.' */ ( id SERIAL PRIMARY KEY , as_number text[] , is_single_homed text[] , is_transit text[] , require_igpsync text[] , routing_update_source text[] , aggregation_type text[] , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.bgp_admin_distance /* This is a specialization of the Dependency association,
        AND defines the relationship
    BETWEEN a BGPService
        AND the AdministrativeDistances that it uses to control the (BGP) routing decisions that it makes. */ ( id SERIAL PRIMARY KEY , administrative_distance_id5 INTEGER REFERENCES administrative_distance(id) , bgp_service_id6 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.bgp_clusters_in_as /* This aggregation establishes 'whole-part' relationships
    BETWEEN an AutonomousSystem
        AND the BGPClusters that it contains. */ ( id SERIAL PRIMARY KEY , autonomous_system_id7 INTEGER REFERENCES autonomous_system(id) , bgp_cluster_id8 INTEGER REFERENCES bgp_cluster(id) ); 
        CREATE TABLE public.bgp_peer_group_service /* This defines the relationship
    BETWEEN a BGPService
        AND a specific BGPPeerGroup IN which it is executing. */ ( id SERIAL PRIMARY KEY , bgp_peer_group_id5 INTEGER REFERENCES bgp_peer_group(id) , bgp_service_id6 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.bgp_routing_policy /* This is a specialization of the Dependency association,
        AND defines the relationship
    BETWEEN a BGPService
        AND the RoutingPolicy that control it. */ ( id SERIAL PRIMARY KEY , routing_policy_id5 INTEGER REFERENCES routing_policy(id) , bgp_service_id6 INTEGER REFERENCES bgp_service(id) ); 
        CREATE TABLE public.binds_to_lanendpoint /* This association makes explicit the dependency of a SAP
        OR ProtocolEndpoint
    ON an underlying LANEndpoint,
    ON the same system. */ ( id SERIAL PRIMARY KEY , lan_endpoint_id5 INTEGER REFERENCES lan_endpoint(id) , service_access_point_id6 INTEGER REFERENCES service_access_point(id) , frame_type text[] ); 
    CREATE TABLE public.classifier_element /* ClassifierElement represents the linkage, within a single ClassifierService,
    BETWEEN a FilterList (that defines the criteria toSELECT packets
FROM the stream of packets coming into the Service)
        AND the next ConditioningService (to which the selected packets go after they leave the ClassifierService). ClassifierElement has no properties of its own. It is present to serve AS an aggregated entity into ClassifierService (using the ClassifierElementIn ClassifierService association),
        AND for associations
WITH its FilterList (ClassifierElementUsesFilterList)
        AND its next ConditioningService (NextServiceAfterClassifierElement). Note that a ClassifierElement may be associated
WITH a ClassifierService through the NextServiceAfterClassifier Element association. This will occur
    WHEN implementing hierarchical classification. IN this case, the ClassifierElement MUST NOT instantiate the ClassifierElement UsesFilterList association. Further,
    WHEN a ClassifierElement is associated
WITH a ClassifierService AS described above, the order of processing of the associated ClassifierService is a function of the ClassifierOrder property of the ClassifierElementInClassifierService aggregation. */ ( id SERIAL PRIMARY KEY , enabled text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
CREATE TABLE public.classifier_element_in_classifier_service /* This aggregation represents the relationship
    BETWEEN a ClassifierService
        AND the ClassifierElements that provide its fan-out function. ClassifierElements represent the traffic selectors for the Service. A ClassifierService typically aggregates multiple ClassifierElements. An individual Element, however, is aggregated only by a single ClassifierService. */ ( id SERIAL PRIMARY KEY , classifier_service_id7 INTEGER REFERENCES classifier_service(id) , classifier_element_id8 INTEGER REFERENCES classifier_element(id) , classifier_order text[] ); 
        CREATE TABLE public.classifier_element_uses_filter_list /* This association relates one
        OR more ClassifierElements
WITH a FilterList that defines the criteria toSELECT packets for the classifier to process. Note that a classifier is always modeled AS a ClassifierService that aggregates a SET of ClassifierElements. Each of these ClassifierElements is EITHER associated
WITH a single FilterList
        OR associated to another ClassifierService (via NextServiceAfterClassifier Element to describe hierarchical classification). */ ( id SERIAL PRIMARY KEY , filter_list_id5 INTEGER REFERENCES filter_list(id) , classifier_element_id6 INTEGER REFERENCES classifier_element(id) ); 
        CREATE TABLE public.classifier_filter_set /* IN order for a ClassifierService to correctly identify
        AND process network traffic, that traffic must be described by FilterEntries, which are aggregated into FilterLists. This association defines the Dependency of the ClassifierService
    ON FilterLists (and therefore, their FilterEntries). The cardinality of the association requires that the Classifier Service operate against at least one FilterList. The association is deprecated IN lieu of associating Filter Lists to ClassifierElements,
        AND ClassifierElements into ClassifierServices. The latter approach is very flexible regarding the implementations that can be modeled,
        AND removes the need to track individual traffic streams
USING an artificial model property, TrafficClass.
USING ClassifierElements, each stream is processed beginning
WITH a single FilterList
        AND progressing through various ConditioningServices, associated via instances of NextService. */ ( id SERIAL PRIMARY KEY , filter_list_id6 INTEGER REFERENCES filter_list(id) , classifier_service_id7 INTEGER REFERENCES classifier_service(id) , filter_list_position text[] ); 
        CREATE TABLE public.confederation /* The BGP speakers IN an AS are required to be fully meshed. This can lead to a huge number of TCP connections per router. One way to reduce the peering requirements is to use a confederation. A confederation effectively partitions one AS into a group of 'sub-ASs'. This enables ALL of the benefits of IBGP to be applied inside the confederation, while enabling EBGP to be run
    BETWEEN each confederation. It also enables certain BGP attribute values to be preserved
    BETWEEN confederations. However, to the outside world, the AS
WITH its confederations appear to be a single AS. */ ( id SERIAL PRIMARY KEY , autonomous_system_id7 INTEGER REFERENCES autonomous_system(id) , autonomous_system_id8 INTEGER REFERENCES autonomous_system(id) , parent_asnumber text[] , child_asnumber text[] ); 
CREATE TABLE public.endpoint_in_link /* This association connects an OSPFLink to the OSPFProtocol Endpoints that this link aggregates. */ ( id SERIAL PRIMARY KEY , ospf_link_id6 INTEGER REFERENCES ospf_link(id) , ospf_protocol_endpoint_base_id7 INTEGER REFERENCES ospf_protocol_endpoint_base(id) ); 
CREATE TABLE public.fail_next_scheduler /* This association is a subclass of NextScheduler,
        AND defines a predecessor-successor relationship
    BETWEEN a NonWork ConservingSchedulingService
        AND another PacketScheduling Service. It indicates that the NonWorkConserving scheduler may pass up a scheduling opportunity (thereby behaving IN a non-work conserving manner),
        AND make the resulting bandwidth available to the FollowingService scheduler. */ ( id SERIAL PRIMARY KEY , non_work_conserving_scheduling_service_id5 INTEGER REFERENCES non_work_conserving_scheduling_service(id) , packet_scheduling_service_id6 INTEGER REFERENCES packet_scheduling_service(id) ); 
        CREATE TABLE public.filter_entry_in_system /* ALL filter entries (FilterEntryBase
        AND its subclasses) are defined IN the context of a ComputerSystem/network device,
WHERE they are used to identify
        AND act
    ON network traffic. Note that this class is deprecated since its subclassing is NOT correct. It subclasses
FROM System Component, but a FilterEntryBase is NOT a Component of a System. Instead, it is hosted/scoped by the System. IN versions up to CIM 2.6, FilterEntryInSystem was a mandatory, Weak relationship. This is no longer true, beginning
WITH CIM V2.7. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , filter_entry_base_id8 INTEGER REFERENCES filter_entry_base(id) ); 
CREATE TABLE public.filter_list_in_system /* FilterLists are defined IN the context of a ComputerSystem (e.g., a router, firewall
        OR host). Note that this class is deprecated since its subclassing is NOT correct. It subclasses
FROM SystemComponent, but a FilterList is NOT a Component of a System. Instead, it is hosted/scoped by the System. IN versions up to CIM 2.6, FilterListInSystem was a mandatory, Weak relationship. This is no longer true, beginning
WITH CIM V2.7. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , filter_list_id8 INTEGER REFERENCES filter_list(id) ); 
CREATE TABLE public.filter_of_security_association /* FilterOfSecurityAssociation associates a network traffic specification (i.e., a FilterList)
WITH a SecurityAssociation Endpoint,
         to which the filter list applies. */ ( id SERIAL PRIMARY KEY ,
         filter_list_id5 INTEGER REFERENCES filter_list(id) ,
         security_association_endpoint_id6 INTEGER REFERENCES security_association_endpoint(id) ); 
         CREATE TABLE public.forwarded_routes /* This assocation makes explicit the IP routes that are defined IN the context of a specific ForwardingService. Every ForwardingService can have its own unique SET of IP routing destinations. The association is deprecated since it is incorrect to mandate the existence of a ForwardingService IN order to define the existence of a route. */ ( id SERIAL PRIMARY KEY ,
         forwarding_service_id6 INTEGER REFERENCES forwarding_service(id) ,
         ip_route_id7 INTEGER REFERENCES ip_route(id) ,
         admin_distance text[] ,
         path_metric text[] ); 
         CREATE TABLE public.hosted_admin_distance /* AdministrativeDistance,
         being a global object,
         is weak to the AdminDomain that contains it. This association formalizes that relationship. */ ( id SERIAL PRIMARY KEY ,
         admin_domain_id5 INTEGER REFERENCES admin_domain(id) ,
         administrative_distance_id6 INTEGER REFERENCES administrative_distance(id) ); 
         CREATE TABLE public.hosted_bgpattributes /* The class BGPAttributes is weak to the AutonomousSystem that contains it. This association formalizes that relationship. */ ( id SERIAL PRIMARY KEY ,
         autonomous_system_id5 INTEGER REFERENCES autonomous_system(id) ,
         bgp_attributes_id6 INTEGER REFERENCES bgp_attributes(id) ); 
         CREATE TABLE public.hosted_bgppeer_group /* A BGPPeerGroup is weak to the AutonomousSystem that contains it. This association formalizes that relationship. */ ( id SERIAL PRIMARY KEY ,
         autonomous_system_id5 INTEGER REFERENCES autonomous_system(id) ,
         bgp_peer_group_id6 INTEGER REFERENCES bgp_peer_group(id) ); 
         CREATE TABLE public.hosted_bgproute_map /* A BGPRouteMap is weak to the AutonomousSystem that contains it. This association formalizes that relationship. */ ( id SERIAL PRIMARY KEY ,
         autonomous_system_id5 INTEGER REFERENCES autonomous_system(id) ,
         bgp_route_map_id6 INTEGER REFERENCES bgp_route_map(id) ); 
         CREATE TABLE public.hosted_filter_entry_base /* ALL filter entries (FilterEntryBase
        AND its subclasses) are defined IN the context of a ComputerSystem/network device,
WHERE the filter entries are used
        AND administered. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , filter_entry_base_id6 INTEGER REFERENCES filter_entry_base(id) ); 
        CREATE TABLE public.hosted_filter_list /* FilterLists are defined IN the context of a ComputerSystem/ network device,
WHERE the list is used
        AND administered. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , filter_list_id6 INTEGER REFERENCES filter_list(id) ); 
        CREATE TABLE public.hosted_forwarding_services /* This is a specialization of CIM_HostedService, which is an association
    BETWEEN a Service
        AND the System
    ON which the functionality resides. The class, HostedForwardingServices, is deprecated since it provides no additional semantics
    OVER HostedService,
        AND unecessarily restricts the Service to a single ComputerSystem,
    WHEN the Service could reside IN a Network
        OR other higher level System. */ ( id SERIAL PRIMARY KEY , computer_system_id6 INTEGER REFERENCES computer_system(id) , forwarding_service_id7 INTEGER REFERENCES forwarding_service(id) ); 
        CREATE TABLE public.hosted_routing_policy /* A RoutingPolicy is weak to the network device (i.e., the ComputerSystem) that contains it. This association formalizes that relationship. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , routing_policy_id6 INTEGER REFERENCES routing_policy(id) ); 
        CREATE TABLE public.hosted_routing_services /* This is a specialization of CIM_HostedService, which is an association
    BETWEEN a Service
        AND the System
    ON which the functionality resides. The class, HostedRoutingServices, is deprecated since it provides no additional semantics
    OVER HostedService,
        AND unecessarily restricts the Service to a single ComputerSystem,
    WHEN the Service could reside IN a Network
        OR other higher level System. */ ( id SERIAL PRIMARY KEY , computer_system_id6 INTEGER REFERENCES computer_system(id) , route_calculation_service_id7 INTEGER REFERENCES route_calculation_service(id) ); 
        CREATE TABLE public.ikesa_endpoint /* IKESAEndpoint is created IN the first phase of SA negotiation
        AND protects the key negotiation traffic. This endpoint is only created
    WHEN IKE is the key exchange protocol. Other protocols
        AND their endpoints will be defined IN a future release. */ ( id SERIAL PRIMARY KEY , initiator_cookie text[] , responder_cookie text[] , cipher_algorithm text[] , other_cipher_algorithm text[] , hash_algorithm text[] , other_hash_algorithm text[] , authentication_method text[] , other_authentication_method text[] , group_id text[] , vendor_id text[] , install_date text[] , lifetime_seconds text[] , refresh_threshold_seconds_percentage text[] , idle_duration_seconds text[] , lifetime_kilobytes text[] , refresh_threshold_kbytes_percentage text[] , packet_logging_active text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ip_configuration_service /* CIM_IPConfigurationService provides management of the IP configuration associated
WITH a LANEndpoint
        OR IPProtocolEndpoint
        OR IPNetworkConnection
        OR the global IP configuration for the ComputerSystem. CIM_IPConfigurationService also provides methods to support the additon
        AND removal of an IPProtocolEndpoint to support the addition of a Layer 3 interface to a port, system
        OR network. */ ( id SERIAL PRIMARY KEY ,
         system_creation_class_name text[] ,
         system_name text[] ,
         creation_class_name text[] ,
         name text[] ,
         primary_owner_name text[] ,
         primary_owner_contact text[] ,
         start_mode text[] ,
         started text[] ,
         lo_sid text[] ,
         lo_sorg_id text[] ,
         enabled_state text[] ,
         other_enabled_state text[] ,
         requested_state text[] ,
         enabled_default text[] ,
         time_of_last_state_change text[] ,
         transitioning_to_state text[] ,
         install_date text[] ,
         status text[] ,
         health_state text[] ,
         communication_status text[] ,
         detailed_status text[] ,
         operating_status text[] ,
         primary_status text[] ,
         instance_id text[] ,
         caption text[] ,
         description text[] ,
         element_name text[] ,
         generation text[] ); 
         CREATE TABLE public.ip_encapsulation_management_service /* The service has a SET of extrinsic methods to control the creation
        AND removal of the instances required to create an IP encapsulation gateway also known AS an IP Tunnel gateway.. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ip_loopback /* A loopback interface is a virtual Layer 3 interface typically found IN an Ethernet Switch
        OR router that has a single endpoint that is always up. Packets that are transmitted
    OVER a loopback interface are immediately received by this interface. */ ( id SERIAL PRIMARY KEY , element_name text[] , i_pv4_address text[] , i_pv6_address text[] , address text[] , subnet_mask text[] , prefix_length text[] , address_type text[] , ip_version_support text[] , protocol_iftype text[] , address_origin text[] , i_pv6_address_type text[] , i_pv6_subnet_prefix_length text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , generation text[] ); 
    CREATE TABLE public.i_psec_saendpoint /* IPsecSAEndpoints are types of SecurityAssociationEndpoints representing both negotiated
        AND static SAs that correspond to AH, ESP,
        OR IPCOMP transforms. */ ( id SERIAL PRIMARY KEY , spi text[] , inbound_direction text[] , encapsulation_mode text[] , df_handling text[] , pfs_inuse text[] , install_date text[] , lifetime_seconds text[] , refresh_threshold_seconds_percentage text[] , idle_duration_seconds text[] , lifetime_kilobytes text[] , refresh_threshold_kbytes_percentage text[] , packet_logging_active text[] , description text[] , enabled_state text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , protocol_iftype text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.in_bgppeer_group /* This aggregation defines the specific routers (i.e., ComputerSystems) that participate IN a PeerGroup. */ ( id SERIAL PRIMARY KEY , bgp_peer_group_id6 INTEGER REFERENCES bgp_peer_group(id) , computer_system_id7 INTEGER REFERENCES computer_system(id) ); 
        CREATE TABLE public.in_segment /* Defines a LANEndpoint AS a member of a specific LANSegment. Note that one of this association's references (LANSegment) is deprecated, as well as its superclass (InLogicalNetwork). Following the same logic as its parent, this association is deprecated to the MemberOfCollection association. */ ( id SERIAL PRIMARY KEY , lan_segment_id7 INTEGER REFERENCES lan_segment(id) , lan_endpoint_id8 INTEGER REFERENCES lan_endpoint(id) ); 
        CREATE TABLE public.inbound_vlan /* This class is deprecated in lieu or not being necessary to indicate whether the VLAN is inbound/outbound This association makes explicit the operational dependencies of a SwitchPort when operating in a VLAN. If there is an association between a particular SwitchPort and a particular VLAN, then there is the possibility that a packet received by the port will be assigned to the VLAN (or if the packet already has a VLAN tag, that the packet will not be dropped). If there is no such association, then there is NO possibility that a packet received by the port will progress through the switch having been assigned to the referenced VLAN. */ ( id SERIAL PRIMARY KEY , vlan_id6 INTEGER REFERENCES vlan(id) , switch_port_id7 INTEGER REFERENCES switch_port(id) , tagged text[] , default_ text[] ); 
        CREATE TABLE public.network /* Network is a subclass of AdminDomain that groups interconnected networking and computing objects capable of exchanging information. Instances of CIM_Network can represent an enterprise's global network
        OR specific connectivity domains within the global network. These concepts are similar to those defined for the Network object IN ITU's M.3100 specification. */ ( id SERIAL PRIMARY KEY , other_type_description text[] , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.network_services_in_admin_domain /* This association establishes the Dependency relationships that exist between an administrative domain and the Network Services that it hosts. It is deprecated since AdminDomains can contain any ManagedSystemElements. There is no special relationship needed for NetworkServices. In addition, the Min (1) cardinality on AdminDomain is not valid - since it may not be possible to define every NetworkService in the context of one or more Domains. */ ( id SERIAL PRIMARY KEY , admin_domain_id6 INTEGER REFERENCES admin_domain(id) , network_service_id7 INTEGER REFERENCES network_service(id) ); 
        CREATE TABLE public.networks_in_admin_domain /* This association is used to define the set of Logical Networks contained in an AdminDomain. This has the implied semantics that this set of LogicalNetworks are all managed by the same network administrator that manages the domain. Since the LogicalNetwork class is deprecated in lieu of ConnectivityCollection, this association is no longer necessary. It is deprecated to the HostedCollection association, that is inherited by ConnectivityCollection from its superclass, SystemSpecificCollection. */ ( id SERIAL PRIMARY KEY , admin_domain_id6 INTEGER REFERENCES admin_domain(id) , logical_network_id7 INTEGER REFERENCES logical_network(id) ); 
        CREATE TABLE public.next_service_after_classifier_element /* An association used to establish a predecessor-successor relationship between a single ClassifierElement (within a ClassifierService) and the next ConditioningService object that further processes the selected traffic. Note that the cardinalities indicate that a FollowingService MUST be defined, after the ClassifierElement. This is because there is no reason to classify traffic unless further processing will be done. */ ( id SERIAL PRIMARY KEY , classifier_element_id5 INTEGER REFERENCES classifier_element(id) , conditioning_service_id6 INTEGER REFERENCES conditioning_service(id) ); 
        CREATE TABLE public.ospf_protocol_endpoint /* This class represents the OSPF configuration of an interface running OSPF. The instance of this class should be connected to an IPProtocolEndpoint instance via a BindsTo association. The IPProtocolEndpoint instance is the Antecedent and the OSPFProtocolEndpoint instance is the Dependent in the BindsTo association. */ ( id SERIAL PRIMARY KEY , priority text[] , poll_interval text[] , cost text[] , if_demand text[] , enabled_state text[] , transit_delay text[] , retransmit_interval text[] , auth_type text[] , other_auth_type text[] , auth_key text[] , protocol_iftype text[] , description text[] , time_of_last_state_change text[] , name text[] , name_format text[] , protocol_type text[] , other_type_description text[] , broadcast_reset_supported text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.outbound_vlan /* This class is deprecated in lieu or not being necessary to indicate whether the VLAN is inbound/outbound This association makes explicit the operational dependencies of a SwitchPort when operating in a VLAN. If there is no instance of OutboundVLAN between a given SwitchPort and VLAN, then any packet that has been assigned to the VLAN and whose destination address is associated with the port will be dropped by the switch without being transmitted. Otherwise, the packet will be transmitted. */ ( id SERIAL PRIMARY KEY , vlan_id6 INTEGER REFERENCES vlan(id) , switch_port_id7 INTEGER REFERENCES switch_port(id) , tagged text[] ); 
        CREATE TABLE public.peer_of_saendpoint /* PeerOfIPsecSAEndpoint identifies the peer of the IPsecSAEndpoint. */ ( id SERIAL PRIMARY KEY , remote_service_access_point_id5 INTEGER REFERENCES remote_service_access_point(id) , i_psec_saendpoint_id6 INTEGER REFERENCES i_psec_saendpoint(id) ); 
        CREATE TABLE public.phase1_saused_for_phase2 /* Phase1SAUsedForPhase2 associates a phase 1 endpoint (such as an IKESAEndpoint) with an IPsecSAEndpoint that was negotiated using that phase 1 Security Association. */ ( id SERIAL PRIMARY KEY , security_association_endpoint_id5 INTEGER REFERENCES security_association_endpoint(id) , i_psec_saendpoint_id6 INTEGER REFERENCES i_psec_saendpoint(id) ); 
        CREATE TABLE public.related_spanning_tree /* This association identifies the spanning tree in which a forwarding database (TransparentBridgingService) is nested. */ ( id SERIAL PRIMARY KEY , transparent_bridging_service_id5 INTEGER REFERENCES transparent_bridging_service(id) , spanning_tree_service_id6 INTEGER REFERENCES spanning_tree_service(id) , type_of_dependency text[] , restart_service text[] ); 
        CREATE TABLE public.related_transparent_bridging_service /* This class is deprecated as a fall out of the previous deprecations within the existing model The association between a VLAN and the forwarding database (some use the term filtering database) used to determine which port a packet should be transmitted on, given that it is assigned to the VLAN and that it has a particular destination MAC address. The TransparentBridgingService represents a forwarding database. */ ( id SERIAL PRIMARY KEY , vlan_id6 INTEGER REFERENCES vlan(id) , transparent_bridging_service_id7 INTEGER REFERENCES transparent_bridging_service(id) ); 
        CREATE TABLE public.routers_in_as /* This aggregation establishes 'whole-part' relationships between an AutonomousSystem and the routers that it contains. In addition, the routers in the AS share common configuration information, and are commonly administered. */ ( id SERIAL PRIMARY KEY , autonomous_system_id7 INTEGER REFERENCES autonomous_system(id) , computer_system_id8 INTEGER REFERENCES computer_system(id) , add_community_value text[] , role text[] , other_role_description text[] ); 
        CREATE TABLE public.routers_in_bgpcluster /* This aggregation establishes the routers (ComputerSystems) in a BGPCluster. At least three routers are required to form a cluster - a reflector and two clients. The routers that form a cluster share common configuration information. */ ( id SERIAL PRIMARY KEY , bgp_cluster_id6 INTEGER REFERENCES bgp_cluster(id) , computer_system_id7 INTEGER REFERENCES computer_system(id) ); 
        CREATE TABLE public.routing_protocol_domain /* A Routing Protocol Domain is a collection of routers which coordinate their routing knowledge using a single [instance of a] routing protocol. This class represents the area/layer/level/zone like property of a routing protocol, such as an OSPF (area), IS-IS (layer) or PNNI (level). It does not represent the entire routing domain in every case. For example for OSPF, it represents an Area, but in the case of RIP, it represents the whole RIP domain. Any common attributes of these routing domains can be placed in this class in future versions of CIM. */ ( id SERIAL PRIMARY KEY , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.routing_protocol_domain_in_as /* This assocation connects an AutonomousSystem to the routing domains that it contains. */ ( id SERIAL PRIMARY KEY , autonomous_system_id6 INTEGER REFERENCES autonomous_system(id) , routing_protocol_domain_id7 INTEGER REFERENCES routing_protocol_domain(id) ); 
        CREATE TABLE public.snmp_trap_target /* SNMPTrapTarget contains information describing a remote system, to which Informs and Traps are sent. An SNMPService is related via a ServiceSAPDependency association to one or more instances of this class. */ ( id SERIAL PRIMARY KEY , access_info text[] , port_protocol text[] , port_info text[] , notification_message text[] , snmp_version text[] , community_string text[] , other_protocol_description text[] , info_format text[] , other_info_format_description text[] , access_context text[] , other_access_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.switch_service_transparent_bridging /* An association linking a SwitchService to a component TransparentBridgingService. The cardinality of the TransparentBridgingService is 0..1 for a VLAN-unaware switch. */ ( id SERIAL PRIMARY KEY , switch_service_id6 INTEGER REFERENCES switch_service(id) , transparent_bridging_service_id7 INTEGER REFERENCES transparent_bridging_service(id) ); 
        CREATE TABLE public.switchable /* A switch port has a LANEndpoint that is exposed via this relationship. The associaiton is deprecated since a binding is not the correct relationship. The SwitchPort is simply another aspect of the LANEndpoint - which is indicated by the EndpointIdentity relationship. */ ( id SERIAL PRIMARY KEY , lan_endpoint_id6 INTEGER REFERENCES lan_endpoint(id) , switch_port_id7 INTEGER REFERENCES switch_port(id) , frame_type text[] ); 
        CREATE TABLE public.transform_of_security_association /* TransformOfSecurityAssociation maps a SecurityAssociation Endpoint with the transform that it uses. For security, no keying material of the SA is exposed. */ ( id SERIAL PRIMARY KEY , sa_transform_id5 INTEGER REFERENCES sa_transform(id) , i_psec_saendpoint_id6 INTEGER REFERENCES i_psec_saendpoint(id) , is_default text[] , is_current text[] , is_next text[] ); 
        CREATE TABLE public.transparent_bridging_dynamic_forwarding /* This association links an instance of the Transparent BridgingService to the entries of its forwarding database. The forwarding database is weak to the Service. */ ( id SERIAL PRIMARY KEY , transparent_bridging_service_id5 INTEGER REFERENCES transparent_bridging_service(id) , dynamic_forwarding_entry_id6 INTEGER REFERENCES dynamic_forwarding_entry(id) ); 
        CREATE TABLE public.vlan_network /* CIM_VLANNetwork represent the management aspects of a Virtual Local Area Network (VLAN) as used within a network switch. */ ( id SERIAL PRIMARY KEY , vlan_id text[] , sa_identifier text[] , transmission_size text[] , type_of_media text[] , other_type_description text[] , private_vlantype text[] , primary_vlanid text[] , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.vrf_configuration_service /* CIM_VRFConfigurationService description contains a set of extrinsic methods to manage Virtual Routing and Forwarding tables. The methods include the creation and removal of the VRFs and the managements of the services, port, interfaces and routers, routes that are associated in VRF context. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.i_scsiconfiguration_service /* The iSCSIConfigurationService provides methods that allow a client to manipulate iSCSIProtocolEndpoints in an iSCSI Node. iSCSIProtocolController models the iSCSI Port. The instance of the service is scoped by an instance of ComputerSystem that represents that Network Entity. The capabilities of this service are defined in the companion class iSCSIConfigurationCapabilities. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.accept_credential_from /* This association specifies that a credential management service (e.g., CertificateAuthority or Kerberos key distribution service) is to be trusted to certify credentials, presented at the packet level. The association defines an 'approved' CredentialManagementService that is used for validation. The use of this class is best explained via an example: If a CertificateAuthority is specified using this association, and a corresponding X509CredentialFilterEntry is also associated with a PacketFilterCondition (via the relationship, FilterOfPacketCondition), then the credential MUST match the FilterEntry data AND be certified by that CA (or one of the CredentialManagementServices in its trust hierarchy). Otherwise, the X509CredentialFilterEntry is deemed not to match. If a credential is certified by a CredentialManagementService associated with the PacketFilterCondition through the AcceptCredentialFrom relationship, but there is no corresponding CredentialFilterEntry, then all credentials from the related service are considered to match. */ ( id SERIAL PRIMARY KEY , credential_management_service_id6 INTEGER REFERENCES credential_management_service(id) , packet_filter_condition_id7 INTEGER REFERENCES packet_filter_condition(id) ); 
        CREATE TABLE public.policy_group_in_system /* An association that links a PolicyGroup to the System in whose scope the Group is defined. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , policy_group_id6 INTEGER REFERENCES policy_group(id) , priority text[] ); 
        CREATE TABLE public.policy_repository /* The term 'PolicyRepository' has been confusing to both developers and users of the model. The replacement class name describes model element properly and is less likely to be confused with a data repository. A class representing an administratively defined container for reusable policy-related information. This class does not introduce any additional properties beyond those in its superclass AdminDomain. It does, however, participate in a number of unique associations. An instance of this class uses the NameFormat value "PolicyRepository". */ ( id SERIAL PRIMARY KEY , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_repository_in_policy_repository /* The term 'PolicyRepository' has been confusing to both developers and users of the model. The replacement class name describes model element properly and is less likely to be confused with a data repository. ContainedDomain is a general purpose mechanism for expressing domain hierarchy. A relationship that aggregates one or more lower-level PolicyRepositories into a higher-level Repository. */ ( id SERIAL PRIMARY KEY , policy_repository_id7 INTEGER REFERENCES policy_repository(id) , policy_repository_id8 INTEGER REFERENCES policy_repository(id) ); 
        CREATE TABLE public.policy_role_collection_in_system /* PolicyRoleCollectionInSystem is an association used to establish a relationship between a collection and an 'owning' System such as an AdminDomain or ComputerSystem. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , policy_role_collection_id6 INTEGER REFERENCES policy_role_collection(id) ); 
        CREATE TABLE public.policy_rule_in_system /* An association that links a PolicyRule to the System in whose scope the Rule is defined. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , policy_rule_id6 INTEGER REFERENCES policy_rule(id) , priority text[] ); 
        CREATE TABLE public.reusable_policy_container /* A class representing an administratively defined container for reusable policy-related information. This class does not introduce any additional properties beyond those in its superclass AdminDomain. It does, however, participate in a unique association for containing policy elements. An instance of this class uses the NameFormat value "ReusablePolicyContainer". */ ( id SERIAL PRIMARY KEY , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.allocated_dma /* An association between a LogicalDevice and a DMA System Resource indicating that the DMA Channel is assigned to the Device. */ ( id SERIAL PRIMARY KEY , dma_id5 INTEGER REFERENCES dma(id) , logical_device_id6 INTEGER REFERENCES logical_device(id) , bus_master text[] ); 
        CREATE TABLE public.boot_service /* A class derived from Service that provides the controls to manage the boot configuration of a managed computer system or device. This includes changing the order of the boot devices and affecting settings on managed elements during the boot process. This service can also affect the load of a specific operating system on the computer system through a BootSourceSetting that points to a specific operating system image. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.boot_service_access_by_sap /* BootServiceAccessBySAP is the relationship between a Boot Service and its access points. */ ( id SERIAL PRIMARY KEY , boot_service_id5 INTEGER REFERENCES boot_service(id) , boot_sap_id6 INTEGER REFERENCES boot_sap(id) ); 
        CREATE TABLE public.cifs_share /* A CIFSShare represents a File, Directory, or Print Queue that is made accessible to other systems. If a File or Directory, it is associated via CIM_SharedElement. And on the client-side, the CIFSShare representing the File or Directory is associated with its mount point via CIM_ImportedShare. Other subclasses of LogicalIdentity would make the associations for other types of CIFSShare. */ ( id SERIAL PRIMARY KEY , name text[] , sharing_directory text[] , instance_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.cluster /* A class derived from ComputerSystem that 'is made up of' two or more ComputerSystems which operate together as an atomic, functional whole to increase the performance, resources and/or RAS (Reliability, Availability and Serviceability) of the component ComputerSystems, related to some aspects of these ComputerSystems. */ ( id SERIAL PRIMARY KEY , interconnect text[] , interconnect_address text[] , max_number_of_nodes text[] , cluster_state text[] , name_format text[] , reset_capability text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.clustering_service /* ClusteringService represents the functionality provided by a Cluster. For example, failover functionality may be modeled as a Service of a failover Cluster. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.component_cs /* A ComputerSystem can aggregate another ComputerSystem. This association can be used to model MPP Systems with workstation frontends, an I2O subsystem embedded in a Unitary ComputerSystem, or a System that splits functionality between two processors, potentially running different Operating Systems. For example, if a CISC Processor and its associated OperatingSystem, are used for user interface and file support, and a RISC Processor and its OS are used for complex mathematical operations, this could be modeled as two ComputerSystems where one aggregates the other. In some cases, this could be modeled as a Cluster. The difference is the focus of the relationship. ComponentCS represents that unique and distinct ComputerSystems are aggregated by a higher level CS object. However, each of the component CSs are still distinguishable entities and are only viewed as such. Alternately, with a Cluster, the ComputerSystems that participate in it are inconsequential, when viewed through the 'Cluster System'. When instantiating or subclassing the ComponentCS relationship, care should be taken that the component ComputerSystem meets the definitional requirements of a ComputerSystem - ie, a functional whole that provides compute capabilities and aggregates System Devices, an OperatingSystem, etc. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , computer_system_id8 INTEGER REFERENCES computer_system(id) ); 
        CREATE TABLE public.computer_system_resource /* An association between a ComputerSystem and the System Resources available on it. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , system_resource_id8 INTEGER REFERENCES system_resource(id) ); 
        CREATE TABLE public.file_export_service /* Provides configuration support for exporting elements ('files') of a FileSystem. FileExportService(s) are hosted by a ComputerSystem that exports the files (these would be the Filers in a NAS Head). These shared elements (FileShares) are accessed through ProtocolEndpoint(s) hosted by the Filer that support the specified file-sharing protocol. FileShares are associated with the Service via ServiceAffectsElement and with the ProtocolEndpoint(s) via SAPAvailableForElement. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.file_server_configuration_service /* This service provides active management for a FileServer. It supports the creation, modification, and deletion of FileServer elements and ConcreteJobs for long-runningtasks. In addition, it supports the creation, modification, and deletion of IP Interfaces associated with a given FileServer. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.hosted_boot_sap /* HostedBootSAP defines the hosting UnitaryComputerSystem for a BootSAP. Since this relationship is subclassed from HostedAccessPoint, it inherits the scoping/naming scheme defined for AccessPoint - where an AccessPoint is weak to its hosting System. In this case, a BootSAP must be weak to its hosting UnitaryComputerSystem. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , boot_sap_id6 INTEGER REFERENCES boot_sap(id) ); 
        CREATE TABLE public.hosted_boot_service /* HostedBootService defines the hosting System for a Boot Service. Since this relationship is subclassed from Hosted Service, it inherits the scoping/naming scheme defined for Service - where a Service is weak to its hosting System. */ ( id SERIAL PRIMARY KEY , system_id5 INTEGER REFERENCES system(id) , boot_service_id6 INTEGER REFERENCES boot_service(id) ); 
        CREATE TABLE public.hosted_cluster_sap /* HostedClusterSAP defines the hosting ComputerSystem for a ClusteringSAP. Since this relationship is subclassed from HostedAccessPoint, it inherits the scoping/naming scheme defined for AccessPoint - where an AccessPoint is weak to its hosting System. In this case, a ClusteringSAP must be weak to its hosting ComputerSystem. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , clustering_sap_id6 INTEGER REFERENCES clustering_sap(id) ); 
        CREATE TABLE public.hosted_cluster_service /* HostedClusterService defines the hosting Cluster for a ClusteringService. Since this relationship is subclassed from HostedService, it inherits the scoping/naming scheme defined for Service - where a Service is weak to its hosting System. In this case, a ClusteringService must be weak to its hosting Cluster System. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , clustering_service_id6 INTEGER REFERENCES clustering_service(id) ); 
        CREATE TABLE public.hosting_cs /* A VirtualComputerSystem is hosted on another ComputerSystem. This association makes that relationship explicit. */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , virtual_computer_system_id6 INTEGER REFERENCES virtual_computer_system(id) ); 
        CREATE TABLE public.participating_cs /* A Cluster is composed of two or more ComputerSystems, operating together. A ComputerSystem may participate in multiple Clusters. When first establishing or bringing up a Cluster, only one ComputerSystem may be defined as participating in it. Therfore, the cardinality of the association for the ComputerSystem reference is Min (1). */ ( id SERIAL PRIMARY KEY , computer_system_id5 INTEGER REFERENCES computer_system(id) , cluster_id6 INTEGER REFERENCES cluster(id) , state_of_node text[] , role_of_node text[] ); 
        CREATE TABLE public.system_partition /* A Partition is an instance of a UnitaryComputerSystem (with its own OperatingSystem and Devices dedicated to the Partition) that is supported by underlying hardware and software. A Partition is not a virtualization of a Computer System, but the segmentation of the System's compute capabilities. Partitions can run independent copies of possibly different OperatingSystems
        AND have dedicated Devices. The 'real', underlying System (perhaps a Cluster
        OR another UnitaryComputerSystem) aggregates its Partitions. These semantics are described by the System Partition association. The use of this association has been deprecated IN lieu of
USING HostedDependency. */ ( id SERIAL PRIMARY KEY , computer_system_id8 INTEGER REFERENCES computer_system(id) , unitary_computer_system_id9 INTEGER REFERENCES unitary_computer_system(id) ); 
CREATE TABLE public.authenticate_for_use /* CIM_AuthenticateForUse is an association used to provide an AuthenticationService
WITH the AuthenticationRequirement it needs to do its job. This association is unnecessary
        AND therefore deprecated,
         since it is implied that an Identity MUST be authenticated (its CurrentlyAuthenticatedBoolean SET to TRUE) IN order to have any Privileges. */ ( id SERIAL PRIMARY KEY ,
         authentication_requirement_id6 INTEGER REFERENCES authentication_requirement(id) ,
         authentication_service_id7 INTEGER REFERENCES authentication_service(id) ); 
         CREATE TABLE public.certificate_authority /* A Certificate Authority (CA) is a credential management service that issues
        AND cryptographically signs certificates. It acts AS an trusted third-party intermediary IN establishing trust relationships. The CA authenticates the identity of the holder of the 'private' key, related to the certificate's 'public' key. */ ( id SERIAL PRIMARY KEY , ca_policy_statement text[] , ca_distinguished_name text[] , crl_refresh_frequency text[] , max_chain_length text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.certificate_management_service /* CIM_CertificateManagementService is used for managing X509 based certificates. */ ( id SERIAL PRIMARY KEY , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.ike_secret_is_named /* CIM_IKESecretIsNamed association provides the relationship between a SharedSecretService and a NamedSharedIKESecret. */ ( id SERIAL PRIMARY KEY , shared_secret_service_id6 INTEGER REFERENCES shared_secret_service(id) , named_shared_ikesecret_id7 INTEGER REFERENCES named_shared_ikesecret(id) ); 
        CREATE TABLE public.kdc_issues_kerberos_ticket /* The KDC issues and owns Kerberos tickets. This association captures the relationship between the KDC and its issued tickets. */ ( id SERIAL PRIMARY KEY , kerberos_key_distribution_center_id6 INTEGER REFERENCES kerberos_key_distribution_center(id) , kerberos_ticket_id7 INTEGER REFERENCES kerberos_ticket(id) ); 
        CREATE TABLE public.locally_managed_public_key /* CIM_LocallyManagedPublicKey association provides the relationship between a PublicKeyManagementService and an UnsignedPublicKey. */ ( id SERIAL PRIMARY KEY , public_key_management_service_id6 INTEGER REFERENCES public_key_management_service(id) , unsigned_public_key_id7 INTEGER REFERENCES unsigned_public_key(id) ); 
        CREATE TABLE public.manages_account_on_system /* The CIM_ManagesAccountOnSystem provides the association between a System and the AccountManagementService that manages accounts for that system. This association does not add any constraints or semantics to ServiceAvailableToElement. As a result, it is deprecated. */ ( id SERIAL PRIMARY KEY , account_management_service_id6 INTEGER REFERENCES account_management_service(id) , system_id7 INTEGER REFERENCES system(id) ); 
        CREATE TABLE public.shared_secret_is_shared /* This relationship associates a SharedSecretService with the SecretKey it verifies. */ ( id SERIAL PRIMARY KEY , shared_secret_service_id6 INTEGER REFERENCES shared_secret_service(id) , shared_secret_id7 INTEGER REFERENCES shared_secret(id) ); 
        CREATE TABLE public.architecture_check /* ArchitectureCheck specifies the hardware platform on which a SoftwareElement can run. The details of this Check are compared with the information found in the CIM_Processor object, related to the CIM_ComputerSystem instance that describes the environment (related by the association, CIM_ComputerSystemProcessor). There should be at least one CIM_Processor that satisfies the details of the Check. In other words, all the processors on the relevant computer system do not need to satisfy the Check. */ ( id SERIAL PRIMARY KEY , architecture_type text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , check_id text[] , check_mode text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.copy_file_action /* CopyFileAction specifies the files to be moved or copied to a new location. The to/from information for the copy is specified using either the ToDirectorySpecification/ FromDirectorySpecification or the ToDirectoryAction/ FromDirectoryAction associations. The first set is used when the source and/or the target are to exist before any Actions are taken. The second set is used when the source and/or target are created as a part of a previous Action (specified using the association, ActionSequence). */ ( id SERIAL PRIMARY KEY , source text[] , destination text[] , delete_after_copy text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.create_directory_action /* CreateDirectoryAction creates empty directories for SoftwareElements to be installed locally. */ ( id SERIAL PRIMARY KEY , directory_name text[] , name text[] , version text[] , software_element_state text[] , software_element_id text[] , target_operating_system text[] , action_id text[] , direction text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.directory_specification_file /* The CIM_DirectorySpecificationFile association identifies the directory that contains the file being checked in the CIM_ FileSpecification class. */ ( id SERIAL PRIMARY KEY , directory_specification_id5 INTEGER REFERENCES directory_specification(id) , file_specification_id6 INTEGER REFERENCES file_specification(id) ); 
        CREATE TABLE public.j2ee_application_hosted_on_server /* The CIM_J2eeApplicationHostedOnServer association identifies a hosting J2ee Server for a particular J2EE Application. */ ( id SERIAL PRIMARY KEY , j2ee_server_id5 INTEGER REFERENCES j2ee_server(id) , j2ee_application_id6 INTEGER REFERENCES j2ee_application(id) ); 
        CREATE TABLE public.j2ee_connection_factory_available_to_jcaresource /* CIM_J2eeConnectionFactoryAvailableToJCAResource is an association that identifies the connection factory that is available to a CIM_J2eeJCAResource object. */ ( id SERIAL PRIMARY KEY , j2ee_jcaresource_id5 INTEGER REFERENCES j2ee_jcaresource(id) , j2ee_jcaconnection_factory_id6 INTEGER REFERENCES j2ee_jcaconnection_factory(id) ); 
        CREATE TABLE public.j2ee_domain /* CIM_J2eeDomain identifies the J2EE Domains that are part of the J2EE management environment. Domains provide a structure for grouping J2EE Server objects. */ ( id SERIAL PRIMARY KEY , name text[] , name_format text[] , creation_class_name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.j2ee_ejbin_module /* CIM_J2eeEJBInModule is a aggregation of the EJB components within a deployed EJB JAR module. */ ( id SERIAL PRIMARY KEY , j2ee_ejbmodule_id6 INTEGER REFERENCES j2ee_ejbmodule(id) , j2ee_ejb_id7 INTEGER REFERENCES j2ee_ejb(id) ); 
        CREATE TABLE public.j2ee_resource_on_server /* CIM_J2eeResourceOnServer is an association that establishes the relationship between a J2EE server and its resources. */ ( id SERIAL PRIMARY KEY , j2ee_server_id5 INTEGER REFERENCES j2ee_server(id) , j2ee_resource_id6 INTEGER REFERENCES j2ee_resource(id) ); 
        CREATE TABLE public.j2ee_server_in_domain /* The CIM_J2eeServerInDomain association identifies the J2EE Server that are part of a J2EE Domain for management purposes. */ ( id SERIAL PRIMARY KEY , j2ee_domain_id6 INTEGER REFERENCES j2ee_domain(id) , j2ee_server_id7 INTEGER REFERENCES j2ee_server(id) ); 
        CREATE TABLE public.to_directory_action /* The ToDirectoryAction association identifies the target directory for a FileAction. When this association is used, the assumption is that the target directory was created by a previous Action. This association cannot co-exist with a ToDirectorySpecification association, since a FileAction can only involve a single target directory. */ ( id SERIAL PRIMARY KEY , directory_action_id5 INTEGER REFERENCES directory_action(id) , copy_file_action_id6 INTEGER REFERENCES copy_file_action(id) ); 
        CREATE TABLE public.to_directory_specification /* The ToDirectorySpecification association identifies the target directory for a FileAction. When this association is used, the assumption is that the target directory already exists. This association cannot co-exist with a ToDirectoryAction association, since a FileAction can only involve a single target directory. */ ( id SERIAL PRIMARY KEY , directory_specification_id5 INTEGER REFERENCES directory_specification(id) , copy_file_action_id6 INTEGER REFERENCES copy_file_action(id) ); 
        CREATE TABLE public.associated_database_system /* The CIM_AssociatedDatabaseSystem association identifies the database system that is responsible for the database. */ ( id SERIAL PRIMARY KEY , database_system_id5 INTEGER REFERENCES database_system(id) , common_database_id6 INTEGER REFERENCES common_database(id) ); 
        CREATE TABLE public.adsl_modem /* The ADSLModem class represents Modems of the DSL type = ADSL, Asymmetric Digital Subscriber Line. */ ( id SERIAL PRIMARY KEY , noise_margin text[] , line_attenuation text[] , line_state text[] , total_output_power text[] , max_data_rate text[] , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.access_label_reader /* AccessLabelReader is used to indicate that one or more Label Readers works in conjunction with MediaAccessDevices, to identify PhysicalMedia before read/write. */ ( id SERIAL PRIMARY KEY , label_reader_id5 INTEGER REFERENCES label_reader(id) , media_access_device_id6 INTEGER REFERENCES media_access_device(id) ); 
        CREATE TABLE public.associated_cache_memory /* Indicates that the Memory provides Cache to the Dependent Logical Element. */ ( id SERIAL PRIMARY KEY , memory_id5 INTEGER REFERENCES memory(id) , logical_element_id6 INTEGER REFERENCES logical_element(id) , level text[] , other_level_description text[] , write_policy text[] , other_write_policy_description text[] , cache_type text[] , other_cache_type_description text[] , line_size text[] , replacement_policy text[] , other_replacement_policy_description text[] , read_policy text[] , other_read_policy_description text[] , flush_timer text[] , associativity text[] , other_associativity_description text[] ); 
        CREATE TABLE public.associated_device_masking_group /* Associate a group of devices (storage volumes) to a masking view. */ ( id SERIAL PRIMARY KEY , scsi_protocol_controller_id5 INTEGER REFERENCES scsi_protocol_controller(id) , device_masking_group_id6 INTEGER REFERENCES device_masking_group(id) ); 
        CREATE TABLE public.associated_initiator_masking_group /* Associate a group of initiators to a masking view. */ ( id SERIAL PRIMARY KEY , scsi_protocol_controller_id5 INTEGER REFERENCES scsi_protocol_controller(id) , initiator_masking_group_id6 INTEGER REFERENCES initiator_masking_group(id) ); 
        CREATE TABLE public.associated_supply_voltage_sensor /* The use of this association is being deprecated in lieu of using AssociatedSensor, since the use of the referenced class VoltageSensor is deprecated. A PowerSupply may have an associated VoltageSensor, monitoring its input voltage. This is described by this association. */ ( id SERIAL PRIMARY KEY , voltage_sensor_id6 INTEGER REFERENCES voltage_sensor(id) , power_supply_id7 INTEGER REFERENCES power_supply(id) , monitoring_range text[] ); 
        CREATE TABLE public.cable_modem /* The CableModem class represents a device for transmission across a cable infrastructure. */ ( id SERIAL PRIMARY KEY , vendor_id text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.collection_of_sensors /* The CollectionOfSensors association indicates the Sensors that make up a MultiStateSensor. */ ( id SERIAL PRIMARY KEY , multi_state_sensor_id7 INTEGER REFERENCES multi_state_sensor(id) , sensor_id8 INTEGER REFERENCES sensor(id) ); 
        CREATE TABLE public.current_sensor /* The use of this class is being deprecated in lieu of the additions to Sensor and NumericSensor. A CurrentSensor can be defined by setting the SensorType property, inherited from Sensor, to 4 ("Current"). */ ( id SERIAL PRIMARY KEY , sensor_type text[] , base_units text[] , unit_modifier text[] , rate_units text[] , current_reading text[] , nominal_reading text[] , normal_max text[] , normal_min text[] , max_readable text[] , min_readable text[] , resolution text[] , tolerance text[] , accuracy text[] , lower_threshold_non_critical text[] , upper_threshold_non_critical text[] , lower_threshold_critical text[] , upper_threshold_critical text[] , lower_threshold_fatal text[] , upper_threshold_fatal text[] , is_linear text[] , hysteresis text[] , other_sensor_type_description text[] , current_state text[] , polling_interval text[] , sensor_context text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.desktop_monitor /* Capabilities and management of the DesktopMonitor (CRT) LogicalDevice. */ ( id SERIAL PRIMARY KEY , display_type text[] , bandwidth text[] , screen_height text[] , screen_width text[] , is_locked text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , name text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.disk_partition /* A DiskPartition is a subclass of GenericDiskPartition for MBR (Master Boot Record) style partitions used in X86 platforms such as Windows and Linux. */ ( id SERIAL PRIMARY KEY , primary_partition text[] , partition_type text[] , partition_subtype text[] , name_format text[] , name_namespace text[] , bootable text[] , allocatable text[] , signature text[] , signature_algorithm text[] , signature_state text[] , extendable text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.disk_partition_based_on_volume /* DiskPartitions should be BasedOn a single StorageVolume (for example, exposed by a hardware RAID cabinet), an SCC VolumeSet, or realized directly in PhysicalMedia. The first two relationships are made explicit in this association. The latter is conveyed by the RealizesDiskPartition association. */ ( id SERIAL PRIMARY KEY , storage_volume_id5 INTEGER REFERENCES storage_volume(id) , disk_partition_id6 INTEGER REFERENCES disk_partition(id) , starting_address text[] , ending_address text[] , order_index text[] ); 
        CREATE TABLE public.disk_partition_configuration_service /* DiskPartitionConfigurationService provides methods for clients to configure DiskPartitions. The instrumentation MUST NOT instantiate instances of partitions (such as hidden, maintenance, or zero-length partitions) that are not intended for use by applications (filesystems, databases, ...). There are two reasons for this constraint. There are different system-specific ways to indicate whether or not a partition is hidden, in some cases, the starting/ending block information is invalid, but ignored. If these properties are exposed, clients will not have a way to determine which blocks are in use. The other reason is that typically the number of partitions is fixed in the underlying data structures (or grows by large, fixed-size chunks). Common practice is to have a one (or a few) partition per disk with many hidden partitions. Instantiating a lot of hidden partitions clutters up the model without value add. The methods of this service and the properties of DiskPartitionConfigurationCapabilities provide a view of partitions actually in use without requiring clients to understand system-specific details. */ ( id SERIAL PRIMARY KEY , partitioning_schemes text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , start_mode text[] , started text[] , lo_sid text[] , lo_sorg_id text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.gpt_disk_partition /* GPT is a newer partitioning style that supports volumes larger than the 2 terabyte max of other partition styles. GPT in general is associated with PC X86 architectures, but GPT partitions are OS and platform independent. GPT uses 16 byte GUIDs (Globally Unique IDs) for certain properties. The DeviceId property inherited from LogicalDevice should be a GUID for GPTDiskPartitions; this string property should be formatted as a 32 character string with two text bytes representing each binary byte. GPT specifications call for a Protective MBR table (PMBR) in block 0 followed by an GPT (GUID Partition Table). The MBR must describe a single active partition - the GPT Partition that occupies the rest of the disk. The user only sees the GPT style partitions in this second MBR partition. This could be modelled as two tiers, but since the specification requires this precise behavior with no management at the MBR level, only the GPT style partitions are exposed through the CIM model. */ ( id SERIAL PRIMARY KEY , partition_type text[] , bootable text[] , allocatable text[] , signature text[] , signature_algorithm text[] , signature_state text[] , extendable text[] , data_organization text[] , purpose text[] , access text[] , error_methodology text[] , block_size text[] , number_of_blocks text[] , consumable_blocks text[] , is_based_on_underlying_redundancy text[] , sequential_access text[] , no_single_point_of_failure text[] , data_redundancy text[] , package_redundancy text[] , delta_reservation text[] , primordial text[] , name text[] , name_format text[] , name_namespace text[] , other_name_namespace text[] , other_name_format text[] , compression_rate text[] , compression_state text[] , extent_interleave_depth text[] , extent_stripe_length text[] , is_composite text[] , is_compressed text[] , is_concatenated text[] , other_usage_description text[] , usage text[] , system_creation_class_name text[] , system_name text[] , creation_class_name text[] , device_id text[] , power_management_supported text[] , availability text[] , status_info text[] , last_error_code text[] , error_description text[] , error_cleared text[] , power_on_hours text[] , total_power_on_hours text[] , max_quiesce_time text[] , allocation_state text[] , location_indicator text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.monitor_setting /* MonitorSetting associates the MonitorResolution Setting object with the DesktopMonitor to which it applies. */ ( id SERIAL PRIMARY KEY , desktop_monitor_id5 INTEGER REFERENCES desktop_monitor(id) , monitor_resolution_id6 INTEGER REFERENCES monitor_resolution(id) ); 
        CREATE TABLE public.package_temp_sensor /* Often, a TemperatureSensor is installed in a Package such as a Chassis or a Rack, not to measure any particular Device, but the Package's environment IN general. The use of this association has been deprecated. Instead, use PackageDependency to describe this relationship. */ ( id SERIAL PRIMARY KEY , temperature_sensor_id6 INTEGER REFERENCES temperature_sensor(id) , physical_package_id7 INTEGER REFERENCES physical_package(id) ); 
        CREATE TABLE public.realizes_disk_partition /* DiskPartitions can be directly realized
    ON a PhysicalMedia. This is used to model the creation of Partitions
    ON a raw SCSI
        OR IDE drive,
USING the fdisk (DOS
        AND Unix)
        OR pdisk (Unix) command. The StartingAddress of the DiskPartition
    ON the PhysicalMedia is also specified AS a property of this relationship. An alternative is that Partitions can be BasedOn StorageVolumes, such AS a VolumeSet
        OR a Volume exposed by a hardware RAID cabinet. The latter relationship is modeled
USING the DiskPartitionBasedOnVolume association. */ ( id SERIAL PRIMARY KEY , physical_media_id5 INTEGER REFERENCES physical_media(id) , disk_partition_id6 INTEGER REFERENCES disk_partition(id) , starting_address text[] ); 
CREATE TABLE public.af_related_services /* The IETF's RFC2597 describes a Differentiated Services Per-Hop-Behavior (PHB) Group called Assured Forwarding (AF). Quoting from the RFC, 'The AF PHB group provides delivery of IP packets IN four independently forwarded AF classes. Within each AF class, an IP packet can be assigned one of three different levels of drop precedence.' The AFRelatedServices association describes the precedence of the individual AF drop-related Services within an AF IP packet-forwarding class. */ ( id SERIAL PRIMARY KEY , af_service_id5 INTEGER REFERENCES af_service(id) , af_service_id6 INTEGER REFERENCES af_service(id) ); 
CREATE TABLE public.asbgp_endpoints /* This aggregation defines the different router interfaces that are running BGP in the AutonomousSystem. */ ( id SERIAL PRIMARY KEY , autonomous_system_id7 INTEGER REFERENCES autonomous_system(id) , bgp_protocol_endpoint_id8 INTEGER REFERENCES bgp_protocol_endpoint(id) ); 
CREATE TABLE public.hosted_network_pipe /* HostedNetworkPipe is an association between a pipe and the network in whose context the pipe is defined. The cardinality of this association is 1-to-many. A network may host many pipes, and pipes are scoped/contained by only one network. */ ( id SERIAL PRIMARY KEY , network_id5 INTEGER REFERENCES network(id) , network_pipe_id6 INTEGER REFERENCES network_pipe(id) ); 
CREATE TABLE public.ospf_area /* This class represents an OSPF area. The definition of an OSPF area from RFC2328, is 'OSPF allows sets of networks to be grouped together. Such a grouping is called an area. The topology of an area is hidden
FROM the rest of the Autonomous System. This information hiding enables a significant reduction IN routing traffic. Also, routing within the area is determined only by the area's own topology, lending the area protection from bad routing data.' This class has a 'Type' propery, which distinguishes
    BETWEEN the different area types. This approach was chosen, because it provides a simpler way to indicate the type of an area,
        AND additional subclassing is NOT needed at this time. */ ( id SERIAL PRIMARY KEY , area_id text[] , area_type text[] , ext_lsdb_limit text[] , name_format text[] , creation_class_name text[] , name text[] , primary_owner_name text[] , primary_owner_contact text[] , allocation_state text[] , enabled_state text[] , other_enabled_state text[] , requested_state text[] , enabled_default text[] , time_of_last_state_change text[] , transitioning_to_state text[] , install_date text[] , status text[] , health_state text[] , communication_status text[] , detailed_status text[] , operating_status text[] , primary_status text[] , instance_id text[] , caption text[] , description text[] , element_name text[] , generation text[] ); 
        CREATE TABLE public.policy_action_in_policy_repository /* The ReusablePolicy association is a more general relationship that incorporates both Conditions
        AND Actions AS well AS any other policy subclass. This class represents the hosting of reusable PolicyActions by a PolicyRepository. A reusable Policy Action is always related to a single PolicyRepository, via this association. Note, that an instance of PolicyAction can be either reusable
        OR rule-specific.
    WHEN the Action is rule- specific, it shall NOT be related to any PolicyRepository via the PolicyActionInPolicyRepository association. */ ( id SERIAL PRIMARY KEY , policy_repository_id6 INTEGER REFERENCES policy_repository(id) , policy_action_id7 INTEGER REFERENCES policy_action(id) ); 
    CREATE TABLE public.policy_condition_in_policy_repository /* The ReusablePolicy association is a more general relationship that incorporates both Conditions
        AND Actions AS well AS any other policy subclass. This class represents the hosting of reusable PolicyConditions by a PolicyRepository. A reusable Policy Condition is always related to a single PolicyRepository, via this association. Note, that an instance of PolicyCondition can be either reusable
        OR rule-specific.
    WHEN the Condition is rule- specific, it shall NOT be related to any PolicyRepository via the PolicyConditionInPolicyRepository association. */ ( id SERIAL PRIMARY KEY , policy_repository_id6 INTEGER REFERENCES policy_repository(id) , policy_condition_id7 INTEGER REFERENCES policy_condition(id) ); 
    CREATE TABLE public.policy_container_in_policy_container /* A relationship that aggregates one
        OR more lower-level ReusablePolicyContainer instances into a higher-level ReusablePolicyContainer. */ ( id SERIAL PRIMARY KEY , reusable_policy_container_id6 INTEGER REFERENCES reusable_policy_container(id) , reusable_policy_container_id7 INTEGER REFERENCES reusable_policy_container(id) ); 
        CREATE TABLE public.reusable_policy /* The ReusablePolicy association provides for the reuse of any subclass of Policy IN a ReusablePolicyContainer. */ ( id SERIAL PRIMARY KEY , reusable_policy_container_id5 INTEGER REFERENCES reusable_policy_container(id) , policy_id6 INTEGER REFERENCES policy(id) ); 
        CREATE TABLE public.cluster_service_access_by_sap /* ClusterServiceAccessBySAP is the relationship
    BETWEEN a ClusteringService
        AND its access points. */ ( id SERIAL PRIMARY KEY , clustering_service_id5 INTEGER REFERENCES clustering_service(id) , clustering_sap_id6 INTEGER REFERENCES clustering_sap(id) ); 
        CREATE TABLE public.computer_system_dma /* An association
    BETWEEN a ComputerSystem
        AND the DMA channels available
    ON it. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , dma_id8 INTEGER REFERENCES dma(id) ); 
    CREATE TABLE public.computer_system_irq /* An association
    BETWEEN a ComputerSystem
        AND the IRQs available
    ON it. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , irq_id8 INTEGER REFERENCES irq(id) ); 
    CREATE TABLE public.computer_system_mapped_io /* An association
    BETWEEN a ComputerSystem
        AND the Memory Mapped I/O ports available
    ON it. */ ( id SERIAL PRIMARY KEY , computer_system_id7 INTEGER REFERENCES computer_system(id) , memory_mapped_io_id8 INTEGER REFERENCES memory_mapped_io(id) ); 
    CREATE TABLE public.ca_has_public_certificate /* A CertificateAuthority may have certificates issued by other CAs
        OR self-signed. This association is essentially an optimization of the CA
HAVING an external identity established by itself
        OR another Authority. This maps closely to LDAP-based certificate authority implementations. */ ( id SERIAL PRIMARY KEY , public_key_certificate_id5 INTEGER REFERENCES public_key_certificate(id) , certificate_authority_id6 INTEGER REFERENCES certificate_authority(id) ); 
        CREATE TABLE public.ca_signs_public_key_certificate /* This relationship associates a CertificateAuthority
WITH the certificates it signs. */ ( id SERIAL PRIMARY KEY , certificate_authority_id6 INTEGER REFERENCES certificate_authority(id) , public_key_certificate_id7 INTEGER REFERENCES public_key_certificate(id) , serial_number text[] , expires text[] ); 
CREATE TABLE public.associated_supply_current_sensor /* The use of this association is being deprecated IN lieu of
USING AssociatedSensor, since the use of the referenced class CurrentSensor is deprecated. A PowerSupply may have an associated CurrentSensor, monitoring its input frequency. This is described by this association. */ ( id SERIAL PRIMARY KEY , current_sensor_id6 INTEGER REFERENCES current_sensor(id) , power_supply_id7 INTEGER REFERENCES power_supply(id) , monitoring_range text[] ); 
CREATE TABLE public.area_of_configuration /* This association connects an area configuration to its area. The OSPFAreaConfiguration class is defined to act AS a focal point to bring together the router (indicated AS a ComputerSystem
WITH an instance of OSPFService, associated to the AreaConfiguration
USING OSPFServiceConfiguration), the area (indicated AS an OSPFArea, associated to the AreaConfiguration
USING AreaOfConfiguration)
        AND the address ranges for advertising (indicated AS instances of RangeOfIPAddresses, associated to the AreaConfiguration
USING RangesOfConfiguration). There is an instance of OSPFAreaConfiguration for each connected area of a router/OSPFService. */ ( id SERIAL PRIMARY KEY , ospf_area_id5 INTEGER REFERENCES ospf_area(id) , ospf_area_configuration_id6 INTEGER REFERENCES ospf_area_configuration(id) ); 
CREATE TABLE public.endpoint_in_area /* This relation connects an OSPF endpoint to an area. */ ( id SERIAL PRIMARY KEY , ospf_area_id7 INTEGER REFERENCES ospf_area(id) , ospf_protocol_endpoint_base_id8 INTEGER REFERENCES ospf_protocol_endpoint_base(id) ); 